function CombinedGraph(t,e,i,o,s,r){this.id=t,this.groupedID="#grouped-bar-"+t,this.boxID="#boxplot-"+t,this.vectorID="#vector-graph-"+t,this.rows1=i,this.rows2=o,this.combinedRows=e,this.selection1=s,this.selection2=r,this.unit=this.getUnit(),this.$titleBar=$("#title-bar-"+t),this.$titleBox=$("#title-box-"+t),this.$titleVector=$("#title-vector-"+t)}function DataProcessor(){}function DataStructure(t,e,i){this.selectionData=t,this.selectionTable=e,this.combineData=i}function Selection(t,e,i,o){this.aTable=t,this.bTable=e,this.cTable=i,this.dTable=o}function DataTables(t,e,i,o,s,r){this.tableA=t,this.tableB=e,this.tableC=i,this.tableD=o,this.tableAB=s,this.tableCD=r}function SelectionData(t,e,i,o,s){this.rows=t,this.title=e,this.subTitle=i,this.id=s,this.unit=o}function SelectionDataCombined(t,e,i,o,s,r,n,a){this.rows=t,this.title1=o,this.title2=s,this.unit1=r,this.unit2=n,this.id=a,this.table1Rows=e,this.table2Rows=i}function SelectedTableData(t,e,i,o,s){this.rows=t,this.id=e,this.title=i,this.subTitle=o,this.unit=s}function Graph(t,e,i){this.id=t,this.groupedID="#grouped-bar-"+t,this.boxID="#boxplot-"+t,this.rows=e,this.selection=i,this.title=this.getTitle(),this.subTitle=this.getSubTitle(),this.unit=this.getUnit(),this.$titleBar=$("#title-bar-"+t),this.$titleBox=$("#title-box-"+t)}function SelectionRowController(t){this.idNumb=t,this.rowSelections={id:t,section:"",category:"",subCategory:"",description:""},this.setInitialState=function(t){this.rowSelections=t},this.clear=function(){this.rowSelections={id:this.id,section:"",category:"",subCategory:"",description:""}},this.validSelection=function(){return""===this.rowSelections.section||""!==this.rowSelections.description},this.initEventListener=function(t){var e=this.idNumb,i=t.filter(function(t){return t.id===e})[0];this.rowSelections.section=i.section,this.rowSelections.category=i.category,this.rowSelections.subCategory=i.subCategory,this.rowSelections.description=i.description},this.updateSection=function(t){t.id===this.idNumb&&(this.rowSelections.category="",this.rowSelections.subCategory="",this.rowSelections.description="",this.rowSelections.section=t.section,events.emit("NEW_SECTION",{id:this.idNumb,selection:this.rowSelections}))},this.updateCategory=function(t){t.id===this.idNumb&&(this.rowSelections.subCategory="",this.rowSelections.description="",this.rowSelections.category=t.category,events.emit("NEW_CATEGORY",{id:this.idNumb,selection:this.rowSelections}))},this.updateSubCategory=function(t){t.id===this.idNumb&&(this.rowSelections.description="",this.rowSelections.subCategory=t.subCategory,events.emit("NEW_SUBCATEGORY",{id:this.idNumb,selection:this.rowSelections}))},this.updateDescription=function(t){t.id===this.idNumb&&(this.rowSelections.description=t.description,events.emit("NEW_DESCRIPTION",{id:this.idNumb,selection:this.rowSelections}))},this.getRowSelection=function(){return this.rowSelections},events.on("SECTION_CHANGED",this.updateSection.bind(this)),events.on("CATEGORY_CHANGED",this.updateCategory.bind(this)),events.on("SUBCATEGORY_CHANGED",this.updateSubCategory.bind(this)),events.on("DESCRIPTION_CHANGED",this.updateDescription.bind(this)),events.on("INIT_SELECTIONS",this.initEventListener.bind(this))}function SectionSelect(t){this.idNumb=t,this.id="#section-select"+t,this.$select=$(this.id),this.initEventListener=function(t){var e=this.idNumb,i=this.id,o=t.filter(function(t){return t.id===e})[0];Database.getSectionsFromDatabase(function(t){dp.sortSections({sections:t}),addOptionsToSelector(i,t,o.section)})},this.updated=function(t){events.emit("SECTION_CHANGED",{section:this.$select.find("option:selected").text(),id:this.idNumb})},this.$select.on("change",this.updated.bind(this)),events.on("INIT_SELECTIONS",this.initEventListener.bind(this))}function CategorySelect(t){this.idNumb=t,this.id="#category-select"+this.idNumb,this.$select=$(this.id),this.initEventListener=function(t){var e=this.idNumb,i=t.filter(function(t){return t.id===e})[0],o=this.id;Database.getCategoriesFromDatabase(i.section,function(t,e){e||addOptionsToSelector(o,t,i.category)})},this.updated=function(t){events.emit("CATEGORY_CHANGED",{category:this.$select.find("option:selected").text(),id:this.idNumb})},this.sectionChangedListener=function(t){if(t.id===this.idNumb){this.$select.html("");var e=this.id;Database.getCategoriesFromDatabase(t.selection.section,function(t,i){i||addOptionsToSelector(e,t,"")})}},this.$select.on("change",this.updated.bind(this)),events.on("NEW_SECTION",this.sectionChangedListener.bind(this)),events.on("INIT_SELECTIONS",this.initEventListener.bind(this))}function SubCategorySelect(t){this.idNumb=t,this.id="#subcategory-select"+this.idNumb,this.$select=$(this.id),this.initEventListener=function(t){var e=this.idNumb,i=t.filter(function(t){return t.id===e})[0],o=this.id;Database.getSubCategoriesFromDatabase(i.section,i.category,function(t,e){e||addOptionsToSelector(o,t,i.subCategory)})},this.categoryChangedListener=function(t){if(t.id===this.idNumb){this.$select.html("");var e=this.id,i=this.idNumb;Database.getSubCategoriesFromDatabase(t.selection.section,t.selection.category,function(t,o){o?events.emit("SUBCATEGORY_CHANGED",{subCategory:"",id:i}):addOptionsToSelector(e,t,"")})}},this.updated=function(t){events.emit("SUBCATEGORY_CHANGED",{subCategory:this.$select.find("option:selected").text(),id:this.idNumb})},this.$select.on("change",this.updated.bind(this)),events.on("SECTION_CHANGED",clearMyself.bind(this)),events.on("NEW_CATEGORY",this.categoryChangedListener.bind(this)),events.on("INIT_SELECTIONS",this.initEventListener.bind(this))}function DescriptionSelect(t){this.idNumb=t,this.id="#description-select"+t,this.$select=$(this.id),this.updated=function(t){events.emit("DESCRIPTION_CHANGED",{description:this.$select.find("option:selected").text(),id:this.idNumb})},this.initEventListener=function(t){var e=this.idNumb,i=t.filter(function(t){return t.id===e})[0],o=this.id;Database.getDescriptionsFromDatabase(i.section,i.category,i.subCategory,function(t,e){e||addOptionsToSelector(o,t,i.description)})},this.subCategoryChangedListener=function(t){if(t.id===this.idNumb){var e=this.id;Database.getDescriptionsFromDatabase(t.selection.section,t.selection.category,t.selection.subCategory,function(t){addOptionsToSelector(e,t,"")})}},this.$select.on("change",this.updated.bind(this)),events.on("SECTION_CHANGED",clearMyself.bind(this)),events.on("CATEGORY_CHANGED",clearMyself.bind(this)),events.on("NEW_SUBCATEGORY",this.subCategoryChangedListener.bind(this)),events.on("INIT_SELECTIONS",this.initEventListener.bind(this))}function clearMyself(t){t.id===this.idNumb&&(this.$select.html(""),this.$select.selectpicker("refresh"))}function addOptionsToSelector(t,e,i){$(t).html("");for(var o=0;o<e.length;o++)null!==e[o]&&(e[o]===i?$(t).append("<option selected>"+e[o]+"</option>"):$(t).append("<option>"+e[o]+"</option>"));$(t).selectpicker("refresh")}function Table(t,e,i,o){this.id=t,this.isCombined=o,this.rows=e,this.unit=e[0].units,this.selection=i,o&&(this.selection1=i[0],this.selection2=i[1]),this.title=this.getTitle(),this.subTitle=this.getSubTitle(),this.dpFormat=d3.format(".4r"),this.availableYears=this.getAvailableYears(),this.noCPICells=[],this.$table=$("#table-"+t),this.$totalsTable=$("#table-total-"+t),this.$title=$("#title-"+t)}CombinedGraph.prototype.isCombined=function(){return!0},CombinedGraph.prototype.getID=function(){return this.id},CombinedGraph.prototype.getSelection1Title=function(){var t=null===this.selection1?"":this.selection1.subCategory;return this.selection1.description+", "+this.selection1.category+", "+t},CombinedGraph.prototype.getSelection2Title=function(){var t=null===this.selection2?"":this.selection2.subCategory;return this.selection2.description+", "+this.selection2.category+",  "+t},CombinedGraph.prototype.getUnit=function(){return this.rows1[0].units+" / "+this.rows2[0].units},CombinedGraph.prototype.getUnit1=function(){return this.rows1[0].units},CombinedGraph.prototype.getUnit2=function(){return this.rows2[0].units},CombinedGraph.prototype.insertTitles=function(){var t="<h4>Ratio "+this.id.charAt(0).toUpperCase()+" / "+this.id.charAt(1).toUpperCase()+"</h4>",e='<h4 class="title"><span style="Color: black;">'+this.id.charAt(0).toUpperCase()+": </span>"+this.getSelection1Title()+"</h4>",i='<h4 class="title"><span style="Color: black;">'+this.id.charAt(1).toUpperCase()+": </span>"+this.getSelection2Title()+"</h4>";this.$titleBar.append(t),this.$titleBar.append(e),this.$titleBar.append(i),this.$titleBox.append(t),this.$titleBox.append(e),this.$titleBox.append(i),this.$titleVector.append(t),this.$titleVector.append(e),this.$titleVector.append(i)},CombinedGraph.prototype.create=function(){var t=dp.createDataForGroupedGraph(this.combinedRows);GroupedBarModule.createdGroupedBarGraph(t.data,t.keys,this.unit,this.groupedID);var e=dp.createDataForBoxPlot(this.combinedRows);BoxPlotModule.createBoxPlot(e,this.boxID,this.unit);var i=dp.createDataForVectorGraph(this.rows1,this.rows2);VectorModule.createVectorGraph(i,this.getUnit2(),this.getUnit1(),this.vectorID)},CombinedGraph.prototype.update=function(t,e,i){this.rows=t,this.rows1=e,this.rows2=i,this.create()},String.prototype.includes||(String.prototype.includes=function(){"use strict";return String.prototype.indexOf.apply(this,arguments)!==-1}),Array.prototype.includes||Object.defineProperty(Array.prototype,"includes",{enumerable:!1,value:function(t){var e=this.filter(function(e){return e==t});return e.length>0}});var CompareModule=function(){function t(t,i,o){var s=i[0].category+", "+i[0].subCategory+", "+i[0].description,r=i[1].category+", "+i[1].subCategory+", "+i[1].description,n=i[2].category+", "+i[2].subCategory+", "+i[2].description,a=i[3].category+", "+i[3].subCategory+", "+i[3].description,c="<h3> Ratio (A / B ) over ( C / D ) </h3>",l='<span class="letter">A: </span>',h='<span class="letter">B: </span>',u='<span class="letter">C: </span>',d='<span class="letter">D: </span>',p='<h4 class="title">'+l+" "+s+"</h4>",b='<h4 class="title">'+h+" "+r+"</h4>",f='<h4 class="title">'+u+" "+n+"</h4>",v='<h4 class="title">'+d+" "+a+"</h4>";$("#title-vector-abcd").append(c).append(p).append(b).append(f).append(v),VectorModule.createVectorGraph(e.createDataForVectorGraph(t[0].rows,t[1].rows),o[0]+" / "+o[1],o[2]+" / "+o[3],"#vector-graph-abcd"),$("#vector-full-abcd").show()}var e=new DataProcessor,i={},o=!1,s=$("#error-div"),r=function(t){var e=[];for(var i in t)t.hasOwnProperty(i)&&e.push(encodeURIComponent(i)+"="+encodeURIComponent(t[i]));return e.join("&")},n=function(){if(!selectionRows.canSearch())return void(o||(s.append('<h4 style="color : red;">Partial Row Selected</h4>'),o=!0));var t={};selectionRows.getAllSelectionData().forEach(function(e){""!==e.section&&(t["s"+e.id]=e.section,t["c"+e.id]=e.category,t["sc"+e.id]=e.subCategory,t["d"+e.id]=e.description)}),window.location.replace("compare?"+r(t))},a=function(o){selectionRows.init(o,!0),Database.getRowsForSearch(o,function(s){s.forEach(function(t){null!==t.fcast_yr&&(t.obs_yr=t.fcast_yr)}),i.selection=new Selection(o[0],o[1],o[2],o[3]),i.rows=s,i.sortedRows=e.filterRowsToTablesAndCopy(s,i.selection);var r=[];i.sortedRows.forEach(function(t){"a"===t.id&&$("#tab-a").addClass("in active"),"ab"!==t.id&&"cd"!==t.id||r.push(t),$("#full-dash-"+t.id).show(),$("#tab-"+t.id).addClass("in active")}),2===r.length&&t(r,o,[i.sortedRows[0].rows[0].units,i.sortedRows[1].rows[0].units,i.sortedRows[2].rows[0].units,i.sortedRows[3].rows[0].units]),events.emit("INIT_DATA",{data:i.sortedRows}),events.emit("ROW_CLICKED",{rowID:"rowa0",rowNumb:0,edb:"Alpine Energy"}),events.emit("TOTAL_ROW_CLICKED",{rowID:"row-tot-a0",region:"South Island"}),i.sortedRows.forEach(function(t){"a"!==t.id&&$("#tab-"+t.id).removeClass("in active")}),c("#top-tab")})},c=function(t){$("html,body").animate({scrollTop:$(t).offset().top},"slow")},l=function(){if(CPIModule.isValid()&&void 0!==i.selection){var t=e.copyRows(i.rows);h(t,CPIModule.getCPIValues());var o=e.filterRowsToTablesAndCopy(t,i.selection);events.emit("ROW_UPDATE",{data:o}),events.emit("APPLY_CPI",{cpiValues:CPIModule.getCPIValues()})}},h=function(t,e){var i=t.filter(function(t){return t.units.includes("$")});if(0!==i.length)for(var o=i.reduce(function(t,e){return t.disc_yr<e.disc_yr?t:e}).obs_yr,s=i.reduce(function(t,e){return t.disc_yr>e.disc_yr?t:e}).obs_yr,r=o;r<=s;r++)i.forEach(function(t,o){for(var s=i[o].obs_yr,n=i[o].value,a=0;a<e.length;a++)e[a].year===r&&s<=r&&(n*=1+e[a].value/100);i[o].value=n})},u=function(){events.emit("ROW_UPDATE",{data:i.sortedRows}),events.emit("REVERT_CPI",{cpiValues:""})};return{loadSearchFromURL:a,search:n,applyCPI:l,revertCPI:u}}();$(document).ready(function(){$(".nav-link").removeClass("active"),$("#benchmarks-link").addClass("active"),$("#search-btn-compare").click(function(){CompareModule.search()}),$("cpi").click(function(){CompareModule.applyCPI()})});var CPIModule=function(){var t=$("#cpi-form");$.validator.setDefaults({errorClass:"help-block",highlight:function(t){$(t).closest(".form-group").addClass("has-error")},unhighlight:function(t){$(t).closest(".form-group").removeClass("has-error")}});var e={required:!0,number:!0,min:.1,max:100},i={required:"Please enter a percentage",number:"Please enter a valid number",min:"Please enter a percentage greater than 0",max:"Please enter a percentage less than 100"};t.validate({rules:{Y2012:e,Y2013:e,Y2014:e,Y2015:e,Y2016:e},messages:{Y2012:i,Y2013:i,Y2014:i,Y2015:i,Y2016:i}});var o=function(){return[{year:2012,value:+t.find("#Y2012").val()},{year:2013,value:+t.find("#Y2013").val()},{year:2014,value:+t.find("#Y2014").val()},{year:2015,value:+t.find("#Y2015").val()},{year:2016,value:+t.find("#Y2016").val()}]},s=function(){return t.valid()};return{getCPIValues:o,isValid:s}}(),dp=new DataProcessor;DataProcessor.prototype.copyDataTables=function(t){for(var e=[t.tableA,t.tableB,t.tableC,t.tableD,t.tableAB,t.tableCD],i=([t.tableAB,t.tableCD],[[],[],[],[],[],[]]),o=0;o<e.length;o++){var s=e[o];if(void 0!==s)if(4===o||5===o)for(var r=0;r<s.length;r++)i[o].push({description:s[r].description,disc_yr:s[r].disc_yr,edb:s[r].edb,section:s[r].section,units:s[r].unit,value:s[r].value,unitA:s[r].unitA,unitB:s[r].unitB,obs_yr:s[r].obs_yr});else for(var r=0;r<s.length;r++)i[o].push({category:s[r].category,description:s[r].description,disc_yr:s[r].disc_yr,edb:s[r].edb,fcast_yr:s[r].fcast_yr,network:s[r].network,note:s[r].note,obs_yr:s[r].obs_yr,p_key:s[r].p_key,sch_ref:s[r].sch_ref,schedule:s[r].schedule,section:s[r].section,sub_category:s[r].sub_category,units:s[r].units,value:s[r].value})}return new DataTables(i[0],i[1],i[2],i[3],i[4],i[5])},DataProcessor.prototype.copyRows=function(t){var e=[];return t.forEach(function(t){e.push({value:t.value,category:t.category,description:t.description,disc_yr:t.disc_yr,edb:t.edb,fcast_yr:t.fcast_yr,network:t.network,note:t.note,obs_yr:t.obs_yr,p_key:t.p_key,sch_ref:t.sch_ref,schedule:t.schedule,section:t.section,sub_category:t.sub_category,units:t.units})}),e},DataProcessor.prototype.createDataStructuresWithCopy=function(t){for(var e=[],i=[],o=[],s=[t.tableA.length>0,t.tableB.length>0,t.tableC.length>0,t.tableD.length>0],r=[t.tableA,t.tableB,t.tableC,t.tableD,t.tableAB,t.tableCD],n=["a","b","c","d","ab","cd"],a=0;a<s.length;a++)if(s[a]){var c=r[a][0].section+", "+r[a][0].category,l=null===r[a][0].sub_category?r[a][0].description:r[a][0].sub_category+", "+r[a][0].description;if(i.push(new SelectedTableData(r[a],n[a],l,c,r[a][0].units)),e.push(new SelectionData(r[a],l,c,r[a][0].units,n[a])),("a"===n[a]||"c"===n[a])&&s[a+1]){var h=0===a?4:3,u=r[a+1][0].section+", "+r[a+1][0].category,d=null===r[a+1][0].sub_category?r[a+1][0].description:r[a+1][0].sub_category+", "+r[a+1][0].description;i.push(new SelectedTableData(r[a+h],n[a+h],l+", "+c,d+", "+u,r[a+1][0].units)),o.push(new SelectionDataCombined(r[a+h],r[a],r[a+1],l+" "+c,d+" "+u,r[a][0].units,r[a+1][0].units,n[a+h]))}}return new DataStructure(e,i,o)},DataProcessor.prototype.validateSearchParams=function(t,e){var i=!0;return t.forEach(function(t,o){""===t.subCategory&&e[o]&&(i=!1),""!==t.section&&""!==t.category&&""!==t.description||""===t.section&&""===t.category&&""===t.description||(i=!1)}),i},DataProcessor.prototype.matchDBRow=function(t,e){return t.section===e.section&&t.category===e.category&&t.description===e.description&&(null!==t.sub_category?e.subCategory===t.sub_category:""===e.subCategory)},DataProcessor.prototype.filterRowsToTables=function(t,e){var i=t.filter(function(t){return dp.matchDBRow(t,e.aTable)}),o=t.filter(function(t){return dp.matchDBRow(t,e.bTable)}),s=t.filter(function(t){return dp.matchDBRow(t,e.cTable)}),r=t.filter(function(t){return dp.matchDBRow(t,e.dTable)});i.forEach(function(t){null===t.value&&(t.value=0)}),o.forEach(function(t){null===t.value&&(t.value=0)}),s.forEach(function(t){null===t.value&&(t.value=0)}),r.forEach(function(t){null===t.value&&(t.value=0)});var n=[];if(i.length>0&&n.push({id:"a",rows:i,search:e.aTable}),i.length>0&&o.length>0)var a=dp.combineTables(i,o);if(s.length>0&&r.length>0)var c=dp.combineTables(s,r);return new DataTables(i,o,s,r,a,c)},DataProcessor.prototype.filterRowsToTablesAndCopy=function(t,e){var i=t.filter(function(t){return dp.matchDBRow(t,e.aTable)}),o=t.filter(function(t){return dp.matchDBRow(t,e.bTable)}),s=t.filter(function(t){return dp.matchDBRow(t,e.cTable)}),r=t.filter(function(t){return dp.matchDBRow(t,e.dTable)});if(i.forEach(function(t){null===t.value&&(t.value=0)}),o.forEach(function(t){null===t.value&&(t.value=0)}),s.forEach(function(t){null===t.value&&(t.value=0)}),r.forEach(function(t){null===t.value&&(t.value=0)}),i.length>0&&o.length>0)var n=dp.combineTables(i,o);if(s.length>0&&r.length>0)var a=dp.combineTables(s,r);var c=this.copyDataTables(new DataTables(i,o,s,r,n,a)),l=[];return i.length>0&&l.push({id:"a",rows:c.tableA,search:e.aTable,combined:!1}),o.length>0&&l.push({id:"b",rows:c.tableB,search:e.bTable,combined:!1}),s.length>0&&l.push({id:"c",rows:c.tableC,search:e.cTable,combined:!1}),r.length>0&&l.push({id:"d",rows:c.tableD,search:e.dTable,combined:!1}),i.length>0&&o.length>0&&l.push({id:"ab",rows:c.tableAB,table1Rows:c.tableA,table2Rows:c.tableB,search:e.aTable,search2:e.bTable,combined:!0}),s.length>0&&r.length>0&&l.push({id:"cd",rows:c.tableCD,table1Rows:c.tableC,table2Rows:c.tableD,search:e.cTable,search2:e.dTable,combined:!0}),l},DataProcessor.prototype.combineTables=function(t,e){for(var i=[],o=t,s=e,r=0;r<o.length;r++)for(var n=0;n<s.length;n++)if(o[r].edb===s[n].edb&&o[r].obs_yr===s[n].obs_yr&&o[r].disc_yr===s[n].disc_yr){i.push({disc_yr:s[n].disc_yr,edb:s[n].edb,obs_yr:s[n].obs_yr,value:o[r].value/("0"===s[n].value||0===s[n].value?1:s[n].value),section:s[n].section+""+s[n].description+" over ",description:o[r].section+" "+o[r].description,unitA:o[r].units,unitB:s[n].units,unit:o[r].units+" / "+s[n].units});break}return i},DataProcessor.prototype.createDataForVectorGraph=function(t,e){var i=t,o=e,s=[],r=[],n=[];t.forEach(function(t){if(!n.includes(t.obs_yr))for(var i=0;i<e.length;i++)if(e[i].obs_yr===t.obs_yr){n.push(t.obs_yr);break}});for(var a=0;a<i.length;a++)if(!s.includes(i[a].edb)){var c=i.filter(function(t){return t.edb===i[a].edb}),l=o.filter(function(t){return t.edb===i[a].edb});s.push(i[a].edb);for(var h=[],u=[],d=0;d<c.length;d++)if(!h.includes(c[d].disc_yr)&&n.includes(c[d].disc_yr)){h.push(c[d].disc_yr);var p=c.filter(function(t){return t.disc_yr===c[d].disc_yr}),b=l.filter(function(t){return t.disc_yr===c[d].disc_yr});if(p.length!=b.length)return[];for(var f=0;f<p.length;f++)u.push({year:+p[f].disc_yr,valueA:+p[f].value,valueB:+b[f].value})}u.sort(function(t,e){return t.year-e.year}),r.push({edb:i[a].edb,years:u})}return r},DataProcessor.prototype.createDataForBoxPlot=function(t){for(var e=[],i=[],o=0;o<t.length;o++)e.includes(t[o].obs_yr)||(i.push(t.filter(function(e){return e.obs_yr===t[o].obs_yr})),e.push(t[o].obs_yr));for(var s=[],r=[],n=1/0,a=-(1/0),o=0;o<i.length;o++){var c=[];c[0]=""+i[o][0].obs_yr;for(var l=""+i[o][0].obs_yr,h=[],u=0;u<i[o].length;u++){var d=+i[o][u].value,p=i[o][u].edb;d>a&&(a=d),d<n&&(n=d),h.push(d),r.push({year:l,edb:p,value:d})}c[1]=h,s.push(c)}return s.sort(function(t,e){return t[0]-e[0]}),{min:n,max:a,data:s,scatterData:r}},DataProcessor.prototype.createDataForGroupedGraph=function(t){var e=[];t.forEach(function(t){e.includes(t.obs_yr)||e.push(t.obs_yr)}),e.sort(function(t,e){return+t-+e});for(var i=[],o=[],s=0;s<t.length;s++)if(o.includes(t[s].edb))for(var r=0;r<i.length;r++)i[r].edb===t[s].edb&&(i[r][t[s].obs_yr]=+t[s].value);else{o.push(t[s].edb);var n={edb:t[s].edb};n[t[s].obs_yr]=+t[s].value,i.push(n)}return{data:i,keys:e}},DataProcessor.prototype.sortSections=function(t){t.sections.sort(function(t,e){for(var i=0;!isNaN(t.charAt(i));)i++;var o=t.substring(0,i);for(i=0;!isNaN(e.charAt(i));)i++;var s=e.substring(0,i);return o!==s?o-s:[t,e].sort()[0]===t?-1:1})},DataProcessor.prototype.applyCPIToTableRows=function(t,e){t.forEach(function(i,o){for(var s=t[o].obs_yr,r=t[o].value,n=0;n<e.length;n++)s<=e[n].year&&(r*=1+e[n].value/100);t[o].value=r})},DataProcessor.prototype.addToSelection=function(t,e,i,o){for(var s=0;s<o.length;s++)o[s].id+""==t+""&&("section"===e?o[s].section=i:"category"===e?o[s].category=i:"subcategory"===e?o[s].subCategory=i:"description"===e&&(o[s].description=i))},DataProcessor.prototype.createTableTotals=function(t,e,i){for(var o=["n","uni","eni","swni","s","usi","lsi"],s={},r=0;r<i.length;r++)t.filter(function(t){return t.obs_yr===i[r]}).forEach(function(t){o.forEach(function(i){e[i].includes(t.edb)&&(void 0===s[i]?s[i]=[+t.value]:r===s[i].length?s[i].push(+t.value):s[i][r]+=+ +t.value)})});for(var n=[],r=0;r<i.length;r++)n.push(s.n[r]+s.s[r]);return s.nz=n,s},Graph.prototype.isCombined=function(){return!1},Graph.prototype.getUnit=function(){return this.rows[0].units},Graph.prototype.getID=function(){return this.id},Graph.prototype.getTitle=function(){return this.selection.description+", "+this.selection.subCategory},Graph.prototype.getSubTitle=function(){return this.selection.section+", "+this.selection.category},Graph.prototype.getUnit=function(){return this.rows[0].units},Graph.prototype.insertTitles=function(){this.$titleBar.append('<h3 class="title">'+this.title+"</h3>").append('<h4 class="subTitle">'+this.subTitle+"</h4>"),this.$titleBox.append('<h3 class="title">'+this.title+"</h3>").append('<h4 class="subTitle">'+this.subTitle+"</h4>")},Graph.prototype.create=function(){var t=dp.createDataForGroupedGraph(this.rows);GroupedBarModule.createdGroupedBarGraph(t.data,t.keys,this.unit,this.groupedID);var e=dp.createDataForBoxPlot(this.rows);BoxPlotModule.createBoxPlot(e,this.boxID,this.unit)},Graph.prototype.update=function(t){this.rows=t,this.create()};var GraphModule=function(){var t=[],e=d3.scaleOrdinal().range(["#BBDEFB","#64B5F6","#1976D2","#1565C0","#0D47A1","#d0743c","#ff8c00"]),i=(d3.scaleOrdinal().range(["#FF7373","#FF4C4C","#FF2626","#B20000","#D90000","#d0743c","#ff8c00"]),d3.scaleOrdinal().range(["#C1FFC1","#90EE90","#5BC85B","#31A231","#137B13","#d0743c","#ff8c00"])),o=function(e){e.data.forEach(function(e){e.combined?t.push(new CombinedGraph(e.id,e.rows,e.table1Rows,e.table2Rows,e.search,e.search2)):t.push(new Graph(e.id,e.rows,e.search))}),t.forEach(function(t){t.insertTitles(),t.create()})},s=function(e){e.data.forEach(function(e){t.forEach(function(t){t.getID()===e.id&&(t.isCombined()?t.update(e.rows,e.table1Rows,e.table2Rows):t.update(e.rows))})})},r=function(t){return t.unselect?(d3.selectAll(".line-selected-table").classed("line-selected",!1),void d3.selectAll(".vec-dot-selected").classed("vec-dot-selected",!1)):(alreadySelected=!1,d3.selectAll(".bar-selected").datum(function(t){return t}).attr("fill",function(t){return e(t.key)}),d3.selectAll(".bar-selected").classed("bar-selected",!1),void(alreadySelected||(d3.selectAll("rect."+t.edb.replace(/ /g,"")).classed("bar-selected",!0).datum(function(t){return t}).attr("fill",function(t){return i(t.key)}),d3.selectAll(".line-selected-table").classed("line-selected",!1),d3.selectAll(".vec-dot-selected").classed("vec-dot-selected",!1),d3.selectAll("line."+t.edb.replace(/ /g,"")).classed("line-selected-table",!0),d3.selectAll(".dot."+t.edb.replace(/ /g,"")).classed("vec-dot-selected",!0))))};return events.on("INIT_DATA",o),events.on("ROW_CLICKED",r),events.on("ROW_UPDATE",s),{update:s}}(),selectionRows=function(){for(var t=[new SelectionRowController(0),new SelectionRowController(1),new SelectionRowController(2),new SelectionRowController(3)],e=[],i=0;i<4;i++)e.push({s:new SectionSelect(i),c:new CategorySelect(i),sc:new SubCategorySelect(i),d:new DescriptionSelect(i)});var o=function(){var e=[];return t.forEach(function(t){e.push(t.getRowSelection())}),e},s=function(){for(var e=0;e<t.length;e++)if(!t[e].validSelection())return!1;return!0},r=function(t){Database.getCategoriesFromDatabase(t.section,function(e,i){i||addOptionsToSelector("#category-select"+t.id,e,t.category)}),Database.getSubCategoriesFromDatabase(t.section,t.category,function(e,i){i||(searchData.validOptions[t.id]=!0,addOptionsToSelector("#subsection-select"+t.id,e,t.subCategory))}),Database.getDescriptionsFromDatabase(t.section,t.category,t.subCategory,function(e,i){i||addOptionsToSelector("#description-select"+t.id,e,t.description)})},n=function(t,e){e?events.emit("INIT_SELECTIONS",t):Database.getSectionsFromDatabase(function(t){var e=new DataProcessor;e.sortSections({sections:t});for(var i=0;i<4;i++)addOptionsToSelector("#section-select"+i,t,"")})},a=function(e){t[e].clear(),$("#description-select"+e+",#subcategory-select"+e+",#category-select"+e).html(""),$("#section-select"+e).find("option:selected").removeAttr("selected"),$(".selectpicker").selectpicker("refresh")};return n([],!1),{getAllSelectionData:o,setSelectionsFromURL:r,init:n,clear:a,canSearch:s}}();Table.prototype.getTitle=function(){if(this.isCombined){var t=null===this.selection[0]?"":this.selection[0].subCategory;return this.selection[0].category+", "+t+", "+this.selection[0].description}return(void 0===this.subCategory?"":this.selection.subCategory+", ")+" "+this.selection.description},Table.prototype.getSubTitle=function(){if(this.isCombined){var t=null===this.selection[1]?"":this.selection[1].subCategory;return this.selection[1].category+", "+t+", "+this.selection[1].description}return this.selection.section+", "+this.selection.category},Table.prototype.update=function(t){this.rows=t,this.createTotalsTable(!0,"")},Table.prototype.totalsRowSelected=function(t){var e=t.rowID.charAt(t.rowID.length-1),i="row-tot-"+this.id+e;SingleBarModule.showBarWithRowElem(i,t.region,"#bar-total-"+this.id,"#head-row-totals-"+this.id,"#table-total-"+this.id,this.unit)},Table.prototype.rowClicked=function(t){var e=t.rowID.slice(-1);isNaN(t.rowID.slice(-2))||(e=t.rowID.slice(-2)),SingleBarModule.showBarWithRowElem("row"+this.id+e,t.edb,"#bar-"+this.id,"#head-row-"+this.id,"#table-"+this.id,this.unit)},Table.prototype.getAvailableYears=function(){t=[];var t=[];return this.rows.forEach(function(e){t.includes(e.obs_yr)||t.push(e.obs_yr)}),t.sort(function(t,e){return+t-+e}),t},Table.prototype.canApplyCPI=function(){return!this.isCombined&&this.unit.includes("$")},Table.prototype.applyCPI=function(t){this.noCPICells.length>0&&this.revertCPI();var e=this.$table.find(".cell"),i=this.noCPICells;this.id;e.each(function(){i.push({id:$(this).attr("id"),value:$(this).text()})});var o=1/0,s=-(1/0);e.each(function(){var t=+$(this).attr("class").split(" ")[1];o=t<o?t:o,s=t>s?t:s});var r=this.dpFormat;e.each(function(){for(var e=+$(this).attr("class").split(" ")[1],i=$(this).attr("origvalue"),n=o;n<=s;n++)for(var a=0;a<t.length;a++)t[a].year===n&&e<=n&&(i*=1+t[a].value/100,i=r(i));$(this).text(i)})},Table.prototype.revertCPI=function(){if(this.noCPICells.length>0){var t=this.dpFormat;this.noCPICells.forEach(function(e){$("#"+e.id).text(t(e.value))})}},Table.prototype.insertTitles=function(){if(this.isCombined){var t=this.id.charAt(0).toUpperCase(),e=this.id.charAt(1).toUpperCase();this.$title.append("<h3>Ratio analysis "+t+" / "+e+"</h4>"),this.$title.append('<h4 class="title"><span style="color: black;">'+t+": </span>"+this.title+'</h4><h4 class="title"><span style="color: black;">'+e+": </span>"+this.subTitle+"</h4>")}else this.$title.append('<h2 class="title">'+this.title+"</h2>").append('<h4 class="subTitle">'+this.subTitle+"</h4>")},Table.prototype.create=function(){var t=this.createTableData(this.rows),e="";t[0].years.forEach(function(t){e+="<th>"+t.year+"</th>"}),this.$table.append('<tr id="head-row-'+this.id+'" class="table-row table-head"> <th>EDB</th>'+e+"</tr>");for(var i=0,o=0,s=[],r=0;r<t.length;r++){for(var n=t[r],a=n.edb,e=n.years,c="<tr class='table-row' id=row"+this.id+o+"><th class='edb-cell'>"+a+"</th>",l=0;l<e.length;l++){var h=e[l];c+="<th origValue='"+h.value+"' class='cell "+h.year+"' id='t"+this.id+i+"'>"+this.dpFormat(h.value)+"</th>",s.push({id:"#t"+this.id+i,value:h.value}),i++}this.$table.append(c+"</tr>"),$("#row"+this.id+o).click(function(){var t=this.id.slice(-1);isNaN(this.id.slice(-2))||(t=this.id.slice(-2));var e=$("#"+this.id+" .edb-cell").text();events.emit("ROW_CLICKED",{rowID:this.id,rowNumb:t,edb:e})}),o++}this.cellValues=s},Table.prototype.createTotalsTable=function(t,e){var i=dp.createTableTotals(this.rows,TablesModule.regions,this.availableYears),o={n:"North Island",uni:"Upper North Island",eni:"Eastern North Island",swni:"South-West North Island",s:"South Island",usi:"Upper South Island",lsi:"Lower South Island",nz:"New Zealand"},s=[],r="";this.availableYears.forEach(function(t){r+="<th>"+t+"</th>"});var n=0,a=0;t&&this.$totalsTable.html("");var c=29;this.$totalsTable.append('<tr id="head-row-totals-'+this.id+'" class="table-row table-head"> <th>Region</th>'+r+"</tr>");for(var l in i)if(i.hasOwnProperty(l)){var h="<tr class='table-row' id=row-tot-"+this.id+a+">",u=this.dpFormat,d=this.noCPICells;h+="<th class='reg-cell'>"+o[l]+"</th>";var p=this.id;i[l].forEach(function(t){var e;e="nz"===l?t/c:t/TablesModule.regions[l].length,h+="<th id='t-total"+p+n+"' origValue='"+e+"' class='cell'>"+u(e)+"</th>",s.push({id:"#t-total"+p+n,value:e}),d.push({id:"t-total"+p+n,value:e}),n++}),this.$totalsTable.append(h+"</tr>"),$("#row-tot-"+this.id+a).click(function(){var t=$("#"+this.id+" .reg-cell").text();events.emit("TOTAL_ROW_CLICKED",{rowID:this.id,region:t})}),a++}""!==e&&$("#"+e).addClass("row-selected"),this.totalCellValues=s},Table.prototype.createTableData=function(t){var e={};t.forEach(function(t){void 0===e[t.edb]&&(e[t.edb]=t.edb)});var i=[];for(var o in e)if(e.hasOwnProperty(o)){var s=t.filter(function(t){return t.edb===e[o]}),r=[];s.forEach(function(t){r.push({year:t.obs_yr,value:t.value})}),r.sort(function(t,e){return t.year>e.year}),i.push({edb:e[o],years:r})}return i},Table.prototype.render=function(){this.applyGradientCSS(this.cellValues),this.applyGradientCSS(this.totalCellValues)},Table.prototype.applyGradientCSS=function(t){var e=!1,i=-(1/0);t.forEach(function(t){i=+t.value>i?+t.value:i});for(var o=0;o<t.length;o++){var s=e?s:+t[o].value/i*100;$(t[o].id).css({background:"-webkit-gradient(linear, left top, right top, color-stop("+s+"%,#7bbfd6), color-stop("+s+"%,#FFF))"})}};var TablesModule=function(){var t={n:["Centralines","Counties Power","Eastland Network","Electra","Horizon Energy","Northpower","Powerco","Scanpower","The Lines Company","Top Energy","Unison Networks","Vector Lines","Waipa Networks","WEL Networks","Wellington Electricity"],uni:["Counties Power","Horizon Energy","Northpower","The Lines Company","Top Energy","Vector Lines","Waipa Networks","WEL Networks"],eni:["Centralines","Eastland Network","Scanpower","Unison Networks"],swni:["Electra","Powerco","Wellington Electricity"],s:["Alpine Energy","Aurora Energy","Buller Electricity","Electricity Ashburton","Electricity Invercargill","MainPower NZ","Marlborough Lines","Nelson Electricity","Network Tasman","Network Waitaki","Orion NZ","OtagoNet","The Power Company","Westpower"],
usi:["Alpine Energy","Buller Electricity","MainPower NZ","Marlborough Lines","Nelson Electricity","Network Tasman","Orion NZ","Westpower"],lsi:["Aurora Energy","Electricity Ashburton","Electricity Invercargill","Network Waitaki","OtagoNet","The Power Company"]},e="",i="",o=[],s=function(t){t.data.forEach(function(t){t.combined?o.push(new Table(t.id,t.rows,[t.search,t.search2],!0)):o.push(new Table(t.id,t.rows,t.search,!1))}),o.forEach(function(t){t.insertTitles(),t.create(),t.createTotalsTable(!1,i)}),o.forEach(function(t){t.render()})},r=function(t){if(e===t.rowID)return $(".table-row").find(".edb-cell:contains('"+t.edb+"')").parent().removeClass("row-selected"),void(rowSelected="");if(""!==e){var i=$("#"+e+" .edb-cell").text();$(".table-row").find(".edb-cell:contains('"+i+"')").parent().removeClass("row-selected")}e=t.rowID,$(".table-row").find(".edb-cell:contains('"+t.edb+"')").parent().addClass("row-selected"),o.forEach(function(e){e.rowClicked(t)})},n=function(t){var e=t.region;if(i===t.rowID){var s=$("#"+t.rowID+" .reg-cell").text();return $(".table-row").find(".reg-cell:contains('"+e+"')").filter(function(){return $(this).text()===e}).parent().removeClass("row-selected"),void(i="")}if(""!==i){var s=$("#"+i+" .reg-cell").text();$(".table-row").find(".reg-cell:contains('"+s+"')").filter(function(){return $(this).text()===s}).parent().removeClass("row-selected")}$(".table-row").find(".reg-cell:contains('"+e+"')").filter(function(){return $(this).text()===e}).parent().addClass("row-selected"),i=t.rowID,o.forEach(function(e){e.totalsRowSelected(t)})},a=function(t){var e=t.cpiValues;o.forEach(function(t){t.canApplyCPI()&&(t.applyCPI(e),t.createTotalsTable(!0,i))}),o.forEach(function(t){t.render()})},c=function(){o.forEach(function(t){t.revertCPI()}),o.forEach(function(t){t.render()})},l=function(t){t.data.forEach(function(t){o.forEach(function(e){e.id===t.id&&(e.isCombined?e.update(t.rows,t.table1Rows,t.table2Rows):e.update(t.rows))})})};return events.on("INIT_DATA",s),events.on("ROW_CLICKED",r),events.on("TOTAL_ROW_CLICKED",n),events.on("APPLY_CPI",a),events.on("REVERT_CPI",c),events.on("ROW_UPDATE",l),{regions:t}}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
