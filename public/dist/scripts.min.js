var SingleBarModule=function(){function t(t,e,n,a,s,i){var o=[];$(a).find("th").each(function(t,e){0!=t&&o.push({category:$(e).text(),value:0})}),$("#"+t).find("th").each(function(t,e){0!=t?o[t-1].value=$(e).text():title=o[t].value=$(e).text()});var l=-(1/0);$(".cell",s).each(function(){var t=+$(this).attr("origValue");l=t>l?t:l});var c=1/0;$(".cell",s).each(function(){var t=+$(this).attr("origValue");c=t<c?t:c}),r(n,l,c,o,e,i)}function e(t){this.id=t,this.x=d3.scaleBand().range([0,i]).padding(.5),this.y=d3.scaleLinear().range([o,0]).nice(),this.yAxis=d3.axisLeft(),this.xAxis=d3.axisBottom(),this.created=!1,this.svg=null}function r(t,e,r,s,i,o){var c=null;l.forEach(function(e){e.id===t&&(c=e)}),null===c?n(t,e,r,s,i,o):a(c,e,r,s,i)}function n(t,r,n,a,u,d){var f=new e(t);l.push(f);var p=n<0&&r>0,h=0;!p&&n<0?h=n:p||(h=r),p&&(h=r),f.svg=d3.select(t).append("svg").attr("width",i+s.left+s.right).attr("height",o+s.top+s.bottom).append("g").attr("transform","translate("+s.left+","+s.top+")"),f.x.domain(a.map(function(t){return t.category})),f.y.domain([0,h]),f.y.nice(),f.yAxis.scale(f.y),f.svg.selectAll(".bar").data(a).enter().append("rect").attr("class","bar single-bar").attr("x",function(t){return f.x(t.category)}).attr("width",f.x.bandwidth()).attr("y",function(t){return f.y(p?Math.abs(t.value):t.value)}).attr("height",function(t){return o-f.y(p?Math.abs(t.value):t.value)}).attr("fill",function(t){return p?t.value>0?"lightgreen":c:"lightgreen"}),f.svg.append("g").attr("transform","translate(0,"+o+")").call(f.xAxis.scale(f.x)),f.svg.append("g").attr("class","yAxis").call(f.yAxis),f.created=!0;var g=0;f.svg.select(".yAxis").selectAll("text").each(function(){this.getBBox().width>g&&(g=this.getBBox().width)}),console.log("Max Y",g),f.svg.attr("transform","translate("+(s.left+g)+","+s.top+")"),f.svg.append("text").attr("x",i/2).attr("y",0-s.top/2).attr("id","bar-title").attr("text-anchor","middle").style("font-size","24px").text(u),f.svg.append("text").attr("text-anchor","middle").attr("transform","translate("+-(g+20)+","+o/2+")rotate(-90)").attr("class","unit-text-scaled").text(d),f.svg.append("text").attr("text-anchor","middle").attr("transform","translate("+ +(i/2)+","+(s.top+o-s.bottom+20)+")").attr("class","unit-text-scaled").text("Year")}function a(t,e,r,n,a){var s=r<0&&e>0;t.svg.selectAll(".bar").data(n).transition().duration(750).attr("y",function(e){return t.y(s?Math.abs(e.value):e.value)}).attr("height",function(e){return o-t.y(s?Math.abs(e.value):e.value)}).attr("fill",function(t){return s?t.value>0?"lightgreen":c:"lightgreen"}),t.svg.select("#bar-title").text(a)}var s={top:60,right:20,bottom:50,left:50},i=550-s.left-s.right,o=500-s.top-s.bottom,l=[],c="#FF2626";return{showBarWithRowElem:t,createBarGraph:r}}(),GroupedBarModule=function(){function t(t,e,r,n,a,s){this.x0=t,this.x1=e,this.y=r,this.yAxis=n,this.svg=a,this.id=s,this.created=!1,this.g=null}var e={top:25,right:85,bottom:150,left:80},r=1200-e.left-e.right,n=750-e.top-e.bottom,a=[],s=d3.scaleOrdinal().range(["#BBDEFB","#64B5F6","#1976D2","#1565C0","#0D47A1","#d0743c","#ff8c00"]),i=d3.scaleOrdinal().range(["#FF7373","#FF4C4C","#FF2626","#B20000","#D90000","#d0743c","#ff8c00"]),o=d3.scaleOrdinal().range(["#C1FFC1","#90EE90","#5BC85B","#31A231","#137B13","#d0743c","#ff8c00"]),l=function(t,e){d3.selectAll(".bar-selected").datum(function(t){return t}).attr("fill",function(t){return s(t.key)}),d3.selectAll(".bar-selected").classed("bar-selected",!1),e||d3.selectAll("rect."+t.replace(/ /g,"")).classed("bar-selected",!0).datum(function(t){return t}).attr("fill",function(t){return o(t.key)})},c=function(t,e,r,n){for(var s=0;s<a.length;s++)if(a[s].id===n)return void d(t,e,a[s],r);u(t,e,r,n)},u=function(o,l,c,u){var d=new t(d3.scaleBand().rangeRound([0,r]).paddingInner(.05),d3.scaleBand().padding(.05),d3.scaleLinear().rangeRound([n,0]),d3.axisLeft(),d3.axisBottom(),u);a.push(d),d.svg=d3.select(u).append("svg").attr("width",r+e.left+e.right).attr("height",n+e.top+e.bottom).append("g").attr("transform","translate("+e.left+","+e.top+")"),d.x0.domain(o.map(function(t){return t.edb})),d.x1.domain(l).rangeRound([0,d.x0.bandwidth()]),d.y.domain([0,d3.max(o,function(t){return d3.max(l,function(e){return Math.abs(t[e])})})]).nice();var f=d3.format(".2f"),p=d3.tip().attr("class","d3-tip").offset([-10,0]).html(function(t){return"<strong>Value:</strong> <span style='color:lightgreen'>"+f(t.value)+"</span><br><br><strong>Year:</strong> <span style='color:lightgreen'>"+t.key+"</span>"});d.svg.call(p),d.svg.append("g").selectAll("g").data(o).enter().append("g").attr("transform",function(t){return"translate("+d.x0(t.edb)+",0)"}).selectAll("rect").data(function(t){return l.map(function(e){return{neg:t[e]<0,key:e,edb:t.edb,value:Math.abs(t[e])}})}).enter().append("rect").attr("x",function(t){return d.x1(t.key)}).attr("y",function(t){return d.y(t.value)}).attr("width",d.x1.bandwidth()).attr("height",function(t){return n-d.y(t.value)}).attr("fill",function(t){return t.neg?i(t.key):s(t.key)}).attr("class",function(t){return" "+t.edb.replace(/ /g,"")}).on("mouseover",p.show).on("mouseout",p.hide),d.svg.append("g").attr("class","xAxis axis").attr("transform","translate(0,"+n+")").call(d3.axisBottom(d.x0)).selectAll("text").attr("y",0).attr("x",9).attr("dy",".40em").attr("class","axis-text-scaled").attr("transform","rotate(55)").style("text-anchor","start"),d.svg.append("g").attr("class","yAxis axis").call(d.yAxis.scale(d.y)).append("text").attr("x",2).attr("y",d.y(d.y.ticks().pop())+.5).attr("dy","0.40em").attr("class","axis-text-scaled").attr("text-anchor","start"),d.svg.append("text").attr("text-anchor","middle").attr("transform","translate("+-(e.left/2)+","+n/2+")rotate(-90)").attr("class","unit-text-scaled").text(c);var h=d.svg.append("g").attr("font-family","sans-serif").attr("font-size",8).attr("text-anchor","end").selectAll("g").data(l.slice().reverse()).enter().append("g").attr("transform",function(t,e){return"translate(0,"+10*e+")"});h.append("rect").attr("x",r-100).attr("width",8.5).attr("height",8.5).attr("fill",s),h.append("text").attr("x",r-110).attr("y",4).attr("dy","0.32em").attr("class","g-text").style("font-size","8px").text(function(t){return t}),d.created=!0},d=function(t,e,a,o){a.y.domain([0,d3.max(t,function(t){return d3.max(e,function(e){return Math.abs(t[e])})})]).nice(),a.yAxis.scale(a.y),a.svg.select(".yAxis").remove(),a.svg.append("g").attr("class","yAxis axis").call(a.yAxis);var l=d3.format(".2f"),c=d3.tip().attr("class","d3-tip").offset([-10,0]).html(function(t){return"<strong>Value:</strong> <span style='color:lightgreen'>"+l(t.value)+"</span><br><br><strong>Year:</strong> <span style='color:lightgreen'>"+t.key+"</span>"});a.svg.call(c);a.svg.selectAll(".bar").remove();a.svg.append("g").selectAll("g").data(t).enter().append("g").attr("transform",function(t){return"translate("+a.x0(t.edb)+",0)"}).selectAll("rect").data(function(t){return e.map(function(e){return{neg:t[e]<0,key:e,edb:t.edb,value:Math.abs(t[e])}})}).enter().append("rect").attr("x",function(t){return a.x1(t.key)}).attr("y",function(t){return a.y(t.value)}).attr("class","bar").attr("width",a.x1.bandwidth()).attr("height",function(t){return n-a.y(t.value)}).attr("fill",function(t){return t.neg?i(t.key):s(t.key)}).attr("class",function(t){return""+t.edb.replace(/ /g,"")}).on("mouseover",c.show).on("mouseout",c.hide);var u=a.svg.append("g").attr("font-family","sans-serif").attr("font-size",8).attr("text-anchor","end").selectAll("g").data(e.slice().reverse()).enter().append("g").attr("transform",function(t,e){return"translate(0,"+10*e+")"});u.append("rect").attr("x",r-100).attr("width",8.5).attr("height",8.5).attr("fill",s)};return{highlight:l,createdGroupedBarGraph:c}}(),whiskBoxWidth=1;!function(){function t(t){return[0,t.length-1]}function e(t){return[d3.quantile(t,.25),d3.quantile(t,.5),d3.quantile(t,.75)]}d3.box=function(){function r(t){t.each(function(t,e){var r=t[1].sort(d3.ascending),i=d3.select(this),d=r.length,f=r[0],p=r[d-1],h=r.quartiles=l(r),g=o&&o.call(this,r,e),x=g&&g.map(function(t){return r[t]}),y=g?d3.range(0,g[0]).concat(d3.range(g[1]+1,d)):d3.range(d),v=d3.scaleLinear().domain(s&&s.call(this,r,e)||[f,p]).range([n,0]),m=this.__chart__||d3.scaleLinear().domain([0,1/0]).range(v.range());this.__chart__=v;var b=i.selectAll("line.center").data(x?[x]:[]);b.enter().insert("line","rect").attr("class","center").attr("x1",whiskBoxWidth/2).attr("y1",function(t){return m(t[0])}).attr("x2",whiskBoxWidth/2).attr("y2",function(t){return m(t[1])}).style("opacity",1e-6).transition().duration(a).style("opacity",1).attr("y1",function(t){return v(t[0])}).attr("y2",function(t){return v(t[1])}),b.transition().duration(a).style("opacity",1).attr("y1",function(t){return v(t[0])}).attr("y2",function(t){return v(t[1])}),b.exit().transition().duration(a).style("opacity",1e-6).attr("y1",function(t){return v(t[0])}).attr("y2",function(t){return v(t[1])}).remove();var A=i.selectAll("rect.box").data([h]);A.enter().append("rect").attr("class","box").attr("x",0).attr("y",function(t){return m(t[2])}).attr("width",whiskBoxWidth).attr("height",function(t){return m(t[0])-m(t[2])}).transition().duration(a).attr("y",function(t){return v(t[2])}).attr("height",function(t){return v(t[0])-v(t[2])}),A.transition().duration(a).attr("y",function(t){return v(t[2])}).attr("height",function(t){return v(t[0])-v(t[2])});var w=i.selectAll("line.median").data([h[1]]);w.enter().append("line").attr("class","median").attr("x1",0).attr("y1",m).attr("x2",whiskBoxWidth).attr("y2",m).transition().duration(a).attr("y1",v).attr("y2",v),w.transition().duration(a).attr("y1",v).attr("y2",v);var B=i.selectAll("line.whisker").data(x||[]);B.enter().insert("line","circle, text").attr("class","whisker").attr("x1",0).attr("y1",m).attr("x2",0+whiskBoxWidth).attr("y2",m).style("opacity",1e-6).transition().duration(a).attr("y1",v).attr("y2",v).style("opacity",1),B.transition().duration(a).attr("y1",v).attr("y2",v).style("opacity",1),B.exit().transition().duration(a).attr("y1",v).attr("y2",v).style("opacity",1e-6).remove();var k=i.selectAll("circle.outlier").data(y,Number);k.enter().insert("circle","text").attr("class","outlier").attr("r",2).attr("cx",whiskBoxWidth/2).attr("cy",function(t){return m(r[t])}).style("opacity",1e-6).transition().duration(a).attr("cy",function(t){return v(r[t])}).style("opacity",1),k.transition().duration(a).attr("cy",function(t){return v(r[t])}).style("opacity",1),k.exit().transition().duration(a).attr("cy",function(t){return v(r[t])}).style("opacity",1e-6).remove();var E=u||v.tickFormat(8),F=i.selectAll("text.box").data(h);1==c&&F.enter().append("text").attr("class","box").attr("dy",".3em").attr("dx",function(t,e){return 1&e?6:-6}).attr("x",function(t,e){return 1&e?+whiskBoxWidth:0}).attr("y",m).attr("text-anchor",function(t,e){return 1&e?"start":"end"}).text(E).transition().duration(a).attr("y",v),F.transition().duration(a).text(E).attr("y",v);var C=i.selectAll("text.whisker").data(x||[]);1==c&&C.enter().append("text").attr("class","whisker").attr("dy",".3em").attr("dx",6).attr("x",whiskBoxWidth).attr("y",m).text(E).style("opacity",1e-6).transition().duration(a).attr("y",v).style("opacity",1),C.transition().duration(a).text(E).attr("y",v).style("opacity",1),C.exit().transition().duration(a).attr("y",v).style("opacity",1e-6).remove()}),d3.timerFlush()}var n=1,a=0,s=null,i=Number,o=t,l=e,c=!0,u=null;return r.width=function(t){return arguments.length?(whiskBoxWidth=t,r):whiskBoxWidth},r.height=function(t){return arguments.length?(n=t,r):n},r.tickFormat=function(t){return arguments.length?(u=t,r):u},r.duration=function(t){return arguments.length?(a=t,r):a},d3.functor=function(t){return"function"==typeof t?t:function(){return t}},r.domain=function(t){return arguments.length?(s=null===t?t:d3.functor(t),r):s},r.value=function(t){return arguments.length?(i=t,r):i},r.whiskers=function(t){return arguments.length?(o=t,r):o},r.showLabels=function(t){return arguments.length?(c=t,r):c},r.quartiles=function(t){return arguments.length?(l=t,r):l},r}}();var BoxPlotModule=function(){function t(t,e,r,n,a,s,i,o){this.x=t,this.y=e,this.xAxis=r,this.yAxis=n,this.svg=a,this.chart=s,this.created=i,this.id=o}function e(e,l,c){var u=null,d=e.data,f=e.min,p=e.max,h=e.scatterData;if(o.forEach(function(t){t.id===l&&(u=t)}),null===u){var g=d3.scaleBand().rangeRound([0,s]).padding(.7,.3);u=new t(g,null,null,null,null,null,!1,l),o.push(u)}else d3.select(l+" svg").remove();u.y=d3.scaleLinear().domain([f,p]).nice().range([i+a.top,0+a.top]),u.chart=d3.box().whiskers(r(1.5)).height(i).domain(u.y.domain()).showLabels(n),u.svg=d3.select(l).append("svg").attr("width",s+a.left+a.right).attr("height",i+a.top+a.bottom).attr("class","box").append("g").attr("transform","translate("+a.left+","+a.top+")"),u.x.domain(d.map(function(t){return t[0]})),u.xAxis=d3.axisBottom(u.x),u.yAxis=d3.axisLeft(u.y),u.svg.selectAll(".box").data(d).enter().append("g").attr("transform",function(t){return"translate("+u.x(t[0])+","+a.top+")"}).call(u.chart.width(u.x.bandwidth())),u.svg.selectAll(".box").data(d).enter().append("g").attr("transform",function(t){return"translate("+u.x(t[0])+","+a.top+")"}).call(u.chart.width(u.x.bandwidth()));var x=d3.format(".2f"),y=d3.tip().attr("class","d3-tip").offset([-10,0]).html(function(t){return"<strong>Value:</strong> <span style='color:lightgreen'>"+x(t.value)+"</span><br><br><strong>EDB:</strong> <span style='color:lightgreen'>"+t.edb+"</span>"});u.svg.call(y),u.svg.selectAll(".dot").data(h).enter().append("circle").attr("class",function(t){return"dot "+t.edb.replace(/ /g,"")}).attr("r",4).attr("cx",function(t){return u.x(t.year)+whiskBoxWidth/2}).attr("cy",function(t){return u.y(t.value)}).on("mouseover",y.show).on("mouseout",y.hide),u.svg.append("g").attr("class","yAxis y axis").call(u.yAxis).append("text").attr("transform","rotate(-90)").attr("class","axis-text-scaled").style("text-anchor","end"),u.svg.append("g").attr("class","xAxis axis").attr("transform","translate(0,"+(i+a.top+10)+")").call(u.xAxis).append("text").attr("x",s/2).attr("y",10).attr("dy",".71em").style("text-anchor","middle").attr("class","axis-text-scaled"),u.svg.append("text").attr("text-anchor","middle").attr("transform","translate("+-(a.left/2-10)+","+i/2+")rotate(-90)").attr("class","unit-text-scaled").text(c),u.svg.append("text").attr("text-anchor","middle").attr("transform","translate("+ +(s/2)+","+(a.top+40+i)+")").attr("class","unit-text-scaled").text("Year"),u.created=!0}function r(t){return function(e,r){for(var n=e.quartiles[0],a=e.quartiles[2],s=(a-n)*t,r=-1,i=e.length;e[++r]<n-s;);for(;e[--i]>a+s;);return[r,i]}}var n=!1,a={top:30,right:50,bottom:100,left:100},s=1200-a.left-a.right,i=800-a.top-a.bottom,o=[];return{createBoxPlot:e}}();d3.functor=function(t){return"function"==typeof t?t:function(){return t}},d3.tip=function(){function t(t){b=p(t),A=b.createSVGPoint(),document.body.appendChild(m)}function e(){return"n"}function r(){return[0,0]}function n(){return" "}function a(){var t=g();return{top:t.n.y-m.offsetHeight,left:t.n.x-m.offsetWidth/2}}function s(){var t=g();return{top:t.s.y,left:t.s.x-m.offsetWidth/2}}function i(){var t=g();return{top:t.e.y-m.offsetHeight/2,left:t.e.x}}function o(){var t=g();return{top:t.w.y-m.offsetHeight/2,left:t.w.x-m.offsetWidth}}function l(){var t=g();return{top:t.nw.y-m.offsetHeight,left:t.nw.x-m.offsetWidth}}function c(){var t=g();return{top:t.ne.y-m.offsetHeight,left:t.ne.x}}function u(){var t=g();return{top:t.sw.y,left:t.sw.x-m.offsetWidth}}function d(){var t=g();return{top:t.se.y,left:t.e.x}}function f(){var t=d3.select(document.createElement("div"));return t.style("position","absolute").style("top",0).style("opacity",0).style("pointer-events","none").style("box-sizing","border-box"),t.node()}function p(t){return t=t.node(),"svg"===t.tagName.toLowerCase()?t:t.ownerSVGElement}function h(){return null===m&&(m=f(),document.body.appendChild(m)),d3.select(m)}function g(){for(var t=w||d3.event.target;"undefined"==typeof t.getScreenCTM&&"undefined"===t.parentNode;)t=t.parentNode;var e={},r=t.getScreenCTM(),n=t.getBBox(),a=n.width,s=n.height,i=n.x,o=n.y;return A.x=i,A.y=o,e.nw=A.matrixTransform(r),A.x+=a,e.ne=A.matrixTransform(r),A.y+=s,e.se=A.matrixTransform(r),A.x-=a,e.sw=A.matrixTransform(r),A.y-=s/2,e.w=A.matrixTransform(r),A.x+=a,e.e=A.matrixTransform(r),A.x-=a/2,A.y-=s/2,e.n=A.matrixTransform(r),A.y+=s,e.s=A.matrixTransform(r),e}var x=e,y=r,v=n,m=f(),b=null,A=null,w=null;t.show=function(){var e=Array.prototype.slice.call(arguments);e[e.length-1]instanceof SVGElement&&(w=e.pop());var r,n=v.apply(this,e),a=y.apply(this,e),s=x.apply(this,e),i=h(),o=k.length,l=document.documentElement.scrollTop||document.body.scrollTop,c=document.documentElement.scrollLeft||document.body.scrollLeft;for(i.html(n).style("position","absolute").style("opacity",1).style("pointer-events","all");o--;)i.classed(k[o],!1);return r=B[s].apply(this),i.classed(s,!0).style("top",r.top+a[0]+l+"px").style("left",r.left+a[1]+c+"px"),t},t.hide=function(){var e=h();return e.style("opacity",0).style("pointer-events","none"),t},t.attr=function(e,r){if(arguments.length<2&&"string"==typeof e)return h().attr(e);var n=Array.prototype.slice.call(arguments);return d3.selection.prototype.attr.apply(h(),n),t},t.style=function(e,r){if(arguments.length<2&&"string"==typeof e)return h().style(e);var n=Array.prototype.slice.call(arguments);if(1===n.length){var a=n[0];Object.keys(a).forEach(function(t){return d3.selection.prototype.style.apply(h(),[t,a[t]])})}return t},t.direction=function(e){return arguments.length?(x=null==e?e:d3.functor(e),t):x},t.offset=function(e){return arguments.length?(y=null==e?e:d3.functor(e),t):y},t.html=function(e){return arguments.length?(v=null==e?e:d3.functor(e),t):v},t.destroy=function(){return m&&(h().remove(),m=null),t};var B={n:a,s:s,e:i,w:o,nw:l,ne:c,sw:u,se:d},k=Object.keys(B);return t};var Database=function(){function t(t){$.get("/sections/sections",function(e){e.sections.length>0?t(e.sections,!1):t(sections,!0)})}function e(t,e){$.post("/sections/s",{selected:t},function(t){t.categories.length>0&&null!==t.categories[0]?e(t.categories,!1):e([],!0)})}function r(t,e,r){$.post("/sections/sc",{section:t,category:e},function(t){t.subCategories.length>0&&null!==t.subCategories[0]?r(t.subCategories,!1):r([],!0)})}function n(t,e,r,n){$.post("/sections/desc",{category:e,section:t,subCategory:r},function(t){t.descriptions.length>0&&null!==t.descriptions[0]?n(t.descriptions,!1):n(t.descriptions,!0)})}function a(t,e){$.post("/compare/search",{company:"",selections:JSON.stringify(t)},function(t){e(t.rows)})}return{getCategoriesFromDatabase:e,getSubCategoriesFromDatabase:r,getDescriptionsFromDatabase:n,getSectionsFromDatabase:t,getRowsForSearch:a}}(),events={events:{},on:function(t,e){this.events[t]=this.events[t]||[],this.events[t].push(e)},off:function(t,e){if(this.events[t])for(var r=0;r<this.events[t].length;r++)if(this.events[t][r]===e){this.events[t].splice(r,1);break}},emit:function(t,e){this.events[t]&&this.events[t].forEach(function(t){t(e)})}},VectorModule=function(){function t(t){this.id=t,this.created=!1,this.xAxis=d3.axisBottom(),this.yAxis=d3.axisLeft(),this.x=d3.scaleLinear().rangeRound([n,0]),this.y=d3.scaleLinear().rangeRound([a,0]),this.svg=null}function e(e,i,o,l){var c=null;s.forEach(function(t){t.id===l&&(c=t)}),null===c&&(c=new t(l),s.push(c));var u=[];e.forEach(function(t){u.push(t.edb)});var d=d3.scaleOrdinal().domain(u).range(["#e69a61","#9817ff","#18c61a","#33b4ff","#c9167e","#297853","#d7011b","#7456c7","#7e6276","#afb113","#fd879c","#fb78fa","#24c373","#45bbc5","#766b21","#abad93","#c19ce3","#fd8f11","#2f56ff","#307a11","#b3483c","#0d7396","#94b665","#9d4d91","#b807c8","#086cbf","#a2abc5","#a35702","#d3084b"]),f=[];e.forEach(function(t){t.years.forEach(function(e){e.edb=t.edb,f.push(e)})});var p=[];f.forEach(function(t){p.push(t.valueB)});var h=[];f.forEach(function(t){h.push(t.valueA)}),c.created||(c.svg=d3.select(l).append("svg").attr("width",n+r.left+r.right).attr("height",a+r.top+r.bottom).append("g").attr("transform","translate("+r.left+","+r.top+")"));var g=d3.max(p,function(t){return t}),v=d3.max(h,function(t){return t});c.x.domain([g,0]).nice(),c.y.domain([0,v]).nice(),c.created?(c.svg.select(".yAxis").call(c.yAxis),c.svg.select(".xAxis").call(c.xAxis)):(c.xAxis.scale(c.x),c.yAxis.scale(c.y)),c.svg.append("g").attr("class","xAxis").attr("transform","translate(0,"+a+")").call(c.xAxis.scale(c.x));var m=d3.format(".2f");c.svg.append("g").attr("class","yAxis").attr("fill","black").call(c.yAxis);var b=d3.tip().attr("class","d3-tip").offset([-10,0]).html(function(t){return"<strong>EDB:</strong> <span style='color:lightgreen'>"+t.edb+"</span><br><br><strong>Year:</strong> <span style='color:lightgreen'>"+t.year+"</span><br><br><strong>Value:</strong> <span style='color:lightgreen'>["+m(t.valueA)+", "+m(t.valueB)+"]</span>"});c.svg.call(b),c.created?c.svg.selectAll(".dotm").data(f).attr("class","dot").attr("r",3.5).attr("cx",function(t){return c.x(t.valueB)}).attr("cy",function(t){return c.y(t.valueA)}).attr("fill",function(t){return d(t.edb)}).on("mouseover",b.show).on("mouseout",b.hide):c.svg.selectAll(".dotm").data(f).enter().append("circle").attr("class","dotm").attr("r",3.5).attr("cx",function(t){return c.x(t.valueB)}).attr("cy",function(t){return c.y(t.valueA)}).attr("fill",function(t){return d(t.edb)}).on("mouseover",b.show).on("mouseout",b.hide);for(var A=[],w=0;w<e.length;w++)for(var B=0;B<e[w].years.length-1;B++)A.push({end:!0,edb:e[w].edb,x:e[w].years[B].valueB,y:e[w].years[B].valueA,x1:e[w].years[B+1].valueB,y1:e[w].years[B+1].valueA});c.created||c.svg.append("svg:defs").selectAll("marker").data(A).enter().append("svg:marker").attr("id",function(t){if(t.end)return"end"+t.edb.replace(/ /g,"")}).attr("viewBox","0 -5 10 10").attr("refX",9).attr("refY",-.5).attr("markerWidth",9).attr("markerHeight",9).attr("markerUnits","userSpaceOnUse").attr("orient","auto").append("svg:path").attr("d","M0,-5L10,0L0,5").style("fill",function(t){return d(t.edb)}),c.created?c.svg.selectAll(".line").data(A).attr("x1",function(t){return x(t.x)}).attr("y1",function(t){return y(t.y)}).attr("x2",function(t){return x(t.x1)}).attr("y2",function(t){return y(t.y1)}).attr("stroke-width",2).attr("class",function(t){return""+t.edb.replace(/ /g,"")}).attr("stroke",function(t){return d(t.edb)}).attr("marker-end",function(t){if(t.end)return"url(#end"+t.edb.replace(/ /g,"")+")"}):c.svg.selectAll(".line").data(A).enter().append("line").attr("x1",function(t){return c.x(t.x)}).attr("y1",function(t){return c.y(t.y)}).attr("x2",function(t){return c.x(t.x1)}).attr("y2",function(t){return c.y(t.y1)}).attr("stroke-width",2).attr("class",function(t){return""+t.edb.replace(/ /g,"")}).attr("stroke",function(t){return d(t.edb)}).attr("marker-end",function(t){if(t.end)return"url(#end"+t.edb.replace(/ /g,"")+")"});var k="",E="";if(l.includes("abcd")?(k="C / D",E="A / B"):l.includes("ab")?(k="B",E="A"):l.includes("cd")&&(k="D",E="C"),c.svg.append("text").attr("text-anchor","middle").attr("transform","translate("+-(r.left/2)+","+ +a/2+")rotate(-90)").attr("class","unit-text").text(E+"     ("+o+")"),c.svg.append("text").attr("text-anchor","middle").attr("transform","translate("+n/2+","+ +(a+r.bottom/4)+")").attr("class","unit-text").text(k+"     ("+i+")"),!c.created){var F=c.svg.append("g").attr("class","vector-key-text").attr("text-anchor","end").selectAll("g").data(u).enter().append("g").append("svg:a").attr("transform",function(t,e){var n=20*Math.floor(e/5),s=160*(e-5*Math.floor(e/5));return s+=r.left,"translate("+s+","+(n+a+r.bottom/3)+")"}).on("mouseover",function(t){c.svg.selectAll("line."+t.replace(/ /g,"")).classed("line-selected",!0)}).on("mouseout",function(t){c.svg.selectAll("line."+t.replace(/ /g,"")).classed("line-selected",!1)});F.append("circle").attr("cx",r.left+55).attr("cy",9.5).attr("r",7.5).attr("fill",d),F.append("text").attr("x",r.left+40).attr("y",9.5).attr("dy","0.32em").attr("class","g-text").style("font-size","14px").text(function(t){return t})}c.created=!0}var r={top:30,right:20,bottom:180,left:70},n=1e3-r.left-r.right,a=800-r.top-r.bottom,s=[];return{createVectorGraph:e}}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
