var SingleBarModule=function(){function t(t,e,n,a,s,i){var o=[];$(a).find("th").each(function(t,e){0!=t&&o.push({category:$(e).text(),value:0})}),$("#"+t).find("th").each(function(t,e){0!=t?o[t-1].value=$(e).text():title=o[t].value=$(e).text()});var l=-(1/0);$(".cell",s).each(function(){var t=+$(this).attr("origValue");l=t>l?t:l});var c=1/0;$(".cell",s).each(function(){var t=+$(this).attr("origValue");c=t<c?t:c}),r(n,l,c,o,e,i)}function e(t){this.id=t,this.x=d3.scaleBand().range([0,i]).padding(.5),this.y=d3.scaleLinear().range([o,0]).nice(),this.yAxis=d3.axisLeft(),this.xAxis=d3.axisBottom(),this.created=!1,this.svg=null}function r(t,e,r,s,i,o){var c=null;l.forEach(function(e){e.id===t&&(c=e)}),null===c?n(t,e,r,s,i,o):a(c,e,r,s,i)}function n(t,r,n,a,u,d){var f=new e(t),h=n<0&&r>0,p=0;!h&&n<0?p=n:h||(p=r),h&&(p=r),f.svg=d3.select(t).append("svg").attr("width",i+s.left+s.right).attr("height",o+s.top+s.bottom).append("g").attr("transform","translate("+s.left+","+s.top+")"),f.x.domain(a.map(function(t){return t.category})),f.y.domain([0,p]),f.y.nice(),f.yAxis.scale(f.y),f.svg.selectAll(".bar").data(a).enter().append("rect").attr("class","bar single-bar").attr("x",function(t){return f.x(t.category)}).attr("width",f.x.bandwidth()).attr("y",function(t){return f.y(h?Math.abs(t.value):t.value)}).attr("height",function(t){return o-f.y(h?Math.abs(t.value):t.value)}).attr("fill",function(t){return h?t.value>0?"lightgreen":c:"lightgreen"}),f.svg.append("g").attr("transform","translate(0,"+o+")").call(f.xAxis.scale(f.x)),f.svg.append("g").attr("class","yAxis").call(f.yAxis);var g=0;f.svg.select(".yAxis").selectAll("text").each(function(){this.getBBox().width>g&&(g=this.getBBox().width)}),f.svg.attr("transform","translate("+(s.left+g)+","+s.top+")"),f.svg.append("text").attr("x",i/2).attr("y",0-s.top/2).attr("id","bar-title").attr("text-anchor","middle").style("font-size","24px").text(u),f.svg.append("text").attr("text-anchor","middle").attr("transform","translate("+-(g+20)+","+o/2+")rotate(-90)").attr("class","unit-text-scaled").text(d),f.svg.append("text").attr("text-anchor","middle").attr("transform","translate("+ +(i/2)+","+(s.top+o-s.bottom+20)+")").attr("class","unit-text-scaled").text("Year"),f.created=!0,l.push(f)}function a(t,e,r,n,a){var s=r<0&&e>0;t.svg.selectAll(".bar").data(n).transition().duration(750).attr("y",function(e){return t.y(s?Math.abs(e.value):e.value)}).attr("height",function(e){return o-t.y(s?Math.abs(e.value):e.value)}).attr("fill",function(t){return s?t.value>0?"lightgreen":c:"lightgreen"}),t.svg.select("#bar-title").text(a)}var s={top:60,right:20,bottom:50,left:50},i=550-s.left-s.right,o=500-s.top-s.bottom,l=[],c="#FF2626";return{showBarWithRowElem:t,createBarGraph:r}}(),GroupedBarModule=function(){function t(t,e,r,n,a,s){this.x0=t,this.x1=e,this.y=r,this.yAxis=n,this.svg=a,this.id=s,this.created=!1,this.g=null}var e={top:25,right:50,bottom:150,left:50},r=1200-e.left-e.right,n=700-e.top-e.bottom,a=[],s=d3.scaleOrdinal().range(["#BBDEFB","#64B5F6","#1976D2","#1565C0","#0D47A1","#d0743c","#ff8c00"]),i=d3.scaleOrdinal().range(["#FF7373","#FF4C4C","#FF2626","#B20000","#D90000","#d0743c","#ff8c00"]),o=d3.scaleOrdinal().range(["#C1FFC1","#90EE90","#5BC85B","#31A231","#137B13","#d0743c","#ff8c00"]),l=function(t,e){d3.selectAll(".bar-selected").datum(function(t){return t}).attr("fill",function(t){return s(t.key)}),d3.selectAll(".bar-selected").classed("bar-selected",!1),e||d3.selectAll("rect."+t.replace(/ /g,"")).classed("bar-selected",!0).datum(function(t){return t}).attr("fill",function(t){return o(t.key)})},c=function(t,e,r,n){for(var s=0;s<a.length;s++)if(a[s].id===n)return void d(t,e,a[s],r);u(t,e,r,n)},u=function(o,l,c,u){var d=new t(d3.scaleBand().rangeRound([0,r]).paddingInner(.05),d3.scaleBand().padding(.05),d3.scaleLinear().rangeRound([n,0]),d3.axisLeft(),d3.axisBottom(),u);a.push(d),d.svg=d3.select(u).append("svg").attr("width",r+e.left+e.right).attr("height",n+e.top+e.bottom).append("g").attr("transform","translate("+e.left+","+e.top+")"),d.x0.domain(o.map(function(t){return t.edb})),d.x1.domain(l).rangeRound([0,d.x0.bandwidth()]),d.y.domain([0,d3.max(o,function(t){return d3.max(l,function(e){return Math.abs(t[e])})})]).nice();var f=d3.format(".2f"),h=d3.tip().attr("class","d3-tip").offset([-10,0]).html(function(t){return"<strong>Value:</strong> <span style='color:lightgreen'>"+f(t.value)+"</span><br><br><strong>Year:</strong> <span style='color:lightgreen'>"+t.key+"</span>"});d.svg.call(h),d.svg.append("g").selectAll("g").data(o).enter().append("g").attr("transform",function(t){return"translate("+d.x0(t.edb)+",0)"}).selectAll("rect").data(function(t){return l.map(function(e){return{neg:t[e]<0,key:e,edb:t.edb,value:Math.abs(t[e])}})}).enter().append("rect").attr("x",function(t){return d.x1(t.key)}).attr("y",function(t){return d.y(t.value)}).attr("width",d.x1.bandwidth()).attr("height",function(t){return n-d.y(t.value)}).attr("fill",function(t){return t.neg?i(t.key):s(t.key)}).attr("class",function(t){return" "+t.edb.replace(/ /g,"")}).on("mouseover",h.show).on("mouseout",h.hide),d.svg.append("g").attr("class","xAxis axis group-xAxis").attr("transform","translate(0,"+n+")").call(d3.axisBottom(d.x0)).selectAll("text").attr("y",0).attr("x",9).attr("dy",".40em").attr("class","axis-text-scaled").attr("transform","rotate(55)").style("text-anchor","start"),d.svg.append("g").attr("class","yAxis axis").call(d.yAxis.scale(d.y)).append("text").attr("x",2).attr("y",d.y(d.y.ticks().pop())+.5).attr("dy","0.40em").attr("class","axis-text-scaled").attr("text-anchor","start");var p=0;d.svg.select(".yAxis").selectAll("text").each(function(){this.getBBox().width>p&&(p=this.getBBox().width)}),d.svg.attr("transform","translate("+(e.left+p)+","+e.top+")"),d.svg.append("text").attr("text-anchor","middle").attr("transform","translate("+-(p+20)+","+n/2+")rotate(-90)").attr("class","unit-text-scaled").text(c);var g=d.svg.append("g").attr("font-family","sans-serif").attr("font-size",8).attr("text-anchor","end").selectAll("g").data(l.slice().reverse()).enter().append("g").attr("transform",function(t,e){return"translate(0,"+10*e+")"});g.append("rect").attr("x",r-100).attr("width",8.5).attr("height",8.5).attr("fill",s),g.append("text").attr("x",r-110).attr("y",4).attr("dy","0.32em").attr("class","g-text").style("font-size","8px").text(function(t){return t}),d.created=!0},d=function(t,e,a,o){a.y.domain([0,d3.max(t,function(t){return d3.max(e,function(e){return Math.abs(t[e])})})]).nice(),a.yAxis.scale(a.y),a.svg.select(".yAxis").remove(),a.svg.append("g").attr("class","yAxis axis").call(a.yAxis);var l=d3.format(".2f"),c=d3.tip().attr("class","d3-tip").offset([-10,0]).html(function(t){return"<strong>Value:</strong> <span style='color:lightgreen'>"+l(t.value)+"</span><br><br><strong>Year:</strong> <span style='color:lightgreen'>"+t.key+"</span>"});a.svg.call(c);a.svg.selectAll(".bar").remove();a.svg.append("g").selectAll("g").data(t).enter().append("g").attr("transform",function(t){return"translate("+a.x0(t.edb)+",0)"}).selectAll("rect").data(function(t){return e.map(function(e){return{neg:t[e]<0,key:e,edb:t.edb,value:Math.abs(t[e])}})}).enter().append("rect").attr("x",function(t){return a.x1(t.key)}).attr("y",function(t){return a.y(t.value)}).attr("class","bar").attr("width",a.x1.bandwidth()).attr("height",function(t){return n-a.y(t.value)}).attr("fill",function(t){return t.neg?i(t.key):s(t.key)}).attr("class",function(t){return""+t.edb.replace(/ /g,"")}).on("mouseover",c.show).on("mouseout",c.hide);var u=a.svg.append("g").attr("font-family","sans-serif").attr("font-size",8).attr("text-anchor","end").selectAll("g").data(e.slice().reverse()).enter().append("g").attr("transform",function(t,e){return"translate(0,"+10*e+")"});u.append("rect").attr("x",r-100).attr("width",8.5).attr("height",8.5).attr("fill",s)};return{highlight:l,createdGroupedBarGraph:c}}(),whiskBoxWidth=1;!function(){function t(t){return[0,t.length-1]}function e(t){return[d3.quantile(t,.25),d3.quantile(t,.5),d3.quantile(t,.75)]}d3.box=function(){function r(t){t.each(function(t,e){var r=t[1].sort(d3.ascending),i=d3.select(this),d=r.length,f=r[0],h=r[d-1],p=r.quartiles=l(r),g=o&&o.call(this,r,e),x=g&&g.map(function(t){return r[t]}),y=g?d3.range(0,g[0]).concat(d3.range(g[1]+1,d)):d3.range(d),v=d3.scaleLinear().domain(s&&s.call(this,r,e)||[f,h]).range([n,0]),m=this.__chart__||d3.scaleLinear().domain([0,1/0]).range(v.range());this.__chart__=v;var b=i.selectAll("line.center").data(x?[x]:[]);b.enter().insert("line","rect").attr("class","center").attr("x1",whiskBoxWidth/2).attr("y1",function(t){return m(t[0])}).attr("x2",whiskBoxWidth/2).attr("y2",function(t){return m(t[1])}).style("opacity",1e-6).transition().duration(a).style("opacity",1).attr("y1",function(t){return v(t[0])}).attr("y2",function(t){return v(t[1])}),b.transition().duration(a).style("opacity",1).attr("y1",function(t){return v(t[0])}).attr("y2",function(t){return v(t[1])}),b.exit().transition().duration(a).style("opacity",1e-6).attr("y1",function(t){return v(t[0])}).attr("y2",function(t){return v(t[1])}).remove();var A=i.selectAll("rect.box").data([p]);A.enter().append("rect").attr("class","box").attr("x",0).attr("y",function(t){return m(t[2])}).attr("width",whiskBoxWidth).attr("height",function(t){return m(t[0])-m(t[2])}).transition().duration(a).attr("y",function(t){return v(t[2])}).attr("height",function(t){return v(t[0])-v(t[2])}),A.transition().duration(a).attr("y",function(t){return v(t[2])}).attr("height",function(t){return v(t[0])-v(t[2])});var w=i.selectAll("line.median").data([p[1]]);w.enter().append("line").attr("class","median").attr("x1",0).attr("y1",m).attr("x2",whiskBoxWidth).attr("y2",m).transition().duration(a).attr("y1",v).attr("y2",v),w.transition().duration(a).attr("y1",v).attr("y2",v);var B=i.selectAll("line.whisker").data(x||[]);B.enter().insert("line","circle, text").attr("class","whisker").attr("x1",0).attr("y1",m).attr("x2",0+whiskBoxWidth).attr("y2",m).style("opacity",1e-6).transition().duration(a).attr("y1",v).attr("y2",v).style("opacity",1),B.transition().duration(a).attr("y1",v).attr("y2",v).style("opacity",1),B.exit().transition().duration(a).attr("y1",v).attr("y2",v).style("opacity",1e-6).remove();var k=i.selectAll("circle.outlier").data(y,Number);k.enter().insert("circle","text").attr("class","outlier").attr("r",2).attr("cx",whiskBoxWidth/2).attr("cy",function(t){return m(r[t])}).style("opacity",1e-6).transition().duration(a).attr("cy",function(t){return v(r[t])}).style("opacity",1),k.transition().duration(a).attr("cy",function(t){return v(r[t])}).style("opacity",1),k.exit().transition().duration(a).attr("cy",function(t){return v(r[t])}).style("opacity",1e-6).remove();var E=u||v.tickFormat(8),F=i.selectAll("text.box").data(p);1==c&&F.enter().append("text").attr("class","box").attr("dy",".3em").attr("dx",function(t,e){return 1&e?6:-6}).attr("x",function(t,e){return 1&e?+whiskBoxWidth:0}).attr("y",m).attr("text-anchor",function(t,e){return 1&e?"start":"end"}).text(E).transition().duration(a).attr("y",v),F.transition().duration(a).text(E).attr("y",v);var C=i.selectAll("text.whisker").data(x||[]);1==c&&C.enter().append("text").attr("class","whisker").attr("dy",".3em").attr("dx",6).attr("x",whiskBoxWidth).attr("y",m).text(E).style("opacity",1e-6).transition().duration(a).attr("y",v).style("opacity",1),C.transition().duration(a).text(E).attr("y",v).style("opacity",1),C.exit().transition().duration(a).attr("y",v).style("opacity",1e-6).remove()}),d3.timerFlush()}var n=1,a=0,s=null,i=Number,o=t,l=e,c=!0,u=null;return r.width=function(t){return arguments.length?(whiskBoxWidth=t,r):whiskBoxWidth},r.height=function(t){return arguments.length?(n=t,r):n},r.tickFormat=function(t){return arguments.length?(u=t,r):u},r.duration=function(t){return arguments.length?(a=t,r):a},d3.functor=function(t){return"function"==typeof t?t:function(){return t}},r.domain=function(t){return arguments.length?(s=null===t?t:d3.functor(t),r):s},r.value=function(t){return arguments.length?(i=t,r):i},r.whiskers=function(t){return arguments.length?(o=t,r):o},r.showLabels=function(t){return arguments.length?(c=t,r):c},r.quartiles=function(t){return arguments.length?(l=t,r):l},r}}();var BoxPlotModule=function(){function t(t,e,r,n,a,s,i,o){this.x=t,this.y=e,this.xAxis=r,this.yAxis=n,this.svg=a,this.chart=s,this.created=i,this.id=o}function e(e,l,c){var u=null,d=e.data,f=e.min,h=e.max,p=e.scatterData;if(o.forEach(function(t){t.id===l&&(u=t)}),null===u){var g=d3.scaleBand().rangeRound([0,s]).padding(.7,.3);u=new t(g,null,null,null,null,null,!1,l),o.push(u)}else d3.select(l+" svg").remove();u.y=d3.scaleLinear().domain([f,h]).nice().range([i+a.top,0+a.top]),u.chart=d3.box().whiskers(r(1.5)).height(i).domain(u.y.domain()).showLabels(n),u.svg=d3.select(l).append("svg").attr("width",s+a.left+a.right).attr("height",i+a.top+a.bottom).attr("class","box").append("g").attr("transform","translate("+a.left+","+a.top+")"),u.x.domain(d.map(function(t){return t[0]})),u.xAxis=d3.axisBottom(u.x),u.yAxis=d3.axisLeft(u.y),u.svg.selectAll(".box").data(d).enter().append("g").attr("transform",function(t){return"translate("+u.x(t[0])+","+a.top+")"}).call(u.chart.width(u.x.bandwidth())),u.svg.selectAll(".box").data(d).enter().append("g").attr("transform",function(t){return"translate("+u.x(t[0])+","+a.top+")"}).call(u.chart.width(u.x.bandwidth()));var x=d3.format(".2f"),y=d3.tip().attr("class","d3-tip").offset([-10,0]).html(function(t){return"<strong>Value:</strong> <span style='color:lightgreen'>"+x(t.value)+"</span><br><br><strong>EDB:</strong> <span style='color:lightgreen'>"+t.edb+"</span>"});u.svg.call(y),u.svg.selectAll(".dot").data(p).enter().append("circle").attr("class",function(t){return"dot "+t.edb.replace(/ /g,"")}).attr("r",4).attr("cx",function(t){return u.x(t.year)+whiskBoxWidth/2}).attr("cy",function(t){return u.y(t.value)}).on("mouseover",y.show).on("mouseout",y.hide),u.svg.append("g").attr("class","yAxis y axis").call(u.yAxis).append("text").attr("transform","rotate(-90)").attr("class","axis-text-scaled").style("text-anchor","end");var v=0;u.svg.select(".yAxis").selectAll("text").each(function(){this.getBBox().width>v&&(v=this.getBBox().width)}),u.svg.attr("transform","translate("+(a.left+v)+","+a.top+")"),u.svg.append("g").attr("class","xAxis axis").attr("transform","translate(0,"+(i+a.top+10)+")").call(u.xAxis).append("text").attr("class","axis-text-scaled").style("text-anchor","end"),u.svg.append("text").attr("text-anchor","middle").attr("transform","translate("+-(v+20)+","+i/2+")rotate(-90)").attr("class","unit-text-scaled").text(c),u.svg.append("text").attr("text-anchor","middle").attr("transform","translate("+ +(s/2)+","+(a.top+40+i)+")").attr("class","unit-text-scaled").text("Year"),u.created=!0}function r(t){return function(e,r){for(var n=e.quartiles[0],a=e.quartiles[2],s=(a-n)*t,r=-1,i=e.length;e[++r]<n-s;);for(;e[--i]>a+s;);return[r,i]}}var n=!1,a={top:30,right:50,bottom:100,left:50},s=1200-a.left-a.right,i=700-a.top-a.bottom,o=[];return{createBoxPlot:e}}();d3.functor=function(t){return"function"==typeof t?t:function(){return t}},d3.tip=function(){function t(t){b=h(t),A=b.createSVGPoint(),document.body.appendChild(m)}function e(){return"n"}function r(){return[0,0]}function n(){return" "}function a(){var t=g();return{top:t.n.y-m.offsetHeight,left:t.n.x-m.offsetWidth/2}}function s(){var t=g();return{top:t.s.y,left:t.s.x-m.offsetWidth/2}}function i(){var t=g();return{top:t.e.y-m.offsetHeight/2,left:t.e.x}}function o(){var t=g();return{top:t.w.y-m.offsetHeight/2,left:t.w.x-m.offsetWidth}}function l(){var t=g();return{top:t.nw.y-m.offsetHeight,left:t.nw.x-m.offsetWidth}}function c(){var t=g();return{top:t.ne.y-m.offsetHeight,left:t.ne.x}}function u(){var t=g();return{top:t.sw.y,left:t.sw.x-m.offsetWidth}}function d(){var t=g();return{top:t.se.y,left:t.e.x}}function f(){var t=d3.select(document.createElement("div"));return t.style("position","absolute").style("top",0).style("opacity",0).style("pointer-events","none").style("box-sizing","border-box"),t.node()}function h(t){return t=t.node(),"svg"===t.tagName.toLowerCase()?t:t.ownerSVGElement}function p(){return null===m&&(m=f(),document.body.appendChild(m)),d3.select(m)}function g(){for(var t=w||d3.event.target;"undefined"==typeof t.getScreenCTM&&"undefined"===t.parentNode;)t=t.parentNode;var e={},r=t.getScreenCTM(),n=t.getBBox(),a=n.width,s=n.height,i=n.x,o=n.y;return A.x=i,A.y=o,e.nw=A.matrixTransform(r),A.x+=a,e.ne=A.matrixTransform(r),A.y+=s,e.se=A.matrixTransform(r),A.x-=a,e.sw=A.matrixTransform(r),A.y-=s/2,e.w=A.matrixTransform(r),A.x+=a,e.e=A.matrixTransform(r),A.x-=a/2,A.y-=s/2,e.n=A.matrixTransform(r),A.y+=s,e.s=A.matrixTransform(r),e}var x=e,y=r,v=n,m=f(),b=null,A=null,w=null;t.show=function(){var e=Array.prototype.slice.call(arguments);e[e.length-1]instanceof SVGElement&&(w=e.pop());var r,n=v.apply(this,e),a=y.apply(this,e),s=x.apply(this,e),i=p(),o=k.length,l=document.documentElement.scrollTop||document.body.scrollTop,c=document.documentElement.scrollLeft||document.body.scrollLeft;for(i.html(n).style("position","absolute").style("opacity",1).style("pointer-events","all");o--;)i.classed(k[o],!1);return r=B[s].apply(this),i.classed(s,!0).style("top",r.top+a[0]+l+"px").style("left",r.left+a[1]+c+"px"),t},t.hide=function(){var e=p();return e.style("opacity",0).style("pointer-events","none"),t},t.attr=function(e,r){if(arguments.length<2&&"string"==typeof e)return p().attr(e);var n=Array.prototype.slice.call(arguments);return d3.selection.prototype.attr.apply(p(),n),t},t.style=function(e,r){if(arguments.length<2&&"string"==typeof e)return p().style(e);var n=Array.prototype.slice.call(arguments);if(1===n.length){var a=n[0];Object.keys(a).forEach(function(t){return d3.selection.prototype.style.apply(p(),[t,a[t]])})}return t},t.direction=function(e){return arguments.length?(x=null==e?e:d3.functor(e),t):x},t.offset=function(e){return arguments.length?(y=null==e?e:d3.functor(e),t):y},t.html=function(e){return arguments.length?(v=null==e?e:d3.functor(e),t):v},t.destroy=function(){return m&&(p().remove(),m=null),t};var B={n:a,s:s,e:i,w:o,nw:l,ne:c,sw:u,se:d},k=Object.keys(B);return t};var Database=function(){function t(t){$.get("/sections/sections",function(e){e.sections.length>0?t(e.sections,!1):t(sections,!0)})}function e(t,e){$.post("/sections/s",{selected:t},function(t){t.categories.length>0&&null!==t.categories[0]?e(t.categories,!1):e([],!0)})}function r(t,e,r){$.post("/sections/sc",{section:t,category:e},function(t){t.subCategories.length>0&&null!==t.subCategories[0]?r(t.subCategories,!1):r([],!0)})}function n(t,e,r,n){$.post("/sections/desc",{category:e,section:t,subCategory:r},function(t){t.descriptions.length>0&&null!==t.descriptions[0]?n(t.descriptions,!1):n(t.descriptions,!0)})}function a(t,e){$.post("/compare/search",{company:"",selections:JSON.stringify(t)},function(t){e(t.rows)})}return{getCategoriesFromDatabase:e,getSubCategoriesFromDatabase:r,getDescriptionsFromDatabase:n,getSectionsFromDatabase:t,getRowsForSearch:a}}(),events={events:{},on:function(t,e){this.events[t]=this.events[t]||[],this.events[t].push(e)},off:function(t,e){if(this.events[t])for(var r=0;r<this.events[t].length;r++)if(this.events[t][r]===e){this.events[t].splice(r,1);break}},emit:function(t,e){this.events[t]&&this.events[t].forEach(function(t){t(e)})}},VectorModule=function(){function t(t){this.id=t,this.created=!1,this.xAxis=d3.axisBottom(),this.yAxis=d3.axisLeft(),this.x=d3.scaleLinear().rangeRound([n,0]),this.y=d3.scaleLinear().rangeRound([a,0]),this.svg=null}function e(e,i,o,l){var c=null;s.forEach(function(t){t.id===l&&(c=t)}),null===c&&(c=new t(l),s.push(c));var u=[];e.forEach(function(t){u.push(t.edb)});var d=d3.scaleOrdinal().domain(u).range(["#e69a61","#9817ff","#18c61a","#33b4ff","#c9167e","#297853","#d7011b","#7456c7","#7e6276","#afb113","#fd879c","#fb78fa","#24c373","#45bbc5","#766b21","#abad93","#c19ce3","#fd8f11","#2f56ff","#307a11","#b3483c","#0d7396","#94b665","#9d4d91","#b807c8","#086cbf","#a2abc5","#a35702","#d3084b"]),f=[];e.forEach(function(t){t.years.forEach(function(e){e.edb=t.edb,f.push(e)})});var h=[];f.forEach(function(t){h.push(t.valueB)});var p=[];f.forEach(function(t){p.push(t.valueA)}),c.created||(c.svg=d3.select(l).append("svg").attr("width",n+r.left+r.right).attr("height",a+r.top+r.bottom).append("g").attr("transform","translate("+r.left+","+r.top+")"));var g=d3.max(h,function(t){return t}),v=d3.max(p,function(t){return t});c.x.domain([g,0]).nice(),c.y.domain([0,v]).nice(),c.created?(c.svg.select(".yAxis").call(c.yAxis),c.svg.select(".xAxis").call(c.xAxis)):(c.xAxis.scale(c.x),c.yAxis.scale(c.y)),c.svg.append("g").attr("class","xAxis").attr("transform","translate(0,"+a+")").call(c.xAxis.scale(c.x));var m=d3.format(".2f");c.svg.append("g").attr("class","yAxis").attr("fill","black").call(c.yAxis);var b=d3.tip().attr("class","d3-tip").offset([-10,0]).html(function(t){return"<strong>EDB:</strong> <span style='color:lightgreen'>"+t.edb+"</span><br><br><strong>Year:</strong> <span style='color:lightgreen'>"+t.year+"</span><br><br><strong>Value:</strong> <span style='color:lightgreen'>["+m(t.valueA)+", "+m(t.valueB)+"]</span>"});c.svg.call(b),c.created?c.svg.selectAll(".dotm").data(f).attr("class","dot").attr("r",3.5).attr("cx",function(t){return c.x(t.valueB)}).attr("cy",function(t){return c.y(t.valueA)}).attr("fill",function(t){return d(t.edb)}).on("mouseover",b.show).on("mouseout",b.hide):c.svg.selectAll(".dotm").data(f).enter().append("circle").attr("class","dotm").attr("r",3.5).attr("cx",function(t){return c.x(t.valueB)}).attr("cy",function(t){return c.y(t.valueA)}).attr("fill",function(t){return d(t.edb)}).on("mouseover",b.show).on("mouseout",b.hide);for(var A=[],w=0;w<e.length;w++)for(var B=0;B<e[w].years.length-1;B++)A.push({end:!0,edb:e[w].edb,x:e[w].years[B].valueB,y:e[w].years[B].valueA,x1:e[w].years[B+1].valueB,y1:e[w].years[B+1].valueA});c.created||c.svg.append("svg:defs").selectAll("marker").data(A).enter().append("svg:marker").attr("id",function(t){if(t.end)return"end"+t.edb.replace(/ /g,"")}).attr("viewBox","0 -5 10 10").attr("refX",9).attr("refY",-.5).attr("markerWidth",9).attr("markerHeight",9).attr("markerUnits","userSpaceOnUse").attr("orient","auto").append("svg:path").attr("d","M0,-5L10,0L0,5").style("fill",function(t){return d(t.edb)}),c.created?c.svg.selectAll(".line").data(A).attr("x1",function(t){return x(t.x)}).attr("y1",function(t){return y(t.y)}).attr("x2",function(t){return x(t.x1)}).attr("y2",function(t){return y(t.y1)}).attr("stroke-width",2).attr("class",function(t){return""+t.edb.replace(/ /g,"")}).attr("stroke",function(t){return d(t.edb)}).attr("marker-end",function(t){if(t.end)return"url(#end"+t.edb.replace(/ /g,"")+")"}):c.svg.selectAll(".line").data(A).enter().append("line").attr("x1",function(t){return c.x(t.x)}).attr("y1",function(t){return c.y(t.y)}).attr("x2",function(t){return c.x(t.x1)}).attr("y2",function(t){return c.y(t.y1)}).attr("stroke-width",2).attr("class",function(t){return""+t.edb.replace(/ /g,"")}).attr("stroke",function(t){return d(t.edb)}).attr("marker-end",function(t){if(t.end)return"url(#end"+t.edb.replace(/ /g,"")+")"});var k="",E="";if(l.includes("abcd")?(k="C / D",E="A / B"):l.includes("ab")?(k="B",E="A"):l.includes("cd")&&(k="D",E="C"),c.svg.append("text").attr("text-anchor","middle").attr("transform","translate("+-(r.left/2)+","+ +a/2+")rotate(-90)").attr("class","unit-text-scaled").text(E+"     ("+o+")"),c.svg.append("text").attr("text-anchor","middle").attr("transform","translate("+n/2+","+ +(a+r.bottom/4)+")").attr("class","unit-text-scaled").text(k+"     ("+i+")"),!c.created){var F=c.svg.append("g").attr("class","vector-key-text").attr("text-anchor","end").selectAll("g").data(u).enter().append("g").append("svg:a").attr("transform",function(t,e){var n=20*Math.floor(e/5),s=160*(e-5*Math.floor(e/5));return s+=r.left,"translate("+s+","+(n+a+r.bottom/3)+")"}).on("mouseover",function(t){c.svg.selectAll("line."+t.replace(/ /g,"")).classed("line-selected",!0)}).on("mouseout",function(t){c.svg.selectAll("line."+t.replace(/ /g,"")).classed("line-selected",!1)});F.append("circle").attr("cx",r.left+55).attr("cy",9.5).attr("r",7.5).attr("fill",d),F.append("text").attr("x",r.left+40).attr("y",9.5).attr("dy","0.32em").attr("class","g-text").style("font-size","14px").text(function(t){return t})}c.created=!0}var r={top:30,right:20,bottom:180,left:70},n=1e3-r.left-r.right,a=800-r.top-r.bottom,s=[];return{createVectorGraph:e}}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImJhci5qcyIsImJhckdyb3VwLmpzIiwiYm94LmpzIiwiYm94UGxvdC5qcyIsImQzLXRpcC5qcyIsIkRhdGFiYXNlLmpzIiwiRXZlbnRzLmpzIiwidmVjdG9yR3JhcGguanMiXSwibmFtZXMiOlsiU2luZ2xlQmFyTW9kdWxlIiwic2hvd0JhcldpdGhSb3dFbGVtIiwicm93SUQiLCJlZGIiLCJkaXYiLCJoZWFkUm93IiwidGFibGVJRCIsInVuaXQiLCJkYXRhIiwiJCIsImZpbmQiLCJlYWNoIiwiaW5kZXgiLCJlbGVtZW50IiwicHVzaCIsImNhdGVnb3J5IiwidGV4dCIsInZhbHVlIiwidGl0bGUiLCJtYXgiLCJJbmZpbml0eSIsInZhbCIsInRoaXMiLCJhdHRyIiwibWluIiwiY3JlYXRlQmFyR3JhcGgiLCJCYXJHcmFwaCIsImlkIiwieCIsImQzIiwic2NhbGVCYW5kIiwicmFuZ2UiLCJiYXJXaWR0aCIsInBhZGRpbmciLCJ5Iiwic2NhbGVMaW5lYXIiLCJiYXJIZWlnaHQiLCJuaWNlIiwieUF4aXMiLCJheGlzTGVmdCIsInhBeGlzIiwiYXhpc0JvdHRvbSIsImNyZWF0ZWQiLCJzdmciLCJkaXZJRCIsInRhYmxlTWF4IiwidGFibGVNaW4iLCJ5TGFiZWwiLCJiYXJHcmFwaCIsInNpbmdsZWJhckdyYXBocyIsImZvckVhY2giLCJiYXJFbGVtIiwiY3JlYXRlTmV3R3JhcGgiLCJ1cGRhdGVHcmFwaCIsIm1peGVkIiwic2VsZWN0IiwiYXBwZW5kIiwiYmFyTWFyZ2luIiwibGVmdCIsInJpZ2h0IiwidG9wIiwiYm90dG9tIiwiZG9tYWluIiwibWFwIiwiZCIsInNjYWxlIiwic2VsZWN0QWxsIiwiZW50ZXIiLCJiYW5kd2lkdGgiLCJNYXRoIiwiYWJzIiwicmVkIiwiY2FsbCIsIm1heHciLCJnZXRCQm94Iiwid2lkdGgiLCJzdHlsZSIsInRyYW5zaXRpb24iLCJkdXJhdGlvbiIsIkdyb3VwZWRCYXJNb2R1bGUiLCJHcm91cGVkQmFyRGF0YSIsIngwIiwieDEiLCJnIiwibWFyZ2luIiwiaGVpZ2h0IiwiYmFyR3JhcGhzIiwieiIsInNjYWxlT3JkaW5hbCIsInpSZWQiLCJ6U2VsZWN0ZWQiLCJoaWdobGlnaHQiLCJhbHJlYWR5U2VsZWN0ZWQiLCJkYXR1bSIsImtleSIsImNsYXNzZWQiLCJyZXBsYWNlIiwiY3JlYXRlZEdyb3VwZWRCYXJHcmFwaCIsImtleXMiLCJpIiwibGVuZ3RoIiwidXBkYXRlRXhpc3RpbmdHcmFwaCIsImNyZWF0ZU5ld0dyb3VwZWRCYXJHcmFwaCIsImN1ckJhckdyYXBoIiwicmFuZ2VSb3VuZCIsInBhZGRpbmdJbm5lciIsImRwRm9ybWF0IiwiZm9ybWF0IiwidGlwIiwib2Zmc2V0IiwiaHRtbCIsIm5lZyIsIm9uIiwic2hvdyIsImhpZGUiLCJ0aWNrcyIsInBvcCIsImxlZ2VuZCIsInNsaWNlIiwicmV2ZXJzZSIsInJlbW92ZSIsIndoaXNrQm94V2lkdGgiLCJib3hXaGlza2VycyIsImJveFF1YXJ0aWxlcyIsInF1YW50aWxlIiwiYm94Iiwic29ydCIsImFzY2VuZGluZyIsIm4iLCJxdWFydGlsZURhdGEiLCJxdWFydGlsZXMiLCJ3aGlza2VySW5kaWNlcyIsIndoaXNrZXJzIiwid2hpc2tlckRhdGEiLCJvdXRsaWVySW5kaWNlcyIsImNvbmNhdCIsIl9fY2hhcnRfXyIsImNlbnRlciIsImluc2VydCIsImV4aXQiLCJtZWRpYW5MaW5lIiwid2hpc2tlciIsIm91dGxpZXIiLCJOdW1iZXIiLCJ0aWNrRm9ybWF0IiwiYm94VGljayIsInNob3dMYWJlbHMiLCJ3aGlza2VyVGljayIsInRpbWVyRmx1c2giLCJhcmd1bWVudHMiLCJmdW5jdG9yIiwidiIsIkJveFBsb3RNb2R1bGUiLCJCb3hQbG90RGF0YSIsImNoYXJ0IiwiY3JlYXRlQm94UGxvdCIsImRhdGFPYmplY3QiLCJib3hQbG90T2JqZWN0cyIsInNjYXR0ZXJEYXRhIiwicGxvdHMiLCJwbG90IiwiYm94V2lkdGgiLCJib3hIZWlnaHQiLCJib3hNYXJnaW4iLCJpcXIiLCJsYWJlbHMiLCJ5ZWFyIiwiayIsInExIiwicTMiLCJqIiwidmlzIiwiZ2V0U1ZHTm9kZSIsInBvaW50IiwiY3JlYXRlU1ZHUG9pbnQiLCJkb2N1bWVudCIsImJvZHkiLCJhcHBlbmRDaGlsZCIsIm5vZGUiLCJkM190aXBfZGlyZWN0aW9uIiwiZDNfdGlwX29mZnNldCIsImQzX3RpcF9odG1sIiwiZGlyZWN0aW9uX24iLCJiYm94IiwiZ2V0U2NyZWVuQkJveCIsIm9mZnNldEhlaWdodCIsIm9mZnNldFdpZHRoIiwiZGlyZWN0aW9uX3MiLCJzIiwiZGlyZWN0aW9uX2UiLCJlIiwiZGlyZWN0aW9uX3ciLCJ3IiwiZGlyZWN0aW9uX253IiwibnciLCJkaXJlY3Rpb25fbmUiLCJuZSIsImRpcmVjdGlvbl9zdyIsInN3IiwiZGlyZWN0aW9uX3NlIiwic2UiLCJpbml0Tm9kZSIsImNyZWF0ZUVsZW1lbnQiLCJlbCIsInRhZ05hbWUiLCJ0b0xvd2VyQ2FzZSIsIm93bmVyU1ZHRWxlbWVudCIsImdldE5vZGVFbCIsInRhcmdldGVsIiwidGFyZ2V0IiwiZXZlbnQiLCJnZXRTY3JlZW5DVE0iLCJwYXJlbnROb2RlIiwibWF0cml4IiwidGJib3giLCJtYXRyaXhUcmFuc2Zvcm0iLCJkaXJlY3Rpb24iLCJhcmdzIiwiQXJyYXkiLCJwcm90b3R5cGUiLCJTVkdFbGVtZW50IiwiY29vcmRzIiwiY29udGVudCIsImFwcGx5IiwicG9mZnNldCIsImRpciIsIm5vZGVsIiwiZGlyZWN0aW9ucyIsInNjcm9sbFRvcCIsImRvY3VtZW50RWxlbWVudCIsInNjcm9sbExlZnQiLCJkaXJlY3Rpb25fY2FsbGJhY2tzIiwic2VsZWN0aW9uIiwic3R5bGVzIiwiT2JqZWN0IiwiZGVzdHJveSIsIkRhdGFiYXNlIiwiZ2V0U2VjdGlvbnNGcm9tRGF0YWJhc2UiLCJjYWxsYmFjayIsImdldCIsInNlY3Rpb25zIiwiZ2V0Q2F0ZWdvcmllc0Zyb21EYXRhYmFzZSIsInNlY3Rpb24iLCJwb3N0Iiwic2VsZWN0ZWQiLCJjYXRlZ29yaWVzIiwiZ2V0U3ViQ2F0ZWdvcmllc0Zyb21EYXRhYmFzZSIsInN1YkNhdGVnb3JpZXMiLCJnZXREZXNjcmlwdGlvbnNGcm9tRGF0YWJhc2UiLCJzdWJDYXRlZ29yeSIsImRlc2NyaXB0aW9ucyIsImdldFJvd3NGb3JTZWFyY2giLCJzZWxlY3Rpb25zIiwiY29tcGFueSIsIkpTT04iLCJzdHJpbmdpZnkiLCJyb3dzIiwiZXZlbnRzIiwiZXZlbnROYW1lIiwiZm4iLCJvZmYiLCJzcGxpY2UiLCJlbWl0IiwiVmVjdG9yTW9kdWxlIiwiVmVjdG9yR3JhcGhEYXRhIiwidldpZHRoIiwidkhlaWdodCIsImNyZWF0ZVZlY3RvckdyYXBoIiwieExhYmVsIiwidmVjdG9yR3JhcGgiLCJ2ZWN0b3JHcmFwaHMiLCJlbGVtIiwiZWRicyIsImNvbG9yIiwiYWxsVmFsdWVzIiwieWVhcnMiLCJlMSIsInhWYWx1ZXMiLCJ2YWx1ZUIiLCJ5VmFsdWVzIiwidmFsdWVBIiwidk1hcmdpbiIsIm1heFgiLCJtYXhZIiwibGluZXMiLCJlbmQiLCJ5MSIsInhNZXRyaWNMYWJlbCIsInlNZXRyaWNMYWJlbCIsImluY2x1ZGVzIiwiZmxvb3IiXSwibWFwcGluZ3MiOiJBQUlBLEdBQUFBLGlCQUFBLFdBUUEsUUFBQUMsR0FBQUMsRUFBQUMsRUFBQUMsRUFBQUMsRUFBQUMsRUFBQUMsR0FDQSxHQUFBQyxLQUVBQyxHQUFBSixHQUFBSyxLQUFBLE1BQUFDLEtBQUEsU0FBQUMsRUFBQUMsR0FDQSxHQUFBRCxHQUNBSixFQUFBTSxNQUFBQyxTQUFBTixFQUFBSSxHQUFBRyxPQUFBQyxNQUFBLE1BS0FSLEVBQUEsSUFBQVAsR0FBQVEsS0FBQSxNQUFBQyxLQUFBLFNBQUFDLEVBQUFDLEdBQ0EsR0FBQUQsRUFDQUosRUFBQUksRUFBQSxHQUFBSyxNQUFBUixFQUFBSSxHQUFBRyxPQUVBRSxNQUFBVixFQUFBSSxHQUFBSyxNQUFBUixFQUFBSSxHQUFBRyxRQUlBLElBQUFHLEtBQUFDLEVBQUFBLEVBQ0FYLEdBQUEsUUFBQUgsR0FBQUssS0FBQSxXQUNBLEdBQUFVLElBQUFa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S0FFQUEsS0FBQSxPQUFBMFAsR0FFQTVKLEVBQUE3RCxPQUFBLFFBQ0FqQyxLQUFBLElBQUFrUSxFQUFBL04sS0FBQSxJQUNBbkMsS0FBQSxJQUFBLEtBQ0FBLEtBQUEsS0FBQSxVQUNBQSxLQUFBLFFBQUEsVUFDQXFELE1BQUEsWUFBQSxRQUNBNUQsS0FBQSxTQUFBZ0QsR0FBQSxNQUFBQSxLQUVBNk0sRUFBQW5PLFNBQUEsRUE3UEEsR0FBQStPLElBQUE3TixJQUFBLEdBQUFELE1BQUEsR0FBQUUsT0FBQSxJQUFBSCxLQUFBLElBQ0ErTSxFQUFBLElBQUFnQixFQUFBL04sS0FBQStOLEVBQUE5TixNQUNBK00sRUFBQSxJQUFBZSxFQUFBN04sSUFBQTZOLEVBQUE1TixPQUdBaU4sSUEyUEEsUUFDQUgsa0JBQUFBIiwiZmlsZSI6InNjcmlwdHMubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIENyZWF0ZWQgYnkgTmlja3kgb24gMTIvMDEvMjAxNy5cclxuICovXHJcblxyXG52YXIgU2luZ2xlQmFyTW9kdWxlID0gKGZ1bmN0aW9uKCl7XHJcbiAgLyoqXHJcbiAgICogU2hvd3MgdGhlIGJhciBncmFwaCBvbiB0aGUgc2NyZWVuXHJcbiAgICpcclxuICAgKiBAcGFyYW0gcm93SUQge1N0cmluZ30gdGhlIGlkIG9mIHRoZSByb3cgdG8gc2hvdyB3aXRoIHRoZSBkYXRhIGZvciB0aGUgYmFyIGdyYXBoXHJcbiAgICogQHBhcmFtIGVkYiB7U3RyaW5nfSB0aGUgZWRiIG9mIHRoZSByb3dcclxuICAgKiBAcGFyYW0gZGl2IHtTdHJpbmd9IHRoZSBpZCBvZiB0aGUgZGl2IHRvIHB1dCB0aGUgYmFyIGdyYXBoIGluXHJcbiAgICogKi9cclxuICBmdW5jdGlvbiBzaG93QmFyV2l0aFJvd0VsZW0ocm93SUQsIGVkYiwgZGl2LCBoZWFkUm93LCB0YWJsZUlELHVuaXQpe1xyXG4gICAgdmFyIGRhdGEgPSBbXTtcclxuXHJcbiAgICAkKGhlYWRSb3cpLmZpbmQoJ3RoJykuZWFjaChmdW5jdGlvbiAoaW5kZXgsIGVsZW1lbnQpIHtcclxuICAgICAgaWYoaW5kZXggIT0gMCl7IC8vIDAgaXMgbm90IGEgeWVhclxyXG4gICAgICAgIGRhdGEucHVzaCh7Y2F0ZWdvcnkgOiAkKGVsZW1lbnQpLnRleHQoKSwgdmFsdWUgOiAwfSk7IC8vIDAgaXMgdGVtcFxyXG4gICAgICB9XHJcbiAgICB9KTtcclxuXHJcblxyXG4gICAgJCgnIycrcm93SUQpLmZpbmQoJ3RoJykuZWFjaChmdW5jdGlvbiAoaW5kZXgsIGVsZW1lbnQpIHtcclxuICAgICAgaWYoaW5kZXggIT0gMCl7XHJcbiAgICAgICAgZGF0YVtpbmRleC0xXS52YWx1ZSA9ICQoZWxlbWVudCkudGV4dCgpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHRpdGxlID0gZGF0YVtpbmRleF0udmFsdWUgPSAkKGVsZW1lbnQpLnRleHQoKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgdmFyIG1heCA9IC1JbmZpbml0eTtcclxuICAgICQoJy5jZWxsJywgdGFibGVJRCkuZWFjaChmdW5jdGlvbigpeyAvL2NlbGwgb3IgdGhcclxuICAgICAgdmFyIHZhbCA9ICskKHRoaXMpLmF0dHIoXCJvcmlnVmFsdWVcIik7XHJcbiAgICAgIG1heCA9IHZhbCA+IG1heCA/IHZhbCA6IG1heDtcclxuICAgIH0pO1xyXG5cclxuICAgIHZhciBtaW4gPSBJbmZpbml0eTtcclxuICAgICQoJy5jZWxsJywgdGFibGVJRCkuZWFjaChmdW5jdGlvbigpeyAvL2NlbGwgb3IgdGhcclxuICAgICAgdmFyIHZhbCA9ICskKHRoaXMpLmF0dHIoXCJvcmlnVmFsdWVcIik7XHJcbiAgICAgIG1pbiA9IHZhbCA8IG1pbiA/IHZhbCA6IG1pbjtcclxuICAgIH0pO1xyXG4gICAgY3JlYXRlQmFyR3JhcGgoZGl2LCBtYXgsbWluLCBkYXRhLCBlZGIsdW5pdCk7XHJcbiAgfVxyXG5cclxuXHJcbiAgLy8gU3BlY2lmaWVzIHRoZSBiYXJNYXJnaW5zIGFuZCBiYXJXaWR0aC9iYXJIZWlnaHQgb2YgdGhlIHN2Z1xyXG4gIHZhciBiYXJNYXJnaW4gPSB7IHRvcDogNjAsIHJpZ2h0OiAyMCwgYm90dG9tOiA1MCwgbGVmdDogNTAgfSxcclxuICAgIGJhcldpZHRoID0gNTUwIC0gYmFyTWFyZ2luLmxlZnQgLSBiYXJNYXJnaW4ucmlnaHQsXHJcbiAgICBiYXJIZWlnaHQgPSA1MDAgLSBiYXJNYXJnaW4udG9wIC0gYmFyTWFyZ2luLmJvdHRvbTtcclxuXHJcblxyXG4gIHZhciBzaW5nbGViYXJHcmFwaHMgPSBbXTtcclxuXHJcbiAgZnVuY3Rpb24gQmFyR3JhcGgoaWQpe1xyXG4gICAgdGhpcy5pZCA9IGlkO1xyXG4gICAgdGhpcy54ID0gZDMuc2NhbGVCYW5kKCkucmFuZ2UoWzAsIGJhcldpZHRoXSkucGFkZGluZygwLjUpO1xyXG4gICAgdGhpcy55ID0gZDMuc2NhbGVMaW5lYXIoKS5yYW5nZShbYmFySGVpZ2h0LCAwXSkubmljZSgpO1xyXG4gICAgdGhpcy55QXhpcyA9IGQzLmF4aXNMZWZ0KCk7XHJcbiAgICB0aGlzLnhBeGlzID0gZDMuYXhpc0JvdHRvbSgpO1xyXG4gICAgdGhpcy5jcmVhdGVkID0gZmFsc2U7XHJcbiAgICB0aGlzLnN2ZyA9IG51bGw7XHJcbiAgfVxyXG5cclxuICB2YXIgcmVkID0gJyNGRjI2MjYnXHJcblxyXG4vLyBJZiB0aGUgYmFyZ3JhcGggZG9lcyBub3QgZXhpc3RzIGNyZWF0ZXMgYSBuZXcgb25lIGFuZCBwbGFjZXMgaXQgaW4gdGhlIGRpdiBlbHNlIHVwZGF0ZXMgYWxyZWFkeSBleGlzdGluZyBncmFwaFxyXG4gIGZ1bmN0aW9uIGNyZWF0ZUJhckdyYXBoKGRpdklELCB0YWJsZU1heCx0YWJsZU1pbiwgZGF0YSwgZWRiLCB5TGFiZWwpe1xyXG4gICAgdmFyIGJhckdyYXBoID0gbnVsbDtcclxuICAgIHNpbmdsZWJhckdyYXBocy5mb3JFYWNoKGZ1bmN0aW9uKGJhckVsZW0pe1xyXG4gICAgICBpZihiYXJFbGVtLmlkID09PSBkaXZJRCl7XHJcbiAgICAgICAgYmFyR3JhcGggPSBiYXJFbGVtO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICBpZihiYXJHcmFwaCA9PT0gbnVsbCl7XHJcbiAgICAgIGNyZWF0ZU5ld0dyYXBoKGRpdklELCB0YWJsZU1heCwgdGFibGVNaW4sIGRhdGEsZWRiLCB5TGFiZWwpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdXBkYXRlR3JhcGgoYmFyR3JhcGgsdGFibGVNYXgsdGFibGVNaW4sZGF0YSxlZGIpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gY3JlYXRlTmV3R3JhcGgoZGl2SUQsIHRhYmxlTWF4LHRhYmxlTWluLCBkYXRhLGVkYiwgeUxhYmVsKXtcclxuICAgIHZhciBiYXJHcmFwaCA9IG5ldyBCYXJHcmFwaChkaXZJRCk7XHJcblxyXG4gICAgdmFyIG1peGVkID0gKHRhYmxlTWluIDwgMCAmJiB0YWJsZU1heCA+IDApO1xyXG4gICAgdmFyIG1heCA9IDA7XHJcbiAgICBpZighbWl4ZWQgJiYgdGFibGVNaW4gPCAwKXtcclxuICAgICAgbWF4ID0gdGFibGVNaW47IC8vIFRoZSB0b3Agb2YgdGhlIGdyYXBoIHNob3VsZCBiZSB0aGUgbGVhc3QgbnVtYmVyXHJcbiAgICB9IGVsc2UgaWYoIW1peGVkKSB7XHJcbiAgICAgIG1heCA9IHRhYmxlTWF4O1xyXG4gICAgfVxyXG5cclxuICAgIGlmKG1peGVkKXtcclxuICAgICAgbWF4ID0gdGFibGVNYXg7XHJcbiAgICB9XHJcblxyXG4gICAgYmFyR3JhcGguc3ZnID0gZDMuc2VsZWN0KGRpdklEKS5hcHBlbmQoXCJzdmdcIikvLyBDcmVhdGUgYW5kIGFkZCB0aGUgc3ZnXHJcbiAgICAgIC5hdHRyKFwid2lkdGhcIiwgYmFyV2lkdGggKyBiYXJNYXJnaW4ubGVmdCArIGJhck1hcmdpbi5yaWdodClcclxuICAgICAgLmF0dHIoXCJoZWlnaHRcIiwgYmFySGVpZ2h0ICsgYmFyTWFyZ2luLnRvcCArIGJhck1hcmdpbi5ib3R0b20pXHJcbiAgICAgIC5hcHBlbmQoXCJnXCIpIC8vIGdyb3VwIGFsbG93cyB1cyB0byBtb3ZlIGV2ZXJ5dGhpbmcgdG9nZXRoZXJcclxuICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIixcclxuICAgICAgICBcInRyYW5zbGF0ZShcIiArIGJhck1hcmdpbi5sZWZ0ICsgXCIsXCIgKyBiYXJNYXJnaW4udG9wICsgXCIpXCIpOyAvLyBtb3ZlcyBieSBhIHggYW5kIHkgdmFsdWUgaW4gdGhpcyBjYXNlIHRoZSBiYXJNYXJnaW5zXHJcblxyXG4gICAgLy8gR29lcyB0aHJvdWdoIGV2ZXJ5IGVsZW1lbnQgaW4gdGhlIGFycmF5IGFuZCBncmFicyB0aGUgY2F0ZWdvcnkgKDIwMTEsMjAxMiwyMDEzIGV0YylcclxuICAgIGJhckdyYXBoLnguZG9tYWluKGRhdGEubWFwKGZ1bmN0aW9uKGQpIHsgcmV0dXJuIGQuY2F0ZWdvcnk7IH0pKTsvLyBUaGUgZG9tYWluIHJlcHJlc2VudHMgdGhlIG1pbiBhbmQgbWF4IHZhbHVlcyBvZiB0aGUgZGF0YSBnb2VzIHRocm91Z2ggYWxsIHZhbHVlcyBhbmQgZmluZHMgbWF4XHJcbiAgICBiYXJHcmFwaC55LmRvbWFpbihbMCwgbWF4XSk7IC8vIG9iamVjdCBzaG91bGQgY29udGFpbiBhIHZhbHVlXHJcbiAgICBiYXJHcmFwaC55Lm5pY2UoKTsgLy8gUm91bmRzIHVwIHRvIHRoZSBuZWFyZXN0IHdob2xlIG51bWJlclxyXG4gICAgYmFyR3JhcGgueUF4aXMuc2NhbGUoYmFyR3JhcGgueSk7XHJcblxyXG4gICAgLy8gTmV4dCBzdGVwIGlzIHRvIGNyZWF0ZSB0aGUgcmVjdGFuZ2xlcyBhbmQgYWRkIHRvIHRoZSBzdmdcclxuICAgIGJhckdyYXBoLnN2Zy5zZWxlY3RBbGwoXCIuYmFyXCIpIC8vIE5vbmUgZXhpc3QgeWV0IGJ1dCB3aWxsIGJlIGNyZWF0ZWQgd2l0aCBlbnRlclxyXG4gICAgICAuZGF0YShkYXRhKSAvLyBlbnRlciB0aGUgZGF0YSBhcnJheVxyXG4gICAgICAuZW50ZXIoKVxyXG4gICAgICAuYXBwZW5kKFwicmVjdFwiKSAvLyBjcmVhdGUgdGhlIHJlY3RhbmdsZXNcclxuICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcImJhciBzaW5nbGUtYmFyXCIpIC8vIGFkZCB0aGUgY2xhc3MgYXR0cmlidXRlXHJcbiAgICAgIC5hdHRyKFwieFwiLCBmdW5jdGlvbihkKSB7IHJldHVybiBiYXJHcmFwaC54KGQuY2F0ZWdvcnkpOyB9KSAvLyBzZXQgdGhlIHggdmFsdWVcclxuICAgICAgLmF0dHIoXCJ3aWR0aFwiLCBiYXJHcmFwaC54LmJhbmR3aWR0aCgpKSAvLyBzZXQgdGhlIGJhcldpZHRoIG9mIHRoZSBiYXJcclxuICAgICAgLmF0dHIoXCJ5XCIsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIGJhckdyYXBoLnkobWl4ZWQgPyAgTWF0aC5hYnMoZC52YWx1ZSkgOiBkLnZhbHVlKTsgfSkgLy8gc2V0IHRoZSB5IHZhbHVlIGFjY29yZGluZyB0byB0aGUgdmFsdWVcclxuICAgICAgLmF0dHIoXCJoZWlnaHRcIiwgZnVuY3Rpb24oZCkgeyByZXR1cm4gYmFySGVpZ2h0IC0gYmFyR3JhcGgueSgobWl4ZWQgPyAgTWF0aC5hYnMoZC52YWx1ZSkgOiBkLnZhbHVlKSk7IH0pIC8vIHNldCB0aGUgYmFySGVpZ2h0XHJcbiAgICAgIC5hdHRyKFwiZmlsbFwiLCBmdW5jdGlvbihkKSB7IHJldHVybiAgbWl4ZWQgPyAgKGQudmFsdWUgPiAwID8gJ2xpZ2h0Z3JlZW4nIDogcmVkKSA6ICdsaWdodGdyZWVuJzt9KVxyXG5cclxuICAgIC8vY3JlYXRlIHRoZSB4IGFuZCB5IGF4aXNcclxuICAgIGJhckdyYXBoLnN2Zy5hcHBlbmQoXCJnXCIpXHJcbiAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIFwidHJhbnNsYXRlKDAsXCIgKyBiYXJIZWlnaHQgKyBcIilcIilcclxuICAgICAgLmNhbGwoYmFyR3JhcGgueEF4aXMuc2NhbGUoYmFyR3JhcGgueCkpO1xyXG5cclxuICAgIC8vIGFkZCB0aGUgeSBBeGlzXHJcbiAgICBiYXJHcmFwaC5zdmcuYXBwZW5kKFwiZ1wiKS5hdHRyKFwiY2xhc3NcIixcInlBeGlzXCIpLmNhbGwoYmFyR3JhcGgueUF4aXMpO1xyXG5cclxuICAgIHZhciBtYXh3ID0gMDtcclxuICAgIGJhckdyYXBoLnN2Zy5zZWxlY3QoJy55QXhpcycpLnNlbGVjdEFsbCgndGV4dCcpLmVhY2goZnVuY3Rpb24oKXtcclxuICAgICAgaWYgKHRoaXMuZ2V0QkJveCgpLndpZHRoID4gbWF4dykgbWF4dyA9IHRoaXMuZ2V0QkJveCgpLndpZHRoO1xyXG4gICAgfSk7XHJcblxyXG4gICAgYmFyR3JhcGguc3ZnLmF0dHIoXCJ0cmFuc2Zvcm1cIixcInRyYW5zbGF0ZShcIiArIChiYXJNYXJnaW4ubGVmdCttYXh3KSArIFwiLFwiICsgYmFyTWFyZ2luLnRvcCArIFwiKVwiKTsgLy8gbW92ZXMgYnkgYSB4IGFuZCB5IHZhbHVlIGluIHRoaXMgY2FzZSB0aGUgYmFyTWFyZ2luc1xyXG5cclxuICAgIC8vIEFkZCBhIHRpdGxlXHJcbiAgICBiYXJHcmFwaC5zdmcuYXBwZW5kKFwidGV4dFwiKVxyXG4gICAgICAuYXR0cihcInhcIiwgKGJhcldpZHRoIC8gMikpXHJcbiAgICAgIC5hdHRyKFwieVwiLCAwIC0gKGJhck1hcmdpbi50b3AgLyAyKSlcclxuICAgICAgLmF0dHIoXCJpZFwiLFwiYmFyLXRpdGxlXCIpXHJcbiAgICAgIC5hdHRyKFwidGV4dC1hbmNob3JcIiwgXCJtaWRkbGVcIilcclxuICAgICAgLnN0eWxlKFwiZm9udC1zaXplXCIsIFwiMjRweFwiKVxyXG4gICAgICAudGV4dChlZGIpO1xyXG5cclxuICAgIGJhckdyYXBoLnN2Zy5hcHBlbmQoXCJ0ZXh0XCIpXHJcbiAgICAgIC5hdHRyKFwidGV4dC1hbmNob3JcIiwgXCJtaWRkbGVcIikgIC8vIHRoaXMgbWFrZXMgaXQgZWFzeSB0byBjZW50cmUgdGhlIHRleHQgYXMgdGhlIHRyYW5zZm9ybSBpcyBhcHBsaWVkIHRvIHRoZSBhbmNob3JcclxuICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgXCJ0cmFuc2xhdGUoXCIrIC0obWF4dyArIDIwKSArXCIsXCIrKGJhckhlaWdodC8yICkrXCIpcm90YXRlKC05MClcIikgIC8vIHRleHQgaXMgZHJhd24gb2ZmIHRoZSBzY3JlZW4gdG9wIGxlZnQsIG1vdmUgZG93biBhbmQgb3V0IGFuZCByb3RhdGVcclxuICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcInVuaXQtdGV4dC1zY2FsZWRcIilcclxuICAgICAgLnRleHQoeUxhYmVsKTtcclxuXHJcbiAgICAvLyBBZGQgeWVhciBhcyB0aGUgeC1heGlzIGxhYmVsXHJcbiAgICBiYXJHcmFwaC5zdmcuYXBwZW5kKFwidGV4dFwiKVxyXG4gICAgICAuYXR0cihcInRleHQtYW5jaG9yXCIsIFwibWlkZGxlXCIpICAvLyB0aGlzIG1ha2VzIGl0IGVhc3kgdG8gY2VudHJlIHRoZSB0ZXh0IGFzIHRoZSB0cmFuc2Zvcm0gaXMgYXBwbGllZCB0byB0aGUgYW5jaG9yXHJcbiAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIFwidHJhbnNsYXRlKFwiKyArKGJhcldpZHRoLzIpICtcIixcIisoIGJhck1hcmdpbi50b3AgKyBiYXJIZWlnaHQgLWJhck1hcmdpbi5ib3R0b20gKyAyMCApK1wiKVwiKSAgLy8gdGV4dCBpcyBkcmF3biBvZmYgdGhlIHNjcmVlbiB0b3AgbGVmdCwgbW92ZSBkb3duIGFuZCBvdXQgYW5kIHJvdGF0ZVxyXG4gICAgICAuYXR0cihcImNsYXNzXCIsIFwidW5pdC10ZXh0LXNjYWxlZFwiKVxyXG4gICAgICAudGV4dChcIlllYXJcIik7XHJcblxyXG4gICAgYmFyR3JhcGguY3JlYXRlZCA9IHRydWU7XHJcbiAgICBzaW5nbGViYXJHcmFwaHMucHVzaChiYXJHcmFwaCk7XHJcbiAgfVxyXG5cclxuLy8gV2UgZG8gbm90IG5lZWQgdGFibGUgbWF4IGFuZCB0aGUgYXhpcyBzaG91bGQgbmV2ZXIgYmUgdXBkYXRlZCBmb3IgYSBncmFwaFxyXG4gIGZ1bmN0aW9uIHVwZGF0ZUdyYXBoKGJhckdyYXBoLHRhYmxlTWF4LCB0YWJsZU1pbiwgZGF0YSwgZWRiKXtcclxuICAgIHZhciBtaXhlZCA9ICh0YWJsZU1pbiA8IDAgJiYgdGFibGVNYXggPiAwKTtcclxuXHJcbiAgICBiYXJHcmFwaC5zdmcuc2VsZWN0QWxsKFwiLmJhclwiKSAvLyBOb25lIGV4aXN0IHlldCBidXQgd2lsbCBiZSBjcmVhdGVkIHdpdGggZW50ZXJcclxuICAgICAgLmRhdGEoZGF0YSkgLy8gZW50ZXIgdGhlIGRhdGEgYXJyYXlcclxuICAgICAgLnRyYW5zaXRpb24oKVxyXG4gICAgICAuZHVyYXRpb24oNzUwKVxyXG4gICAgICAuYXR0cihcInlcIiwgZnVuY3Rpb24oZCkgeyByZXR1cm4gYmFyR3JhcGgueSgobWl4ZWQgPyAgTWF0aC5hYnMoZC52YWx1ZSkgOiBkLnZhbHVlKSk7IH0pIC8vIHNldCB0aGUgeSB2YWx1ZSBhY2NvcmRpbmcgdG8gdGhlIHZhbHVlXHJcbiAgICAgIC5hdHRyKFwiaGVpZ2h0XCIsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIGJhckhlaWdodCAtIGJhckdyYXBoLnkoKG1peGVkID8gIE1hdGguYWJzKGQudmFsdWUpIDogZC52YWx1ZSkpOyB9KSAvLyBzZXQgdGhlIGJhckhlaWdodFxyXG4gICAgICAuYXR0cihcImZpbGxcIiwgZnVuY3Rpb24oZCkgeyByZXR1cm4gIG1peGVkID8gIChkLnZhbHVlID4gMCA/ICdsaWdodGdyZWVuJyA6IHJlZCkgOiAnbGlnaHRncmVlbic7fSk7IC8vIElmIG1peGVkIGNoZWNrIGlmIG5lZ2F0aXZlIG9yIG5vdCBpZiBub3QgbWl4ZWQganVzdCBsaWdodGdyZWVuXHJcblxyXG5cclxuICAgIGJhckdyYXBoLnN2Zy5zZWxlY3QoXCIjYmFyLXRpdGxlXCIpLnRleHQoZWRiKTsgLy8gVXBkYXRlIHRoZSB0aXRsZVxyXG4gIH1cclxuXHJcbiAgcmV0dXJuIHtcclxuICAgIHNob3dCYXJXaXRoUm93RWxlbTogc2hvd0JhcldpdGhSb3dFbGVtLFxyXG4gICAgY3JlYXRlQmFyR3JhcGggOiBjcmVhdGVCYXJHcmFwaFxyXG4gIH1cclxufSkoKTtcclxuIiwidmFyIEdyb3VwZWRCYXJNb2R1bGUgPSAoZnVuY3Rpb24oKXtcclxuXHJcbiAgLy8gIE1hcmdpbnMgYW5kIHdpZHRoIC8gaGVpZ2h0IGZvciB0aGUgZ3JhcGhcclxuICB2YXIgbWFyZ2luID0geyB0b3A6IDI1LCByaWdodDogNTAsIGJvdHRvbTogMTUwLCBsZWZ0OiA1MCB9LFxyXG4gICAgd2lkdGggPSAxMjAwIC0gbWFyZ2luLmxlZnQgLSBtYXJnaW4ucmlnaHQsXHJcbiAgICBoZWlnaHQgPSA3MDAgLSBtYXJnaW4udG9wIC0gbWFyZ2luLmJvdHRvbTtcclxuXHJcbiAgLy8gVGhlIGFycmF5IHRoYXQgaG9sZHMgdGhlIEdyb3VwZWRCYXJEYXRhIG9iamVjdHMgZm9yIGV2ZXJ5IGdyYXBoIG9uIHRoZSBwYWdlXHJcbiAgdmFyIGJhckdyYXBocyA9IFtdO1xyXG5cclxuICAvLyBBbiBvYmplY3QgdG8gaG9sZCBkYXRhIGZvciBlYWNoIGdyb3VwZWQgYmFyIGdyYXBoXHJcbiAgZnVuY3Rpb24gR3JvdXBlZEJhckRhdGEoeDAsIHgxLHkseUF4aXMsc3ZnLGlkKXtcclxuICAgIHRoaXMueDAgPSB4MDtcclxuICAgIHRoaXMueDEgPSB4MTtcclxuICAgIHRoaXMueSA9IHk7XHJcbiAgICB0aGlzLnlBeGlzID0geUF4aXM7XHJcbiAgICB0aGlzLnN2ZyA9IHN2ZztcclxuICAgIHRoaXMuaWQgPSBpZDtcclxuICAgIHRoaXMuY3JlYXRlZCA9IGZhbHNlO1xyXG4gICAgdGhpcy5nID0gbnVsbDtcclxuICB9XHJcblxyXG4gIC8vIEJsdWUgY29sb3Igc2NhbGVcclxuICB2YXIgeiA9IGQzLnNjYWxlT3JkaW5hbCgpLnJhbmdlKFtcIiNCQkRFRkJcIiwgXCIjNjRCNUY2XCIsIFwiIzE5NzZEMlwiLCBcIiMxNTY1QzBcIiwgXCIjMEQ0N0ExXCIsIFwiI2QwNzQzY1wiLCBcIiNmZjhjMDBcIl0pO1xyXG5cclxuICAvLyBSZWQgY29sb3Igc2NhbGUgZm9yIG5lZ2F0aXZlIHZhbHVlc1xyXG4gIHZhciB6UmVkID0gZDMuc2NhbGVPcmRpbmFsKCkucmFuZ2UoW1wiI0ZGNzM3M1wiLCBcIiNGRjRDNENcIiwgXCIjRkYyNjI2XCIsIFwiI0IyMDAwMFwiLCBcIiNEOTAwMDBcIiwgXCIjZDA3NDNjXCIsIFwiI2ZmOGMwMFwiXSk7XHJcblxyXG4gIC8vIEdyZWVuIGNvbG9yIHNjYWxlIGZvciBzZWxlY3RlZCB2YWx1ZXNcclxuICB2YXIgelNlbGVjdGVkID0gZDMuc2NhbGVPcmRpbmFsKCkucmFuZ2UoW1wiI0MxRkZDMVwiLCBcIiM5MEVFOTBcIiwgXCIjNUJDODVCXCIsIFwiIzMxQTIzMVwiLCBcIiMxMzdCMTNcIiwgXCIjZDA3NDNjXCIsIFwiI2ZmOGMwMFwiXSk7XHJcblxyXG4gIC8vIEhpZ2hsaWdodHMgZWFjaCBiYXIgdGhhdCBjb3Jyb3Nwb25kcyB0byB0aGUgRURCLiBJZiBhbHJlYWR5U2VsZWN0ZWQsIG5vdGhpbmcgc2hvdWxkIGJlIGhpZ2hsaWdodGVkIHRoZXJlZm9yZSB0aGUgbm9ybWFsIHNjYWxlIGlzIGFwcGxpZWRcclxudmFyIGhpZ2hsaWdodCA9IGZ1bmN0aW9uIChlZGIsIGFscmVhZHlTZWxlY3RlZCkge1xyXG4gICAgLy8gQmVmb3JlIHdlIHJlbW92ZSB0aGUgY2xhc3Mgd2UgbmVlZCB0byBhcHBseSB0aGUgY29ycmVjdCBjb2xvciBzY2FsZVxyXG4gICAgZDMuc2VsZWN0QWxsKFwiLmJhci1zZWxlY3RlZFwiKS5kYXR1bShmdW5jdGlvbihkKSB7cmV0dXJuIGQ7IH0pXHJcbiAgICAgIC5hdHRyKFwiZmlsbFwiLCBmdW5jdGlvbihkKSB7cmV0dXJuIHooZC5rZXkpOyB9KTtcclxuXHJcbiAgICAvLyBTZWxlY3QgYWxsIHJlY3RhbmdsZSB3aXRoIHRoZSBzZWxlY3RlZCBjbGFzcyBhbmQgcmVtb3ZlIGNsYXNzXHJcbiAgICBkMy5zZWxlY3RBbGwoXCIuYmFyLXNlbGVjdGVkXCIpLmNsYXNzZWQoXCJiYXItc2VsZWN0ZWRcIiwgZmFsc2UpO1xyXG5cclxuICAgIGlmKGFscmVhZHlTZWxlY3RlZCl7cmV0dXJuO30gLy8gVGhlIGNhc2Ugd2hlcmUgdGhlIHJvdyBpcyB1bnNlbGVjdGVkIGJ1dCBub3RoaW5nIGVsc2UgaXMgc2VsZWN0ZWRcclxuXHJcbiAgICBkMy5zZWxlY3RBbGwoXCJyZWN0LlwiK2VkYi5yZXBsYWNlKC8gL2cgLCBcIlwiKSlcclxuICAgICAgLmNsYXNzZWQoXCJiYXItc2VsZWN0ZWRcIiwgdHJ1ZSkgLy8gU2VsZWN0IGFsbCByZWN0YW5nbGUgd2l0aCB0aGUgY29ycmVjdCBFREIgYW5kIG91dGxpbmUgYmFycyBhbmQgYWRkIHNlbGVjdGVkIGNsYXNzXHJcbiAgICAgIC5kYXR1bShmdW5jdGlvbihkKSB7cmV0dXJuIGQ7IH0pIC8vIEdyYWIgdGhlIGRhdGEgYm91bmQgdG8gdGhlIGVsZW1lbnRzXHJcbiAgICAgIC5hdHRyKFwiZmlsbFwiLCBmdW5jdGlvbihkKSB7cmV0dXJuIHpTZWxlY3RlZChkLmtleSk7IH0pOyAvLyBBcHBseSB0aGUgZ3JlZW4gY29sb3Igc2NhbGUgYmFzZWQgb24gdGhlIGtleVxyXG59XHJcblxyXG5cclxuLy8gT25seSBwdWJsaWMgZnVuY3Rpb24gdXNlZCB0byBwbGFjZSBvciB1cGRhdGUgYSBncmFwaCBvbiB0aGUgcGFnZVxyXG52YXIgY3JlYXRlZEdyb3VwZWRCYXJHcmFwaCA9IGZ1bmN0aW9uIChkYXRhLGtleXMseUxhYmVsLCBkaXZJRCkge1xyXG4gIGZvcih2YXIgaSA9IDA7IGkgPCBiYXJHcmFwaHMubGVuZ3RoOyBpKyspe1xyXG4gICAgaWYoYmFyR3JhcGhzW2ldLmlkID09PSBkaXZJRCl7XHJcbiAgICAgIHVwZGF0ZUV4aXN0aW5nR3JhcGgoZGF0YSwga2V5cywgYmFyR3JhcGhzW2ldLCB5TGFiZWwpO1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgfVxyXG4gIGNyZWF0ZU5ld0dyb3VwZWRCYXJHcmFwaChkYXRhLCBrZXlzLCB5TGFiZWwsIGRpdklEKTsgLy8gTm8gZ3JhcGggZXhpc3RzIHNvIG1ha2UgYSBuZXcgb25lXHJcbn1cclxuXHJcblxyXG4vLyBDcmVhdGVzIGEgYnJhbmQgbmV3IGdyb3VwZWQgYmFyIGdyYXBoXHJcbnZhciBjcmVhdGVOZXdHcm91cGVkQmFyR3JhcGggPSBmdW5jdGlvbiAoZGF0YSwga2V5cywgeUxhYmVsLCBkaXZJRCkge1xyXG5cclxuICAgIC8vIENyZWF0ZSB0aGUgbmV3IGdyYXBoIG9iamVjdFxyXG4gICAgdmFyIGN1ckJhckdyYXBoID0gbmV3IEdyb3VwZWRCYXJEYXRhKFxyXG4gICAgICAgIGQzLnNjYWxlQmFuZCgpLnJhbmdlUm91bmQoWzAsIHdpZHRoXSkucGFkZGluZ0lubmVyKDAuMDUpLFxyXG4gICAgICAgIGQzLnNjYWxlQmFuZCgpLnBhZGRpbmcoMC4wNSksXHJcbiAgICAgICAgZDMuc2NhbGVMaW5lYXIoKS5yYW5nZVJvdW5kKFtoZWlnaHQsIDBdKSxcclxuICAgICAgICBkMy5heGlzTGVmdCgpLFxyXG4gICAgICAgIGQzLmF4aXNCb3R0b20oKSxcclxuICAgICAgICBkaXZJRCk7XHJcblxyXG4gICBiYXJHcmFwaHMucHVzaChjdXJCYXJHcmFwaCk7XHJcblxyXG4gICBjdXJCYXJHcmFwaC5zdmcgPSAgZDMuc2VsZWN0KGRpdklEKS5hcHBlbmQoXCJzdmdcIilcclxuICAgICAgICAgICAgIC5hdHRyKFwid2lkdGhcIiwgd2lkdGggKyBtYXJnaW4ubGVmdCArIG1hcmdpbi5yaWdodClcclxuICAgICAgICAgICAgIC5hdHRyKFwiaGVpZ2h0XCIsIGhlaWdodCArIG1hcmdpbi50b3AgKyBtYXJnaW4uYm90dG9tKVxyXG4gICAgICAgICAgICAgLmFwcGVuZChcImdcIikgLy8gZ3JvdXAgYWxsb3dzIHVzIHRvIG1vdmUgZXZlcnl0aGluZyB0b2dldGhlclxyXG4gICAgICAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIixcInRyYW5zbGF0ZShcIiArIG1hcmdpbi5sZWZ0ICsgXCIsXCIgKyBtYXJnaW4udG9wICsgXCIpXCIpOyAvLyBtb3ZlcyBieSBhIHggYW5kIHkgdmFsdWUgaW4gdGhpcyBjYXNlIHRoZSBtYXJnaW5zXHJcblxyXG4gICAgY3VyQmFyR3JhcGgueDAuZG9tYWluKGRhdGEubWFwKGZ1bmN0aW9uKGQpIHsgcmV0dXJuIGQuZWRiOyB9KSk7XHJcbiAgICBjdXJCYXJHcmFwaC54MS5kb21haW4oa2V5cykucmFuZ2VSb3VuZChbMCwgY3VyQmFyR3JhcGgueDAuYmFuZHdpZHRoKCldKTtcclxuICAgIGN1ckJhckdyYXBoLnkuZG9tYWluKFswLCBkMy5tYXgoZGF0YSwgZnVuY3Rpb24oZCkgeyByZXR1cm4gZDMubWF4KGtleXMsIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gTWF0aC5hYnMoZFtrZXldKTsgfSk7IH0pXSkubmljZSgpO1xyXG5cclxuXHJcbiAgICAvLyBUaGUgZm9ybWF0IHVzZWQgb24gdGhlIHRpcCB2YWx1ZXNcclxuICAgIHZhciBkcEZvcm1hdCA9IGQzLmZvcm1hdChcIi4yZlwiKTtcclxuXHJcbiAgICAvLyBDcmVhdGUgdGhlIHRpcCB0aGF0IHdpbGwgc2hvdyB1cCBvbiBob3ZlclxyXG4gICAgdmFyIHRpcCA9IGQzLnRpcCgpXHJcbiAgICAgIC5hdHRyKCdjbGFzcycsICdkMy10aXAnKVxyXG4gICAgICAub2Zmc2V0KFstMTAsIDBdKVxyXG4gICAgICAuaHRtbChmdW5jdGlvbihkKSB7XHJcbiAgICAgICAgcmV0dXJuIFwiPHN0cm9uZz5WYWx1ZTo8L3N0cm9uZz4gPHNwYW4gc3R5bGU9J2NvbG9yOmxpZ2h0Z3JlZW4nPlwiICsgZHBGb3JtYXQoZC52YWx1ZSkgKyBcIjwvc3Bhbj48YnI+PGJyPjxzdHJvbmc+WWVhcjo8L3N0cm9uZz4gPHNwYW4gc3R5bGU9J2NvbG9yOmxpZ2h0Z3JlZW4nPlwiICsgZC5rZXkgKyBcIjwvc3Bhbj5cIjtcclxuICAgIH0pO1xyXG5cclxuICAgIGN1ckJhckdyYXBoLnN2Zy5jYWxsKHRpcCk7XHJcblxyXG4gICAgICBjdXJCYXJHcmFwaC5zdmcuYXBwZW5kKFwiZ1wiKVxyXG4gICAgICAgIC5zZWxlY3RBbGwoXCJnXCIpXHJcbiAgICAgICAgLmRhdGEoZGF0YSlcclxuICAgICAgICAuZW50ZXIoKS5hcHBlbmQoXCJnXCIpXHJcbiAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgZnVuY3Rpb24oZCkgeyByZXR1cm4gXCJ0cmFuc2xhdGUoXCIgKyBjdXJCYXJHcmFwaC54MChkLmVkYikgKyBcIiwwKVwiOyB9KVxyXG4gICAgICAgIC5zZWxlY3RBbGwoXCJyZWN0XCIpXHJcbiAgICAgICAgLmRhdGEoZnVuY3Rpb24oZCkgeyByZXR1cm4ga2V5cy5tYXAoZnVuY3Rpb24oa2V5KSB7IHJldHVybiB7bmVnIDogZFtrZXldIDwgMCxrZXk6IGtleSwgZWRiIDogZC5lZGIsIHZhbHVlOiBNYXRoLmFicyhkW2tleV0pfTsgfSk7IH0pXHJcbiAgICAgICAgLmVudGVyKCkuYXBwZW5kKFwicmVjdFwiKVxyXG4gICAgICAgIC5hdHRyKFwieFwiLCBmdW5jdGlvbihkKSB7IHJldHVybiBjdXJCYXJHcmFwaC54MShkLmtleSk7IH0pXHJcbiAgICAgICAgLmF0dHIoXCJ5XCIsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIGN1ckJhckdyYXBoLnkoZC52YWx1ZSk7IH0pXHJcbiAgICAgICAgLmF0dHIoXCJ3aWR0aFwiLCBjdXJCYXJHcmFwaC54MS5iYW5kd2lkdGgoKSlcclxuICAgICAgICAuYXR0cihcImhlaWdodFwiLCBmdW5jdGlvbihkKSB7IHJldHVybiBoZWlnaHQgLSBjdXJCYXJHcmFwaC55KGQudmFsdWUpOyB9KVxyXG4gICAgICAgIC5hdHRyKFwiZmlsbFwiLCBmdW5jdGlvbihkKSB7IGlmKGQubmVnKXtcclxuICAgICAgICAgIHJldHVybiB6UmVkKGQua2V5KTtcclxuICAgICAgICB9ZWxzZSB7XHJcbiAgICAgICAgICByZXR1cm4geihkLmtleSk7XHJcbiAgICAgICAgfX0pXHJcbiAgICAgICAgLmF0dHIoXCJjbGFzc1wiLGZ1bmN0aW9uKGQpe3JldHVybiBcIiBcIitkLmVkYi5yZXBsYWNlKC8gL2cgLCBcIlwiKTt9KSAvLyBBZGQgZWJkIGFzIHRoZSBjbGFzc1xyXG4gICAgICAgIC5vbignbW91c2VvdmVyJywgdGlwLnNob3cpXHJcbiAgICAgICAgLm9uKCdtb3VzZW91dCcsIHRpcC5oaWRlKTtcclxuXHJcbiAgICAvLyBBZGQgeCBheGlzXHJcbiAgICBjdXJCYXJHcmFwaC5zdmcuYXBwZW5kKFwiZ1wiKVxyXG4gICAgICAuYXR0cihcImNsYXNzXCIsIFwieEF4aXMgYXhpcyBncm91cC14QXhpc1wiKVxyXG4gICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBcInRyYW5zbGF0ZSgwLFwiICsgaGVpZ2h0ICsgXCIpXCIpXHJcbiAgICAgIC5jYWxsKGQzLmF4aXNCb3R0b20oY3VyQmFyR3JhcGgueDApKVxyXG4gICAgICAuc2VsZWN0QWxsKFwidGV4dFwiKVxyXG4gICAgICAuYXR0cihcInlcIiwgMClcclxuICAgICAgLmF0dHIoXCJ4XCIsIDkpXHJcbiAgICAgIC5hdHRyKFwiZHlcIiwgXCIuNDBlbVwiKVxyXG4gICAgICAuYXR0cihcImNsYXNzXCIsIFwiYXhpcy10ZXh0LXNjYWxlZFwiKVxyXG4gICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBcInJvdGF0ZSg1NSlcIilcclxuICAgICAgLnN0eWxlKFwidGV4dC1hbmNob3JcIiwgXCJzdGFydFwiKTtcclxuXHJcbiAgICBjdXJCYXJHcmFwaC5zdmcuYXBwZW5kKFwiZ1wiKVxyXG4gICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJ5QXhpcyBheGlzXCIpXHJcbiAgICAgICAgLmNhbGwoY3VyQmFyR3JhcGgueUF4aXMuc2NhbGUoY3VyQmFyR3JhcGgueSkpLy8udGlja3MobnVsbCwgXCJzXCIpXHJcbiAgICAgICAgLmFwcGVuZChcInRleHRcIilcclxuICAgICAgICAuYXR0cihcInhcIiwgMilcclxuICAgICAgICAuYXR0cihcInlcIiwgY3VyQmFyR3JhcGgueShjdXJCYXJHcmFwaC55LnRpY2tzKCkucG9wKCkpICsgMC41KVxyXG4gICAgICAgIC5hdHRyKFwiZHlcIiwgXCIwLjQwZW1cIilcclxuICAgICAgICAuYXR0cihcImNsYXNzXCIsIFwiYXhpcy10ZXh0LXNjYWxlZFwiKVxyXG4gICAgICAgIC5hdHRyKFwidGV4dC1hbmNob3JcIiwgXCJzdGFydFwiKVxyXG5cclxuXHJcbiAgICB2YXIgbWF4dyA9IDA7XHJcbiAgICBjdXJCYXJHcmFwaC5zdmcuc2VsZWN0KCcueUF4aXMnKS5zZWxlY3RBbGwoJ3RleHQnKS5lYWNoKGZ1bmN0aW9uKCl7XHJcbiAgICAgIGlmICh0aGlzLmdldEJCb3goKS53aWR0aCA+IG1heHcpIG1heHcgPSB0aGlzLmdldEJCb3goKS53aWR0aDtcclxuICAgIH0pO1xyXG5cclxuXHJcbiAgICBjdXJCYXJHcmFwaC5zdmcuYXR0cihcInRyYW5zZm9ybVwiLFwidHJhbnNsYXRlKFwiICsgKG1hcmdpbi5sZWZ0K21heHcpICsgXCIsXCIgKyBtYXJnaW4udG9wICsgXCIpXCIpOyAvLyBtb3ZlcyBieSBhIHggYW5kIHkgdmFsdWUgaW4gdGhpcyBjYXNlIHRoZSBiYXJNYXJnaW5zXHJcblxyXG5cclxuICAgIGN1ckJhckdyYXBoLnN2Zy5hcHBlbmQoXCJ0ZXh0XCIpXHJcbiAgICAgIC5hdHRyKFwidGV4dC1hbmNob3JcIiwgXCJtaWRkbGVcIikgIC8vIHRoaXMgbWFrZXMgaXQgZWFzeSB0byBjZW50cmUgdGhlIHRleHQgYXMgdGhlIHRyYW5zZm9ybSBpcyBhcHBsaWVkIHRvIHRoZSBhbmNob3JcclxuICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgXCJ0cmFuc2xhdGUoXCIrIC0obWF4dyArIDIwKSArXCIsXCIrKGhlaWdodC8yKStcIilyb3RhdGUoLTkwKVwiKSAgLy8gdGV4dCBpcyBkcmF3biBvZmYgdGhlIHNjcmVlbiB0b3AgbGVmdCwgbW92ZSBkb3duIGFuZCBvdXQgYW5kIHJvdGF0ZVxyXG4gICAgICAuYXR0cihcImNsYXNzXCIsIFwidW5pdC10ZXh0LXNjYWxlZFwiKVxyXG4gICAgICAudGV4dCh5TGFiZWwpO1xyXG5cclxuICAgIC8vIENyZWF0ZSB0aGUgbGVnZW5kXHJcbiAgICB2YXIgbGVnZW5kID0gY3VyQmFyR3JhcGguc3ZnLmFwcGVuZChcImdcIilcclxuICAgICAgLmF0dHIoXCJmb250LWZhbWlseVwiLCBcInNhbnMtc2VyaWZcIilcclxuICAgICAgLmF0dHIoXCJmb250LXNpemVcIiwgOClcclxuICAgICAgLmF0dHIoXCJ0ZXh0LWFuY2hvclwiLCBcImVuZFwiKVxyXG4gICAgICAuc2VsZWN0QWxsKFwiZ1wiKVxyXG4gICAgICAuZGF0YShrZXlzLnNsaWNlKCkucmV2ZXJzZSgpKVxyXG4gICAgICAuZW50ZXIoKS5hcHBlbmQoXCJnXCIpXHJcbiAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIGZ1bmN0aW9uKGQsIGkpIHsgcmV0dXJuIFwidHJhbnNsYXRlKDAsXCIgKyBpICogMTAgKyBcIilcIjsgfSk7XHJcblxyXG4gICAgbGVnZW5kLmFwcGVuZChcInJlY3RcIilcclxuICAgICAgLmF0dHIoXCJ4XCIsIHdpZHRoIC0gMTAwKVxyXG4gICAgICAuYXR0cihcIndpZHRoXCIsIDguNSlcclxuICAgICAgLmF0dHIoXCJoZWlnaHRcIiwgOC41KVxyXG4gICAgICAuYXR0cihcImZpbGxcIiwgeik7XHJcblxyXG4gICAgbGVnZW5kLmFwcGVuZChcInRleHRcIilcclxuICAgICAgLmF0dHIoXCJ4XCIsIHdpZHRoIC0gMTEwKVxyXG4gICAgICAuYXR0cihcInlcIiwgNClcclxuICAgICAgLmF0dHIoXCJkeVwiLCBcIjAuMzJlbVwiKVxyXG4gICAgICAuYXR0cihcImNsYXNzXCIsIFwiZy10ZXh0XCIpXHJcbiAgICAgIC5zdHlsZShcImZvbnQtc2l6ZVwiLCBcIjhweFwiKVxyXG4gICAgICAudGV4dChmdW5jdGlvbihkKSB7IHJldHVybiBkOyB9KTtcclxuXHJcbiAgICBjdXJCYXJHcmFwaC5jcmVhdGVkID0gdHJ1ZTsgLy8gU2V0IHRoZSBncmFwaCB3aXRoIHRoZSBJRCBkaXZJRCB0byBjcmVhdGVkXHJcbn1cclxuXHJcbnZhciB1cGRhdGVFeGlzdGluZ0dyYXBoID0gZnVuY3Rpb24gKGRhdGEsIGtleXMsIGN1ckJhckdyYXBoLCB5TGFiZWwpIHtcclxuXHJcbiAgICBjdXJCYXJHcmFwaC55LmRvbWFpbihbMCwgZDMubWF4KGRhdGEsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIGQzLm1heChrZXlzLCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIE1hdGguYWJzKGRba2V5XSk7IH0pOyB9KV0pLm5pY2UoKTtcclxuXHJcbiAgICBjdXJCYXJHcmFwaC55QXhpcy5zY2FsZShjdXJCYXJHcmFwaC55KTtcclxuXHJcbiAgICAgICAgLyogWSBheGlzICovXHJcbiAgICBjdXJCYXJHcmFwaC5zdmcuc2VsZWN0KFwiLnlBeGlzXCIpLnJlbW92ZSgpO1xyXG4gICAgY3VyQmFyR3JhcGguc3ZnLmFwcGVuZChcImdcIilcclxuICAgICAgICAuYXR0cihcImNsYXNzXCIsIFwieUF4aXMgYXhpc1wiKVxyXG4gICAgICAgIC5jYWxsKGN1ckJhckdyYXBoLnlBeGlzKTtcclxuXHJcblxyXG5cclxuICAgIC8vIFRoZSBmb3JtYXQgdXNlZCBvbiB0aGUgdGlwIHZhbHVlc1xyXG4gICAgdmFyIGRwRm9ybWF0ID0gZDMuZm9ybWF0KFwiLjJmXCIpO1xyXG5cclxuICAgIC8vIENyZWF0ZSB0aGUgdGlwIHRoYXQgd2lsbCBzaG93IHVwIG9uIGhvdmVyXHJcbiAgICB2YXIgdGlwID0gZDMudGlwKClcclxuICAgICAgLmF0dHIoJ2NsYXNzJywgJ2QzLXRpcCcpXHJcbiAgICAgIC5vZmZzZXQoWy0xMCwgMF0pXHJcbiAgICAgIC5odG1sKGZ1bmN0aW9uKGQpIHtcclxuICAgICAgICByZXR1cm4gXCI8c3Ryb25nPlZhbHVlOjwvc3Ryb25nPiA8c3BhbiBzdHlsZT0nY29sb3I6bGlnaHRncmVlbic+XCIgKyBkcEZvcm1hdChkLnZhbHVlKSArIFwiPC9zcGFuPjxicj48YnI+PHN0cm9uZz5ZZWFyOjwvc3Ryb25nPiA8c3BhbiBzdHlsZT0nY29sb3I6bGlnaHRncmVlbic+XCIgKyBkLmtleSArIFwiPC9zcGFuPlwiO1xyXG4gICAgICB9KTtcclxuXHJcbiAgICBjdXJCYXJHcmFwaC5zdmcuY2FsbCh0aXApO1xyXG5cclxuICAgIHZhciBzZWxlY3Rpb24gPSBjdXJCYXJHcmFwaC5zdmcuc2VsZWN0QWxsKFwiLmJhclwiKS5yZW1vdmUoKTtcclxuXHJcblxyXG4gICAgY3VyQmFyR3JhcGguc3ZnLmFwcGVuZChcImdcIilcclxuICAgICAgICAuc2VsZWN0QWxsKFwiZ1wiKVxyXG4gICAgICAgIC5kYXRhKGRhdGEpXHJcbiAgICAgICAgLmVudGVyKCkuYXBwZW5kKFwiZ1wiKVxyXG4gICAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIFwidHJhbnNsYXRlKFwiICsgY3VyQmFyR3JhcGgueDAoZC5lZGIpICsgXCIsMClcIjsgfSlcclxuICAgICAgICAuc2VsZWN0QWxsKFwicmVjdFwiKVxyXG4gICAgICAgIC5kYXRhKGZ1bmN0aW9uKGQpIHsgcmV0dXJuIGtleXMubWFwKGZ1bmN0aW9uKGtleSkgeyByZXR1cm4ge25lZyA6IGRba2V5XSA8IDAsa2V5OiBrZXksIGVkYiA6IGQuZWRiLCB2YWx1ZTogTWF0aC5hYnMoZFtrZXldKX07IH0pOyB9KVxyXG4gICAgICAgIC5lbnRlcigpLmFwcGVuZChcInJlY3RcIilcclxuICAgICAgICAuYXR0cihcInhcIiwgZnVuY3Rpb24oZCkgeyByZXR1cm4gY3VyQmFyR3JhcGgueDEoZC5rZXkpOyB9KVxyXG4gICAgICAgIC5hdHRyKFwieVwiLCBmdW5jdGlvbihkKSB7IHJldHVybiBjdXJCYXJHcmFwaC55KGQudmFsdWUpOyB9KVxyXG4gICAgICAgIC5hdHRyKFwiY2xhc3NcIixcImJhclwiKVxyXG4gICAgICAgIC5hdHRyKFwid2lkdGhcIiwgY3VyQmFyR3JhcGgueDEuYmFuZHdpZHRoKCkpXHJcbiAgICAgICAgLmF0dHIoXCJoZWlnaHRcIiwgZnVuY3Rpb24oZCkgeyByZXR1cm4gaGVpZ2h0IC0gY3VyQmFyR3JhcGgueShkLnZhbHVlKTsgfSlcclxuICAgICAgICAuYXR0cihcImZpbGxcIiwgZnVuY3Rpb24oZCkgeyBpZihkLm5lZyl7XHJcbiAgICAgICAgICByZXR1cm4gelJlZChkLmtleSk7XHJcbiAgICAgICAgfWVsc2Uge1xyXG4gICAgICAgICAgcmV0dXJuIHooZC5rZXkpO1xyXG4gICAgICAgIH19KVxyXG4gICAgICAgIC5hdHRyKFwiY2xhc3NcIixmdW5jdGlvbihkKXtyZXR1cm4gXCJcIitkLmVkYi5yZXBsYWNlKC8gL2cgLCBcIlwiKTt9ICkgLy8gQWRkIGViZCBhcyB0aGUgY2xhc3NcclxuICAgICAgICAub24oJ21vdXNlb3ZlcicsIHRpcC5zaG93KVxyXG4gICAgICAgIC5vbignbW91c2VvdXQnLCB0aXAuaGlkZSk7XHJcblxyXG4gICAgICAgICAgICAvLyBDcmVhdGUgdGhlIGxlZ2VuZFxyXG4gICAgdmFyIGxlZ2VuZCA9IGN1ckJhckdyYXBoLnN2Zy5hcHBlbmQoXCJnXCIpXHJcbiAgICAgIC5hdHRyKFwiZm9udC1mYW1pbHlcIiwgXCJzYW5zLXNlcmlmXCIpXHJcbiAgICAgIC5hdHRyKFwiZm9udC1zaXplXCIsIDgpXHJcbiAgICAgIC5hdHRyKFwidGV4dC1hbmNob3JcIiwgXCJlbmRcIilcclxuICAgICAgLnNlbGVjdEFsbChcImdcIilcclxuICAgICAgLmRhdGEoa2V5cy5zbGljZSgpLnJldmVyc2UoKSlcclxuICAgICAgLmVudGVyKCkuYXBwZW5kKFwiZ1wiKVxyXG4gICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBmdW5jdGlvbihkLCBpKSB7IHJldHVybiBcInRyYW5zbGF0ZSgwLFwiICsgaSAqIDEwICsgXCIpXCI7IH0pO1xyXG5cclxuICAgIGxlZ2VuZC5hcHBlbmQoXCJyZWN0XCIpXHJcbiAgICAgIC5hdHRyKFwieFwiLCB3aWR0aCAtIDEwMClcclxuICAgICAgLmF0dHIoXCJ3aWR0aFwiLCA4LjUpXHJcbiAgICAgIC5hdHRyKFwiaGVpZ2h0XCIsIDguNSlcclxuICAgICAgLmF0dHIoXCJmaWxsXCIsIHopO1xyXG5cclxufVxyXG4gIHJldHVybiB7XHJcbiAgICBoaWdobGlnaHQgOiBoaWdobGlnaHQsXHJcbiAgICBjcmVhdGVkR3JvdXBlZEJhckdyYXBoIDogY3JlYXRlZEdyb3VwZWRCYXJHcmFwaFxyXG4gIH1cclxufSkoKTtcclxuIiwiLy8gUmVxdWlyZWQgdG8gbGluZSB1cCBzY2F0dGVyIHBsb3QgZG90c1xyXG52YXIgd2hpc2tCb3hXaWR0aCA9IDE7XHJcblxyXG4oZnVuY3Rpb24oKSB7XHJcblxyXG4vLyBJbnNwaXJlZCBieSBodHRwOi8vaW5mb3JtYXRpb25hbmR2aXN1YWxpemF0aW9uLmRlL2Jsb2cvYm94LXBsb3RcclxuICAgIGQzLmJveCA9IGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICAgICB2YXIgaGVpZ2h0ID0gMSxcclxuICAgICAgICAgICAgZHVyYXRpb24gPSAwLFxyXG4gICAgICAgICAgICBkb21haW4gPSBudWxsLFxyXG4gICAgICAgICAgICB2YWx1ZSA9IE51bWJlcixcclxuICAgICAgICAgICAgd2hpc2tlcnMgPSBib3hXaGlza2VycyxcclxuICAgICAgICAgICAgcXVhcnRpbGVzID0gYm94UXVhcnRpbGVzLFxyXG4gICAgICAgICAgICBzaG93TGFiZWxzID0gdHJ1ZSwgLy8gd2hldGhlciBvciBub3QgdG8gc2hvdyB0ZXh0IGxhYmVsc1xyXG4gICAgICAgICAgICBudW1CYXJzID0gNCxcclxuICAgICAgICAgICAgY3VyQmFyID0gMSxcclxuICAgICAgICAgICAgdGlja0Zvcm1hdCA9IG51bGw7XHJcblxyXG4gICAgICAgIC8vIEZvciBlYWNoIHNtYWxsIG11bHRpcGxl4oCmXHJcbiAgICAgICAgZnVuY3Rpb24gYm94KGcpIHtcclxuICAgICAgICAgICAgZy5lYWNoKGZ1bmN0aW9uKGRhdGEsIGkpIHtcclxuICAgICAgICAgICAgICAgIHZhciBkID0gZGF0YVsxXS5zb3J0KGQzLmFzY2VuZGluZyk7IC8vIFNvcnRzIG9uIG9mIHRoZSBudW1iZXJzIGFycmF5c1xyXG5cclxuICAgICAgICAgICAgICAgIHZhciBnID0gZDMuc2VsZWN0KHRoaXMpLFxyXG4gICAgICAgICAgICAgICAgICAgIG4gPSBkLmxlbmd0aCxcclxuICAgICAgICAgICAgICAgICAgICBtaW4gPSBkWzBdLFxyXG4gICAgICAgICAgICAgICAgICAgIG1heCA9IGRbbiAtIDFdO1xyXG5cclxuXHJcbiAgICAgICAgICAgICAgICAvLyBDb21wdXRlIHF1YXJ0aWxlcy4gTXVzdCByZXR1cm4gZXhhY3RseSAzIGVsZW1lbnRzLlxyXG4gICAgICAgICAgICAgICAgdmFyIHF1YXJ0aWxlRGF0YSA9IGQucXVhcnRpbGVzID0gcXVhcnRpbGVzKGQpO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIENvbXB1dGUgd2hpc2tlcnMuIE11c3QgcmV0dXJuIGV4YWN0bHkgMiBlbGVtZW50cywgb3IgbnVsbC5cclxuICAgICAgICAgICAgICAgIHZhciB3aGlza2VySW5kaWNlcyA9IHdoaXNrZXJzICYmIHdoaXNrZXJzLmNhbGwodGhpcywgZCwgaSksXHJcbiAgICAgICAgICAgICAgICAgICAgd2hpc2tlckRhdGEgPSB3aGlza2VySW5kaWNlcyAmJiB3aGlza2VySW5kaWNlcy5tYXAoZnVuY3Rpb24oaSkgeyByZXR1cm4gZFtpXTsgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gQ29tcHV0ZSBvdXRsaWVycy4gSWYgbm8gd2hpc2tlcnMgYXJlIHNwZWNpZmllZCwgYWxsIGRhdGEgYXJlIFwib3V0bGllcnNcIi5cclxuICAgICAgICAgICAgICAgIC8vIFdlIGNvbXB1dGUgdGhlIG91dGxpZXJzIGFzIGluZGljZXMsIHNvIHRoYXQgd2UgY2FuIGpvaW4gYWNyb3NzIHRyYW5zaXRpb25zIVxyXG4gICAgICAgICAgICAgICAgdmFyIG91dGxpZXJJbmRpY2VzID0gd2hpc2tlckluZGljZXNcclxuICAgICAgICAgICAgICAgICAgICA/IGQzLnJhbmdlKDAsIHdoaXNrZXJJbmRpY2VzWzBdKS5jb25jYXQoZDMucmFuZ2Uod2hpc2tlckluZGljZXNbMV0gKyAxLCBuKSlcclxuICAgICAgICAgICAgICAgICAgICA6IGQzLnJhbmdlKG4pO1xyXG5cclxuXHJcbiAgICAgICAgICAgICAgICAvLyBDb21wdXRlIHRoZSBuZXcgeC1zY2FsZS5cclxuICAgICAgICAgICAgICAgIHZhciB4MSA9IGQzLnNjYWxlTGluZWFyKClcclxuICAgICAgICAgICAgICAgICAgICAuZG9tYWluKGRvbWFpbiAmJiBkb21haW4uY2FsbCh0aGlzLCBkLCBpKSB8fCBbbWluLCBtYXhdKVxyXG4gICAgICAgICAgICAgICAgICAgIC5yYW5nZShbaGVpZ2h0LCAwXSk7XHJcblxyXG5cclxuICAgICAgICAgICAgICAgIC8vIFJldHJpZXZlIHRoZSBvbGQgeC1zY2FsZSwgaWYgdGhpcyBpcyBhbiB1cGRhdGUuXHJcbiAgICAgICAgICAgICAgICB2YXIgeDAgPSB0aGlzLl9fY2hhcnRfXyB8fCBkMy5zY2FsZUxpbmVhcigpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5kb21haW4oWzAsIEluZmluaXR5XSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gLmRvbWFpbihbMCwgbWF4XSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgLnJhbmdlKHgxLnJhbmdlKCkpO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIFN0YXNoIHRoZSBuZXcgc2NhbGUuXHJcbiAgICAgICAgICAgICAgICB0aGlzLl9fY2hhcnRfXyA9IHgxO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIE5vdGU6IHRoZSBib3gsIG1lZGlhbiwgYW5kIGJveCB0aWNrIGVsZW1lbnRzIGFyZSBmaXhlZCBpbiBudW1iZXIsXHJcbiAgICAgICAgICAgICAgICAvLyBzbyB3ZSBvbmx5IGhhdmUgdG8gaGFuZGxlIGVudGVyIGFuZCB1cGRhdGUuIEluIGNvbnRyYXN0LCB0aGUgb3V0bGllcnNcclxuICAgICAgICAgICAgICAgIC8vIGFuZCBvdGhlciBlbGVtZW50cyBhcmUgdmFyaWFibGUsIHNvIHdlIG5lZWQgdG8gZXhpdCB0aGVtISBWYXJpYWJsZVxyXG4gICAgICAgICAgICAgICAgLy8gZWxlbWVudHMgYWxzbyBmYWRlIGluIGFuZCBvdXQuXHJcblxyXG4gICAgICAgICAgICAgICAgLy8gVXBkYXRlIGNlbnRlciBsaW5lOiB0aGUgdmVydGljYWwgbGluZSBzcGFubmluZyB0aGUgd2hpc2tlcnMuXHJcbiAgICAgICAgICAgICAgICB2YXIgY2VudGVyID0gZy5zZWxlY3RBbGwoXCJsaW5lLmNlbnRlclwiKVxyXG4gICAgICAgICAgICAgICAgICAgIC5kYXRhKHdoaXNrZXJEYXRhID8gW3doaXNrZXJEYXRhXSA6IFtdKTtcclxuXHJcbiAgICAgICAgICAgICAgICAvL3ZlcnRpY2FsIGxpbmVcclxuICAgICAgICAgICAgICAgIGNlbnRlci5lbnRlcigpLmluc2VydChcImxpbmVcIiwgXCJyZWN0XCIpXHJcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcImNlbnRlclwiKVxyXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKFwieDFcIiwgd2hpc2tCb3hXaWR0aCAvIDIpXHJcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoXCJ5MVwiLCBmdW5jdGlvbihkKSB7IHJldHVybiB4MChkWzBdKTsgfSlcclxuICAgICAgICAgICAgICAgICAgICAuYXR0cihcIngyXCIsIHdoaXNrQm94V2lkdGggLyAyKVxyXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKFwieTJcIiwgZnVuY3Rpb24oZCkgeyByZXR1cm4geDAoZFsxXSk7IH0pXHJcbiAgICAgICAgICAgICAgICAgICAgLnN0eWxlKFwib3BhY2l0eVwiLCAxZS02KVxyXG4gICAgICAgICAgICAgICAgICAgIC50cmFuc2l0aW9uKClcclxuICAgICAgICAgICAgICAgICAgICAuZHVyYXRpb24oZHVyYXRpb24pXHJcbiAgICAgICAgICAgICAgICAgICAgLnN0eWxlKFwib3BhY2l0eVwiLCAxKVxyXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKFwieTFcIiwgZnVuY3Rpb24oZCkgeyByZXR1cm4geDEoZFswXSk7IH0pXHJcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoXCJ5MlwiLCBmdW5jdGlvbihkKSB7IHJldHVybiB4MShkWzFdKTsgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgY2VudGVyLnRyYW5zaXRpb24oKVxyXG4gICAgICAgICAgICAgICAgICAgIC5kdXJhdGlvbihkdXJhdGlvbilcclxuICAgICAgICAgICAgICAgICAgICAuc3R5bGUoXCJvcGFjaXR5XCIsIDEpXHJcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoXCJ5MVwiLCBmdW5jdGlvbihkKSB7IHJldHVybiB4MShkWzBdKTsgfSlcclxuICAgICAgICAgICAgICAgICAgICAuYXR0cihcInkyXCIsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIHgxKGRbMV0pOyB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICBjZW50ZXIuZXhpdCgpLnRyYW5zaXRpb24oKVxyXG4gICAgICAgICAgICAgICAgICAgIC5kdXJhdGlvbihkdXJhdGlvbilcclxuICAgICAgICAgICAgICAgICAgICAuc3R5bGUoXCJvcGFjaXR5XCIsIDFlLTYpXHJcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoXCJ5MVwiLCBmdW5jdGlvbihkKSB7IHJldHVybiB4MShkWzBdKTsgfSlcclxuICAgICAgICAgICAgICAgICAgICAuYXR0cihcInkyXCIsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIHgxKGRbMV0pOyB9KVxyXG4gICAgICAgICAgICAgICAgICAgIC5yZW1vdmUoKTtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBVcGRhdGUgaW5uZXJxdWFydGlsZSBib3guXHJcbiAgICAgICAgICAgICAgICB2YXIgYm94ID0gZy5zZWxlY3RBbGwoXCJyZWN0LmJveFwiKVxyXG4gICAgICAgICAgICAgICAgICAgIC5kYXRhKFtxdWFydGlsZURhdGFdKTtcclxuXHJcbiAgICAgICAgICAgICAgICBib3guZW50ZXIoKS5hcHBlbmQoXCJyZWN0XCIpXHJcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcImJveFwiKVxyXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKFwieFwiLCAwKVxyXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKFwieVwiLCBmdW5jdGlvbihkKSB7cmV0dXJuIHgwKGRbMl0pOyB9KVxyXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKFwid2lkdGhcIiwgd2hpc2tCb3hXaWR0aClcclxuICAgICAgICAgICAgICAgICAgICAuYXR0cihcImhlaWdodFwiLCBmdW5jdGlvbihkKSB7IHJldHVybiB4MChkWzBdKSAtIHgwKGRbMl0pOyB9KVxyXG4gICAgICAgICAgICAgICAgICAgIC50cmFuc2l0aW9uKClcclxuICAgICAgICAgICAgICAgICAgICAuZHVyYXRpb24oZHVyYXRpb24pXHJcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoXCJ5XCIsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIHgxKGRbMl0pOyB9KVxyXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKFwiaGVpZ2h0XCIsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIHgxKGRbMF0pIC0geDEoZFsyXSk7IH0pO1xyXG5cclxuICAgICAgICAgICAgICAgIGJveC50cmFuc2l0aW9uKClcclxuICAgICAgICAgICAgICAgICAgICAuZHVyYXRpb24oZHVyYXRpb24pXHJcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoXCJ5XCIsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIHgxKGRbMl0pOyB9KVxyXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKFwiaGVpZ2h0XCIsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIHgxKGRbMF0pIC0geDEoZFsyXSk7IH0pO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIFVwZGF0ZSBtZWRpYW4gbGluZS5cclxuICAgICAgICAgICAgICAgIHZhciBtZWRpYW5MaW5lID0gZy5zZWxlY3RBbGwoXCJsaW5lLm1lZGlhblwiKVxyXG4gICAgICAgICAgICAgICAgICAgIC5kYXRhKFtxdWFydGlsZURhdGFbMV1dKTtcclxuXHJcblxyXG4gICAgICAgICAgICAgICAgbWVkaWFuTGluZS5lbnRlcigpLmFwcGVuZChcImxpbmVcIilcclxuICAgICAgICAgICAgICAgICAgICAuYXR0cihcImNsYXNzXCIsIFwibWVkaWFuXCIpXHJcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoXCJ4MVwiLCAwKVxyXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKFwieTFcIiwgeDApXHJcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoXCJ4MlwiLCB3aGlza0JveFdpZHRoKVxyXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKFwieTJcIiwgeDApXHJcbiAgICAgICAgICAgICAgICAgICAgLnRyYW5zaXRpb24oKVxyXG4gICAgICAgICAgICAgICAgICAgIC5kdXJhdGlvbihkdXJhdGlvbilcclxuICAgICAgICAgICAgICAgICAgICAuYXR0cihcInkxXCIsIHgxKVxyXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKFwieTJcIiwgeDEpO1xyXG5cclxuICAgICAgICAgICAgICAgIG1lZGlhbkxpbmUudHJhbnNpdGlvbigpXHJcbiAgICAgICAgICAgICAgICAgICAgLmR1cmF0aW9uKGR1cmF0aW9uKVxyXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKFwieTFcIiwgeDEpXHJcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoXCJ5MlwiLCB4MSk7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gVXBkYXRlIHdoaXNrZXJzLlxyXG4gICAgICAgICAgICAgICAgdmFyIHdoaXNrZXIgPSBnLnNlbGVjdEFsbChcImxpbmUud2hpc2tlclwiKVxyXG4gICAgICAgICAgICAgICAgICAgIC5kYXRhKHdoaXNrZXJEYXRhIHx8IFtdKTtcclxuXHJcblxyXG4gICAgICAgICAgICAgICAgd2hpc2tlci5lbnRlcigpLmluc2VydChcImxpbmVcIiwgXCJjaXJjbGUsIHRleHRcIilcclxuICAgICAgICAgICAgICAgICAgICAuYXR0cihcImNsYXNzXCIsIFwid2hpc2tlclwiKVxyXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKFwieDFcIiwgMClcclxuICAgICAgICAgICAgICAgICAgICAuYXR0cihcInkxXCIsIHgwKVxyXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKFwieDJcIiwgMCArIHdoaXNrQm94V2lkdGgpXHJcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoXCJ5MlwiLCB4MClcclxuICAgICAgICAgICAgICAgICAgICAuc3R5bGUoXCJvcGFjaXR5XCIsIDFlLTYpXHJcbiAgICAgICAgICAgICAgICAgICAgLnRyYW5zaXRpb24oKVxyXG4gICAgICAgICAgICAgICAgICAgIC5kdXJhdGlvbihkdXJhdGlvbilcclxuICAgICAgICAgICAgICAgICAgICAuYXR0cihcInkxXCIsIHgxKVxyXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKFwieTJcIiwgeDEpXHJcbiAgICAgICAgICAgICAgICAgICAgLnN0eWxlKFwib3BhY2l0eVwiLCAxKTtcclxuXHJcbiAgICAgICAgICAgICAgICB3aGlza2VyLnRyYW5zaXRpb24oKVxyXG4gICAgICAgICAgICAgICAgICAgIC5kdXJhdGlvbihkdXJhdGlvbilcclxuICAgICAgICAgICAgICAgICAgICAuYXR0cihcInkxXCIsIHgxKVxyXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKFwieTJcIiwgeDEpXHJcbiAgICAgICAgICAgICAgICAgICAgLnN0eWxlKFwib3BhY2l0eVwiLCAxKTtcclxuXHJcbiAgICAgICAgICAgICAgICB3aGlza2VyLmV4aXQoKS50cmFuc2l0aW9uKClcclxuICAgICAgICAgICAgICAgICAgICAuZHVyYXRpb24oZHVyYXRpb24pXHJcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoXCJ5MVwiLCB4MSlcclxuICAgICAgICAgICAgICAgICAgICAuYXR0cihcInkyXCIsIHgxKVxyXG4gICAgICAgICAgICAgICAgICAgIC5zdHlsZShcIm9wYWNpdHlcIiwgMWUtNilcclxuICAgICAgICAgICAgICAgICAgICAucmVtb3ZlKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gVXBkYXRlIG91dGxpZXJzLlxyXG4gICAgICAgICAgICAgICAgdmFyIG91dGxpZXIgPSBnLnNlbGVjdEFsbChcImNpcmNsZS5vdXRsaWVyXCIpXHJcbiAgICAgICAgICAgICAgICAgICAgLmRhdGEob3V0bGllckluZGljZXMsIE51bWJlcik7XHJcblxyXG4gICAgICAgICAgICAgICAgb3V0bGllci5lbnRlcigpLmluc2VydChcImNpcmNsZVwiLCBcInRleHRcIilcclxuICAgICAgICAgICAgICAgICAgICAuYXR0cihcImNsYXNzXCIsIFwib3V0bGllclwiKVxyXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKFwiclwiLCAyKVxyXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKFwiY3hcIiwgd2hpc2tCb3hXaWR0aCAvIDIpXHJcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoXCJjeVwiLCBmdW5jdGlvbihpKSB7IHJldHVybiB4MChkW2ldKTsgfSlcclxuICAgICAgICAgICAgICAgICAgICAuc3R5bGUoXCJvcGFjaXR5XCIsIDFlLTYpXHJcbiAgICAgICAgICAgICAgICAgICAgLnRyYW5zaXRpb24oKVxyXG4gICAgICAgICAgICAgICAgICAgIC5kdXJhdGlvbihkdXJhdGlvbilcclxuICAgICAgICAgICAgICAgICAgICAuYXR0cihcImN5XCIsIGZ1bmN0aW9uKGkpIHsgcmV0dXJuIHgxKGRbaV0pOyB9KVxyXG4gICAgICAgICAgICAgICAgICAgIC5zdHlsZShcIm9wYWNpdHlcIiwgMSk7XHJcblxyXG4gICAgICAgICAgICAgICAgb3V0bGllci50cmFuc2l0aW9uKClcclxuICAgICAgICAgICAgICAgICAgICAuZHVyYXRpb24oZHVyYXRpb24pXHJcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoXCJjeVwiLCBmdW5jdGlvbihpKSB7IHJldHVybiB4MShkW2ldKTsgfSlcclxuICAgICAgICAgICAgICAgICAgICAuc3R5bGUoXCJvcGFjaXR5XCIsIDEpO1xyXG5cclxuICAgICAgICAgICAgICAgIG91dGxpZXIuZXhpdCgpLnRyYW5zaXRpb24oKVxyXG4gICAgICAgICAgICAgICAgICAgIC5kdXJhdGlvbihkdXJhdGlvbilcclxuICAgICAgICAgICAgICAgICAgICAuYXR0cihcImN5XCIsIGZ1bmN0aW9uKGkpIHsgcmV0dXJuIHgxKGRbaV0pOyB9KVxyXG4gICAgICAgICAgICAgICAgICAgIC5zdHlsZShcIm9wYWNpdHlcIiwgMWUtNilcclxuICAgICAgICAgICAgICAgICAgICAucmVtb3ZlKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gQ29tcHV0ZSB0aGUgdGljayBmb3JtYXQuXHJcbiAgICAgICAgICAgICAgICB2YXIgZm9ybWF0ID0gdGlja0Zvcm1hdCB8fCB4MS50aWNrRm9ybWF0KDgpO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIFVwZGF0ZSBib3ggdGlja3MuXHJcbiAgICAgICAgICAgICAgICB2YXIgYm94VGljayA9IGcuc2VsZWN0QWxsKFwidGV4dC5ib3hcIilcclxuICAgICAgICAgICAgICAgICAgICAuZGF0YShxdWFydGlsZURhdGEpO1xyXG4gICAgICAgICAgICAgICAgaWYoc2hvd0xhYmVscyA9PSB0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYm94VGljay5lbnRlcigpLmFwcGVuZChcInRleHRcIilcclxuICAgICAgICAgICAgICAgICAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcImJveFwiKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAuYXR0cihcImR5XCIsIFwiLjNlbVwiKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAuYXR0cihcImR4XCIsIGZ1bmN0aW9uKGQsIGkpIHsgcmV0dXJuIGkgJiAxID8gNiA6IC02IH0pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKFwieFwiLCBmdW5jdGlvbihkLCBpKSB7IHJldHVybiBpICYgMSA/ICArIHdoaXNrQm94V2lkdGggOiAwIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKFwieVwiLCB4MClcclxuICAgICAgICAgICAgICAgICAgICAgICAgLmF0dHIoXCJ0ZXh0LWFuY2hvclwiLCBmdW5jdGlvbihkLCBpKSB7IHJldHVybiBpICYgMSA/IFwic3RhcnRcIiA6IFwiZW5kXCI7IH0pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC50ZXh0KGZvcm1hdClcclxuICAgICAgICAgICAgICAgICAgICAgICAgLnRyYW5zaXRpb24oKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAuZHVyYXRpb24oZHVyYXRpb24pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKFwieVwiLCB4MSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgYm94VGljay50cmFuc2l0aW9uKClcclxuICAgICAgICAgICAgICAgICAgICAuZHVyYXRpb24oZHVyYXRpb24pXHJcbiAgICAgICAgICAgICAgICAgICAgLnRleHQoZm9ybWF0KVxyXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKFwieVwiLCB4MSk7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gVXBkYXRlIHdoaXNrZXIgdGlja3MuIFRoZXNlIGFyZSBoYW5kbGVkIHNlcGFyYXRlbHkgZnJvbSB0aGUgYm94XHJcbiAgICAgICAgICAgICAgICAvLyB0aWNrcyBiZWNhdXNlIHRoZXkgbWF5IG9yIG1heSBub3QgZXhpc3QsIGFuZCB3ZSB3YW50IGRvbid0IHdhbnRcclxuICAgICAgICAgICAgICAgIC8vIHRvIGpvaW4gYm94IHRpY2tzIHByZS10cmFuc2l0aW9uIHdpdGggd2hpc2tlciB0aWNrcyBwb3N0LS5cclxuICAgICAgICAgICAgICAgIHZhciB3aGlza2VyVGljayA9IGcuc2VsZWN0QWxsKFwidGV4dC53aGlza2VyXCIpXHJcbiAgICAgICAgICAgICAgICAgICAgLmRhdGEod2hpc2tlckRhdGEgfHwgW10pO1xyXG4gICAgICAgICAgICAgICAgaWYoc2hvd0xhYmVscyA9PSB0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgd2hpc2tlclRpY2suZW50ZXIoKS5hcHBlbmQoXCJ0ZXh0XCIpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJ3aGlza2VyXCIpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKFwiZHlcIiwgXCIuM2VtXCIpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKFwiZHhcIiwgNilcclxuICAgICAgICAgICAgICAgICAgICAgICAgLmF0dHIoXCJ4XCIsIHdoaXNrQm94V2lkdGgpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKFwieVwiLCB4MClcclxuICAgICAgICAgICAgICAgICAgICAgICAgLnRleHQoZm9ybWF0KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAuc3R5bGUoXCJvcGFjaXR5XCIsIDFlLTYpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC50cmFuc2l0aW9uKClcclxuICAgICAgICAgICAgICAgICAgICAgICAgLmR1cmF0aW9uKGR1cmF0aW9uKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAuYXR0cihcInlcIiwgeDEpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5zdHlsZShcIm9wYWNpdHlcIiwgMSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB3aGlza2VyVGljay50cmFuc2l0aW9uKClcclxuICAgICAgICAgICAgICAgICAgICAuZHVyYXRpb24oZHVyYXRpb24pXHJcbiAgICAgICAgICAgICAgICAgICAgLnRleHQoZm9ybWF0KVxyXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKFwieVwiLCB4MSlcclxuICAgICAgICAgICAgICAgICAgICAuc3R5bGUoXCJvcGFjaXR5XCIsIDEpO1xyXG5cclxuICAgICAgICAgICAgICAgIHdoaXNrZXJUaWNrLmV4aXQoKS50cmFuc2l0aW9uKClcclxuICAgICAgICAgICAgICAgICAgICAuZHVyYXRpb24oZHVyYXRpb24pXHJcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoXCJ5XCIsIHgxKVxyXG4gICAgICAgICAgICAgICAgICAgIC5zdHlsZShcIm9wYWNpdHlcIiwgMWUtNilcclxuICAgICAgICAgICAgICAgICAgICAucmVtb3ZlKCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBkMy50aW1lckZsdXNoKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBib3gud2lkdGggPSBmdW5jdGlvbih4KSB7XHJcbiAgICAgICAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHdoaXNrQm94V2lkdGg7XHJcbiAgICAgICAgICAgIHdoaXNrQm94V2lkdGggPSB4O1xyXG4gICAgICAgICAgICByZXR1cm4gYm94O1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIGJveC5oZWlnaHQgPSBmdW5jdGlvbih4KSB7XHJcbiAgICAgICAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIGhlaWdodDtcclxuICAgICAgICAgICAgaGVpZ2h0ID0geDtcclxuICAgICAgICAgICAgcmV0dXJuIGJveDtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBib3gudGlja0Zvcm1hdCA9IGZ1bmN0aW9uKHgpIHtcclxuICAgICAgICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gdGlja0Zvcm1hdDtcclxuICAgICAgICAgICAgdGlja0Zvcm1hdCA9IHg7XHJcbiAgICAgICAgICAgIHJldHVybiBib3g7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgYm94LmR1cmF0aW9uID0gZnVuY3Rpb24oeCkge1xyXG4gICAgICAgICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBkdXJhdGlvbjtcclxuICAgICAgICAgICAgZHVyYXRpb24gPSB4O1xyXG4gICAgICAgICAgICByZXR1cm4gYm94O1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIGQzLmZ1bmN0b3IgPSBmdW5jdGlvbiBmdW5jdG9yKHYpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHR5cGVvZiB2ID09PSBcImZ1bmN0aW9uXCIgPyB2IDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdjtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9O1xyXG5cclxuXHJcbiAgICAgICAgYm94LmRvbWFpbiA9IGZ1bmN0aW9uKHgpIHtcclxuICAgICAgICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gZG9tYWluO1xyXG4gICAgICAgICAgICBkb21haW4gPSB4ID09PSBudWxsID8geCA6IGQzLmZ1bmN0b3IoeCk7XHJcbiAgICAgICAgICAgIHJldHVybiBib3g7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgYm94LnZhbHVlID0gZnVuY3Rpb24oeCkge1xyXG4gICAgICAgICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiB2YWx1ZTtcclxuICAgICAgICAgICAgdmFsdWUgPSB4O1xyXG4gICAgICAgICAgICByZXR1cm4gYm94O1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIGJveC53aGlza2VycyA9IGZ1bmN0aW9uKHgpIHtcclxuICAgICAgICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gd2hpc2tlcnM7XHJcbiAgICAgICAgICAgIHdoaXNrZXJzID0geDtcclxuICAgICAgICAgICAgcmV0dXJuIGJveDtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBib3guc2hvd0xhYmVscyA9IGZ1bmN0aW9uKHgpIHtcclxuICAgICAgICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gc2hvd0xhYmVscztcclxuICAgICAgICAgICAgc2hvd0xhYmVscyA9IHg7XHJcbiAgICAgICAgICAgIHJldHVybiBib3g7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgYm94LnF1YXJ0aWxlcyA9IGZ1bmN0aW9uKHgpIHtcclxuICAgICAgICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gcXVhcnRpbGVzO1xyXG4gICAgICAgICAgICBxdWFydGlsZXMgPSB4O1xyXG4gICAgICAgICAgICByZXR1cm4gYm94O1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHJldHVybiBib3g7XHJcbiAgICB9O1xyXG5cclxuICAgIGZ1bmN0aW9uIGJveFdoaXNrZXJzKGQpIHtcclxuICAgICAgICByZXR1cm4gWzAsIGQubGVuZ3RoIC0gMV07XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gYm94UXVhcnRpbGVzKGQpIHtcclxuICAgICAgICByZXR1cm4gW1xyXG4gICAgICAgICAgICBkMy5xdWFudGlsZShkLCAuMjUpLFxyXG4gICAgICAgICAgICBkMy5xdWFudGlsZShkLCAuNSksXHJcbiAgICAgICAgICAgIGQzLnF1YW50aWxlKGQsIC43NSlcclxuICAgICAgICBdO1xyXG4gICAgfVxyXG5cclxufSkoKTtcclxuIiwidmFyIEJveFBsb3RNb2R1bGUgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyIGxhYmVscyA9IGZhbHNlOyAvLyBzaG93IHRoZSB0ZXh0IGxhYmVscyBiZXNpZGUgaW5kaXZpZHVhbCBib3hwbG90cz9cclxuXHJcbi8vIE1hcmdpbnMgYW5kIGdyYXBoIHdpZHRoIC8gaGVpZ2h0XHJcbnZhciBib3hNYXJnaW4gPSB7dG9wOiAzMCwgcmlnaHQ6IDUwLCBib3R0b206IDEwMCwgbGVmdDogNTB9LFxyXG4gICAgIGJveFdpZHRoID0gMTIwMCAtIGJveE1hcmdpbi5sZWZ0IC0gYm94TWFyZ2luLnJpZ2h0LFxyXG4gICAgIGJveEhlaWdodCA9IDcwMCAgLSBib3hNYXJnaW4udG9wICAtIGJveE1hcmdpbi5ib3R0b207XHJcblxyXG5cclxuLy8gRW5jYXBzdWxhdGUgYWxsIHByb3BlcnRpZXMgb2YgZ3JhcGhcclxuICAgIHZhciBwbG90cyA9IFtdO1xyXG5cclxuLy8gT2JqZWN0IHRvIGhvbGQgdGhlIHZhbHVlcyBmb3IgZWFjaCBpbmRpdmlkdWFsIGJveHBsb3RcclxuICAgIGZ1bmN0aW9uIEJveFBsb3REYXRhKHgseSx4QXhpcyx5QXhpcyxzdmcsY2hhcnQsY3JlYXRlZCwgaWQpe1xyXG4gICAgICAgIHRoaXMueCA9IHg7XHJcbiAgICAgICAgdGhpcy55ID0geTtcclxuICAgICAgICB0aGlzLnhBeGlzID0geEF4aXM7XHJcbiAgICAgICAgdGhpcy55QXhpcyA9IHlBeGlzO1xyXG4gICAgICAgIHRoaXMuc3ZnID0gc3ZnO1xyXG4gICAgICAgIHRoaXMuY2hhcnQgPSBjaGFydDtcclxuICAgICAgICB0aGlzLmNyZWF0ZWQgPSBjcmVhdGVkO1xyXG4gICAgICAgIHRoaXMuaWQgPSBpZFxyXG4gICAgfVxyXG5cclxuXHJcbi8vIENyZWF0ZSBhIGJveCBwbG90IGdyYXBoIHdpdGggdGhlIGRhdGFPYmplY3QgYW5kIHBsYWNlIGl0IGluIHRoZSBkaXYgd2l0aCBkaXZJRCB1bml0IGZvciB0aGUgdGhlIHkgLSBheGlzXHJcbiAgICBmdW5jdGlvbiBjcmVhdGVCb3hQbG90KGRhdGFPYmplY3QsZGl2SUQsdW5pdCl7XHJcbiAgICAgICAgdmFyIGJveFBsb3RPYmplY3RzID0gbnVsbDtcclxuICAgICAgICB2YXIgZGF0YSA9IGRhdGFPYmplY3QuZGF0YTtcclxuICAgICAgICB2YXIgbWluID0gZGF0YU9iamVjdC5taW47XHJcbiAgICAgICAgdmFyIG1heCA9IGRhdGFPYmplY3QubWF4O1xyXG4gICAgICAgIHZhciBzY2F0dGVyRGF0YSA9IGRhdGFPYmplY3Quc2NhdHRlckRhdGE7XHJcblxyXG4gICAgICAgIC8vIEZpbmQgdGhlIHBsb3QgdGhhdCBuZWVkcyB0byBiZSB1cGRhdGVkIG9yIGNyZWF0ZWRcclxuICAgICAgICBwbG90cy5mb3JFYWNoKGZ1bmN0aW9uIChwbG90KSB7XHJcbiAgICAgICAgICAgIGlmKHBsb3QuaWQgPT09IGRpdklEKXtcclxuICAgICAgICAgICAgICAgIGJveFBsb3RPYmplY3RzID0gcGxvdDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAvLyBUaGUgZ3JhcGggaGFzIG5vdCBiZWVuIGNyZWF0ZWQgeWV0XHJcbiAgICAgICAgaWYoYm94UGxvdE9iamVjdHMgPT09IG51bGwpe1xyXG4gICAgICAgICAgICB2YXIgeCA9IGQzLnNjYWxlQmFuZCgpLnJhbmdlUm91bmQoWzAsIGJveFdpZHRoXSkucGFkZGluZygwLjcsMC4zKTtcclxuICAgICAgICAgICAgYm94UGxvdE9iamVjdHMgPSBuZXcgQm94UGxvdERhdGEoeCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsZmFsc2UsZGl2SUQpO1xyXG4gICAgICAgICAgICBwbG90cy5wdXNoKGJveFBsb3RPYmplY3RzKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBkMy5zZWxlY3QoZGl2SUQrJyBzdmcnKS5yZW1vdmUoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIHRoZSB5LWF4aXNcclxuICAgICAgICBib3hQbG90T2JqZWN0cy55ID0gZDMuc2NhbGVMaW5lYXIoKVxyXG4gICAgICAgICAgLmRvbWFpbihbbWluLCBtYXhdKS5uaWNlKClcclxuICAgICAgICAgIC5yYW5nZShbYm94SGVpZ2h0ICsgYm94TWFyZ2luLnRvcCwgMCArIGJveE1hcmdpbi50b3BdKTtcclxuXHJcbiAgICAgICAgYm94UGxvdE9iamVjdHMuY2hhcnQgPSBkMy5ib3goKVxyXG4gICAgICAgICAgLndoaXNrZXJzKGlxcigxLjUpKVxyXG4gICAgICAgICAgLmhlaWdodChib3hIZWlnaHQpXHJcbiAgICAgICAgICAuZG9tYWluKGJveFBsb3RPYmplY3RzLnkuZG9tYWluKCkpXHJcbiAgICAgICAgICAuc2hvd0xhYmVscyhsYWJlbHMpO1xyXG5cclxuXHJcbiAgICBib3hQbG90T2JqZWN0cy5zdmcgPSBkMy5zZWxlY3QoZGl2SUQpLmFwcGVuZChcInN2Z1wiKVxyXG4gICAgICAgICAgICAgLmF0dHIoXCJ3aWR0aFwiLCBib3hXaWR0aCArIGJveE1hcmdpbi5sZWZ0ICsgYm94TWFyZ2luLnJpZ2h0KVxyXG4gICAgICAgICAgICAgLmF0dHIoXCJoZWlnaHRcIiwgYm94SGVpZ2h0ICsgYm94TWFyZ2luLnRvcCArIGJveE1hcmdpbi5ib3R0b20pXHJcbiAgICAgICAgICAgICAuYXR0cihcImNsYXNzXCIsIFwiYm94XCIpXHJcbiAgICAgICAgICAgICAuYXBwZW5kKFwiZ1wiKVxyXG4gICAgICAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgXCJ0cmFuc2xhdGUoXCIgKyBib3hNYXJnaW4ubGVmdCArIFwiLFwiICsgYm94TWFyZ2luLnRvcCArIFwiKVwiKTtcclxuXHJcbiAgICAgICAgYm94UGxvdE9iamVjdHMueC5kb21haW4oIGRhdGEubWFwKGZ1bmN0aW9uKGQpIHtyZXR1cm4gZFswXSB9ICkgKTtcclxuICAgICAgICBib3hQbG90T2JqZWN0cy54QXhpcyA9IGQzLmF4aXNCb3R0b20oYm94UGxvdE9iamVjdHMueCk7XHJcbiAgICAgICAgYm94UGxvdE9iamVjdHMueUF4aXMgPSBkMy5heGlzTGVmdChib3hQbG90T2JqZWN0cy55KTtcclxuXHJcbiAgICAgICAgYm94UGxvdE9iamVjdHMuc3ZnLnNlbGVjdEFsbChcIi5ib3hcIilcclxuICAgICAgICAgIC5kYXRhKGRhdGEpXHJcbiAgICAgICAgICAuZW50ZXIoKS5hcHBlbmQoXCJnXCIpXHJcbiAgICAgICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBmdW5jdGlvbihkKSB7IHJldHVybiBcInRyYW5zbGF0ZShcIiArICBib3hQbG90T2JqZWN0cy54KGRbMF0pICArIFwiLFwiICsgYm94TWFyZ2luLnRvcCArIFwiKVwiOyB9IClcclxuICAgICAgICAgIC5jYWxsKGJveFBsb3RPYmplY3RzLmNoYXJ0LndpZHRoKGJveFBsb3RPYmplY3RzLnguYmFuZHdpZHRoKCkpKTsgLy9WNCBVcGRhdGVkXHJcblxyXG4gICAgICAgIC8vIGRyYXcgdGhlIGJveHBsb3RzXHJcbiAgICAgICAgYm94UGxvdE9iamVjdHMuc3ZnLnNlbGVjdEFsbChcIi5ib3hcIilcclxuICAgICAgICAgIC5kYXRhKGRhdGEpXHJcbiAgICAgICAgICAuZW50ZXIoKS5hcHBlbmQoXCJnXCIpXHJcbiAgICAgICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBmdW5jdGlvbihkKSB7IHJldHVybiBcInRyYW5zbGF0ZShcIiArICBib3hQbG90T2JqZWN0cy54KGRbMF0pICArIFwiLFwiICsgYm94TWFyZ2luLnRvcCArIFwiKVwiOyB9IClcclxuICAgICAgICAgIC5jYWxsKGJveFBsb3RPYmplY3RzLmNoYXJ0LndpZHRoKGJveFBsb3RPYmplY3RzLnguYmFuZHdpZHRoKCkpKTsgLy9WNCBVcGRhdGVkXHJcblxyXG4gICAgICAgIC8vIFRoZSBmb3JtYXQgdG8gZGlzcGxheSB0aGUgdmFsdWVzIGluXHJcbiAgICAgICAgdmFyIGRwRm9ybWF0ID0gZDMuZm9ybWF0KFwiLjJmXCIpO1xyXG5cclxuICAgICAgICAvLyBDcmVhdGUgdGhlIHRpcCB0byBzaG93IHVwIG9uIGhvdmVyXHJcbiAgICAgICAgdmFyIHRpcCA9IGQzLnRpcCgpXHJcbiAgICAgICAgICAuYXR0cignY2xhc3MnLCAnZDMtdGlwJylcclxuICAgICAgICAgIC5vZmZzZXQoWy0xMCwgMF0pXHJcbiAgICAgICAgICAuaHRtbChmdW5jdGlvbihkKSB7XHJcbiAgICAgICAgICAgICAgcmV0dXJuIFwiPHN0cm9uZz5WYWx1ZTo8L3N0cm9uZz4gPHNwYW4gc3R5bGU9J2NvbG9yOmxpZ2h0Z3JlZW4nPlwiICsgZHBGb3JtYXQoZC52YWx1ZSkgKyBcIjwvc3Bhbj48YnI+PGJyPjxzdHJvbmc+RURCOjwvc3Ryb25nPiA8c3BhbiBzdHlsZT0nY29sb3I6bGlnaHRncmVlbic+XCIgKyBkLmVkYiArIFwiPC9zcGFuPlwiO1xyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgYm94UGxvdE9iamVjdHMuc3ZnLmNhbGwodGlwKTtcclxuXHJcbiAgICAgICAgLy8gQWRkIHRoZSBkb3RzIGZvciB0aGUgc2NhdGVycGxvdCBvbiB0b3Agb2YgdGhlIGJveCBhbmQgd2hpc2tlclxyXG4gICAgICAgIGJveFBsb3RPYmplY3RzLnN2Zy5zZWxlY3RBbGwoXCIuZG90XCIpXHJcbiAgICAgICAgICAuZGF0YShzY2F0dGVyRGF0YSlcclxuICAgICAgICAgIC5lbnRlcigpLmFwcGVuZChcImNpcmNsZVwiKVxyXG4gICAgICAgICAgLmF0dHIoXCJjbGFzc1wiLGZ1bmN0aW9uKGQpe3JldHVybiBcImRvdCBcIitkLmVkYi5yZXBsYWNlKC8gL2cgLCBcIlwiKTt9KVxyXG4gICAgICAgICAgLmF0dHIoXCJyXCIsIDQpXHJcbiAgICAgICAgICAuYXR0cihcImN4XCIsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIGJveFBsb3RPYmplY3RzLngoZC55ZWFyKSArIHdoaXNrQm94V2lkdGgvMjsgfSlcclxuICAgICAgICAgIC5hdHRyKFwiY3lcIiwgZnVuY3Rpb24oZCkgeyByZXR1cm4gYm94UGxvdE9iamVjdHMueShkLnZhbHVlKTsgfSlcclxuICAgICAgICAgIC5vbignbW91c2VvdmVyJywgdGlwLnNob3cpXHJcbiAgICAgICAgICAub24oJ21vdXNlb3V0JywgdGlwLmhpZGUpO1xyXG5cclxuICAgICAgICAvLyBkcmF3IHkgYXhpc1xyXG4gICAgICAgIGJveFBsb3RPYmplY3RzLnN2Zy5hcHBlbmQoXCJnXCIpXHJcbiAgICAgICAgICAuYXR0cihcImNsYXNzXCIsIFwieUF4aXMgeSBheGlzXCIpXHJcbiAgICAgICAgICAuY2FsbChib3hQbG90T2JqZWN0cy55QXhpcylcclxuICAgICAgICAgIC5hcHBlbmQoXCJ0ZXh0XCIpXHJcbiAgICAgICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBcInJvdGF0ZSgtOTApXCIpXHJcbiAgICAgICAgICAuYXR0cihcImNsYXNzXCIsIFwiYXhpcy10ZXh0LXNjYWxlZFwiKVxyXG4gICAgICAgICAgLnN0eWxlKFwidGV4dC1hbmNob3JcIiwgXCJlbmRcIik7XHJcblxyXG4gICAgICAgIHZhciBtYXh3ID0gMDtcclxuICAgICAgICBib3hQbG90T2JqZWN0cy5zdmcuc2VsZWN0KCcueUF4aXMnKS5zZWxlY3RBbGwoJ3RleHQnKS5lYWNoKGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICBpZiAodGhpcy5nZXRCQm94KCkud2lkdGggPiBtYXh3KSBtYXh3ID0gdGhpcy5nZXRCQm94KCkud2lkdGg7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGJveFBsb3RPYmplY3RzLnN2Zy5hdHRyKFwidHJhbnNmb3JtXCIsXCJ0cmFuc2xhdGUoXCIgKyAoIGJveE1hcmdpbi5sZWZ0K21heHcpICsgXCIsXCIgKyBib3hNYXJnaW4udG9wICsgXCIpXCIpOyAvLyBtb3ZlcyBieSBhIHggYW5kIHkgdmFsdWUgaW4gdGhpcyBjYXNlIHRoZSBiYXJNYXJnaW5zXHJcblxyXG5cclxuICAgICAgICAvLyBkcmF3IHggYXhpc1xyXG4gICAgICAgIGJveFBsb3RPYmplY3RzLnN2Zy5hcHBlbmQoXCJnXCIpXHJcbiAgICAgICAgICAuYXR0cihcImNsYXNzXCIsIFwieEF4aXMgYXhpc1wiKVxyXG4gICAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgXCJ0cmFuc2xhdGUoMCxcIiArIChib3hIZWlnaHQgKyBib3hNYXJnaW4udG9wICArIDEwKSArIFwiKVwiKVxyXG4gICAgICAgICAgLmNhbGwoYm94UGxvdE9iamVjdHMueEF4aXMpICAgICAgICAgIFxyXG4gICAgICAgICAgLmFwcGVuZChcInRleHRcIilcclxuICAgICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJheGlzLXRleHQtc2NhbGVkXCIpXHJcbiAgICAgICAgICAuc3R5bGUoXCJ0ZXh0LWFuY2hvclwiLCBcImVuZFwiKTtcclxuXHJcbiAgICAgICAgLy8gQWRkIHRoZSB5IGF4aXMgdW5pdFxyXG4gICAgICAgIGJveFBsb3RPYmplY3RzLnN2Zy5hcHBlbmQoXCJ0ZXh0XCIpXHJcbiAgICAgICAgICAuYXR0cihcInRleHQtYW5jaG9yXCIsIFwibWlkZGxlXCIpICAvLyB0aGlzIG1ha2VzIGl0IGVhc3kgdG8gY2VudHJlIHRoZSB0ZXh0IGFzIHRoZSB0cmFuc2Zvcm0gaXMgYXBwbGllZCB0byB0aGUgYW5jaG9yXHJcbiAgICAgICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBcInRyYW5zbGF0ZShcIisgLShtYXh3ICsgMjApICtcIixcIisoYm94SGVpZ2h0LzIpK1wiKXJvdGF0ZSgtOTApXCIpICAvLyB0ZXh0IGlzIGRyYXduIG9mZiB0aGUgc2NyZWVuIHRvcCBsZWZ0LCBtb3ZlIGRvd24gYW5kIG91dCBhbmQgcm90YXRlXHJcbiAgICAgICAgICAuYXR0cihcImNsYXNzXCIsIFwidW5pdC10ZXh0LXNjYWxlZFwiKVxyXG4gICAgICAgICAgLnRleHQodW5pdCk7XHJcblxyXG4gICAgICAgIC8vIEFkZCB5ZWFyIGFzIHRoZSB4LWF4aXMgbGFiZWxcclxuICAgICAgICBib3hQbG90T2JqZWN0cy5zdmcuYXBwZW5kKFwidGV4dFwiKVxyXG4gICAgICAgICAgLmF0dHIoXCJ0ZXh0LWFuY2hvclwiLCBcIm1pZGRsZVwiKSAgLy8gdGhpcyBtYWtlcyBpdCBlYXN5IHRvIGNlbnRyZSB0aGUgdGV4dCBhcyB0aGUgdHJhbnNmb3JtIGlzIGFwcGxpZWQgdG8gdGhlIGFuY2hvclxyXG4gICAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgXCJ0cmFuc2xhdGUoXCIrICsoYm94V2lkdGgvMikgK1wiLFwiKyggYm94TWFyZ2luLnRvcCArIDQwICsgYm94SGVpZ2h0KStcIilcIikgIC8vIHRleHQgaXMgZHJhd24gb2ZmIHRoZSBzY3JlZW4gdG9wIGxlZnQsIG1vdmUgZG93biBhbmQgb3V0IGFuZCByb3RhdGVcclxuICAgICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJ1bml0LXRleHQtc2NhbGVkXCIpXHJcbiAgICAgICAgICAudGV4dChcIlllYXJcIik7XHJcblxyXG4gICAgICAgIGJveFBsb3RPYmplY3RzLmNyZWF0ZWQgPSB0cnVlOyAvLyBTZXQgdGhlIHBsb3QgdG8gY3JlYXRlZCBmb3IgdGhlIElEXHJcbiAgICB9XHJcblxyXG5cclxuLy8gUmV0dXJucyBhIGZ1bmN0aW9uIHRvIGNvbXB1dGUgdGhlIGludGVycXVhcnRpbGUgcmFuZ2UuXHJcbiAgICBmdW5jdGlvbiBpcXIoaykge1xyXG4gICAgICAgIHJldHVybiBmdW5jdGlvbihkLCBpKSB7XHJcbiAgICAgICAgICAgIHZhciBxMSA9IGQucXVhcnRpbGVzWzBdLFxyXG4gICAgICAgICAgICAgIHEzID0gZC5xdWFydGlsZXNbMl0sXHJcbiAgICAgICAgICAgICAgaXFyID0gKHEzIC0gcTEpICogayxcclxuICAgICAgICAgICAgICBpID0gLTEsXHJcbiAgICAgICAgICAgICAgaiA9IGQubGVuZ3RoO1xyXG4gICAgICAgICAgICB3aGlsZSAoZFsrK2ldIDwgcTEgLSBpcXIpO1xyXG4gICAgICAgICAgICB3aGlsZSAoZFstLWpdID4gcTMgKyBpcXIpO1xyXG4gICAgICAgICAgICByZXR1cm4gW2ksIGpdO1xyXG4gICAgICAgIH07XHJcbiAgICB9XHJcblxyXG5cclxuXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIGNyZWF0ZUJveFBsb3QgOiBjcmVhdGVCb3hQbG90XHJcbiAgICB9XHJcbn0pKCk7XHJcbiIsIi8vIGQzLnRpcFxuLy8gQ29weXJpZ2h0IChjKSAyMDEzIEp1c3RpbiBQYWxtZXJcbi8vIEVTNiAvIEQzIHY0IEFkYXB0aW9uIENvcHlyaWdodCAoYykgMjAxNiBDb25zdGFudGluIEdhdnJpbGV0ZVxuLy8gUmVtb3ZhbCBvZiBFUzYgZm9yIEQzIHY0IEFkYXB0aW9uIENvcHlyaWdodCAoYykgMjAxNiBEYXZpZCBHb3R6XG4vL1xuLy8gVG9vbHRpcHMgZm9yIGQzLmpzIFNWRyB2aXN1YWxpemF0aW9uc1xuXG5kMy5mdW5jdG9yID0gZnVuY3Rpb24gZnVuY3Rvcih2KSB7XG4gIHJldHVybiB0eXBlb2YgdiA9PT0gXCJmdW5jdGlvblwiID8gdiA6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB2O1xuICB9O1xufTtcblxuZDMudGlwID0gZnVuY3Rpb24oKSB7XG5cbiAgdmFyIGRpcmVjdGlvbiA9IGQzX3RpcF9kaXJlY3Rpb24sXG4gICAgICBvZmZzZXQgICAgPSBkM190aXBfb2Zmc2V0LFxuICAgICAgaHRtbCAgICAgID0gZDNfdGlwX2h0bWwsXG4gICAgICBub2RlICAgICAgPSBpbml0Tm9kZSgpLFxuICAgICAgc3ZnICAgICAgID0gbnVsbCxcbiAgICAgIHBvaW50ICAgICA9IG51bGwsXG4gICAgICB0YXJnZXQgICAgPSBudWxsXG5cbiAgZnVuY3Rpb24gdGlwKHZpcykge1xuICAgIHN2ZyA9IGdldFNWR05vZGUodmlzKVxuICAgIHBvaW50ID0gc3ZnLmNyZWF0ZVNWR1BvaW50KClcbiAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKG5vZGUpXG4gIH1cblxuICAvLyBQdWJsaWMgLSBzaG93IHRoZSB0b29sdGlwIG9uIHRoZSBzY3JlZW5cbiAgLy9cbiAgLy8gUmV0dXJucyBhIHRpcFxuICB0aXAuc2hvdyA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKVxuICAgIGlmKGFyZ3NbYXJncy5sZW5ndGggLSAxXSBpbnN0YW5jZW9mIFNWR0VsZW1lbnQpIHRhcmdldCA9IGFyZ3MucG9wKClcblxuICAgIHZhciBjb250ZW50ID0gaHRtbC5hcHBseSh0aGlzLCBhcmdzKSxcbiAgICAgICAgcG9mZnNldCA9IG9mZnNldC5hcHBseSh0aGlzLCBhcmdzKSxcbiAgICAgICAgZGlyICAgICA9IGRpcmVjdGlvbi5hcHBseSh0aGlzLCBhcmdzKSxcbiAgICAgICAgbm9kZWwgICA9IGdldE5vZGVFbCgpLFxuICAgICAgICBpICAgICAgID0gZGlyZWN0aW9ucy5sZW5ndGgsXG4gICAgICAgIGNvb3JkcyxcbiAgICAgICAgc2Nyb2xsVG9wICA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxUb3AgfHwgZG9jdW1lbnQuYm9keS5zY3JvbGxUb3AsXG4gICAgICAgIHNjcm9sbExlZnQgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsTGVmdCB8fCBkb2N1bWVudC5ib2R5LnNjcm9sbExlZnRcblxuICAgIG5vZGVsLmh0bWwoY29udGVudClcbiAgICAgIC5zdHlsZSgncG9zaXRpb24nLCAnYWJzb2x1dGUnKVxuICAgICAgLnN0eWxlKCdvcGFjaXR5JywgMSlcbiAgICAgIC5zdHlsZSgncG9pbnRlci1ldmVudHMnLCAnYWxsJylcblxuICAgIHdoaWxlKGktLSkgbm9kZWwuY2xhc3NlZChkaXJlY3Rpb25zW2ldLCBmYWxzZSlcbiAgICBjb29yZHMgPSBkaXJlY3Rpb25fY2FsbGJhY2tzW2Rpcl0uYXBwbHkodGhpcylcbiAgICBub2RlbC5jbGFzc2VkKGRpciwgdHJ1ZSlcbiAgICAgIC5zdHlsZSgndG9wJywgKGNvb3Jkcy50b3AgKyAgcG9mZnNldFswXSkgKyBzY3JvbGxUb3AgKyAncHgnKVxuICAgICAgLnN0eWxlKCdsZWZ0JywgKGNvb3Jkcy5sZWZ0ICsgcG9mZnNldFsxXSkgKyBzY3JvbGxMZWZ0ICsgJ3B4JylcblxuICAgIHJldHVybiB0aXBcbiAgfVxuXG4gIC8vIFB1YmxpYyAtIGhpZGUgdGhlIHRvb2x0aXBcbiAgLy9cbiAgLy8gUmV0dXJucyBhIHRpcFxuICB0aXAuaGlkZSA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBub2RlbCA9IGdldE5vZGVFbCgpXG4gICAgbm9kZWxcbiAgICAgIC5zdHlsZSgnb3BhY2l0eScsIDApXG4gICAgICAuc3R5bGUoJ3BvaW50ZXItZXZlbnRzJywgJ25vbmUnKVxuICAgIHJldHVybiB0aXBcbiAgfVxuXG4gIC8vIFB1YmxpYzogUHJveHkgYXR0ciBjYWxscyB0byB0aGUgZDMgdGlwIGNvbnRhaW5lci4gIFNldHMgb3IgZ2V0cyBhdHRyaWJ1dGUgdmFsdWUuXG4gIC8vXG4gIC8vIG4gLSBuYW1lIG9mIHRoZSBhdHRyaWJ1dGVcbiAgLy8gdiAtIHZhbHVlIG9mIHRoZSBhdHRyaWJ1dGVcbiAgLy9cbiAgLy8gUmV0dXJucyB0aXAgb3IgYXR0cmlidXRlIHZhbHVlXG4gIHRpcC5hdHRyID0gZnVuY3Rpb24obiwgdikge1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMiAmJiB0eXBlb2YgbiA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHJldHVybiBnZXROb2RlRWwoKS5hdHRyKG4pXG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBhcmdzID0gIEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cylcbiAgICAgIGQzLnNlbGVjdGlvbi5wcm90b3R5cGUuYXR0ci5hcHBseShnZXROb2RlRWwoKSwgYXJncylcbiAgICB9XG5cbiAgICByZXR1cm4gdGlwXG4gIH1cblxuICAvLyBQdWJsaWM6IFByb3h5IHN0eWxlIGNhbGxzIHRvIHRoZSBkMyB0aXAgY29udGFpbmVyLiAgU2V0cyBvciBnZXRzIGEgc3R5bGUgdmFsdWUuXG4gIC8vXG4gIC8vIG4gLSBuYW1lIG9mIHRoZSBwcm9wZXJ0eVxuICAvLyB2IC0gdmFsdWUgb2YgdGhlIHByb3BlcnR5XG4gIC8vXG4gIC8vIFJldHVybnMgdGlwIG9yIHN0eWxlIHByb3BlcnR5IHZhbHVlXG4gIHRpcC5zdHlsZSA9IGZ1bmN0aW9uKG4sIHYpIHtcbiAgICAvLyBkZWJ1Z2dlcjtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDIgJiYgdHlwZW9mIG4gPT09ICdzdHJpbmcnKSB7XG4gICAgICByZXR1cm4gZ2V0Tm9kZUVsKCkuc3R5bGUobilcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpO1xuICAgICAgaWYgKGFyZ3MubGVuZ3RoID09PSAxKSB7XG4gICAgICAgIHZhciBzdHlsZXMgPSBhcmdzWzBdO1xuICAgICAgICBPYmplY3Qua2V5cyhzdHlsZXMpLmZvckVhY2goZnVuY3Rpb24oa2V5KSB7XG4gICAgICAgICAgcmV0dXJuIGQzLnNlbGVjdGlvbi5wcm90b3R5cGUuc3R5bGUuYXBwbHkoZ2V0Tm9kZUVsKCksIFtrZXksIHN0eWxlc1trZXldXSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0aXBcbiAgfVxuXG4gIC8vIFB1YmxpYzogU2V0IG9yIGdldCB0aGUgZGlyZWN0aW9uIG9mIHRoZSB0b29sdGlwXG4gIC8vXG4gIC8vIHYgLSBPbmUgb2Ygbihub3J0aCksIHMoc291dGgpLCBlKGVhc3QpLCBvciB3KHdlc3QpLCBudyhub3J0aHdlc3QpLFxuICAvLyAgICAgc3coc291dGh3ZXN0KSwgbmUobm9ydGhlYXN0KSBvciBzZShzb3V0aGVhc3QpXG4gIC8vXG4gIC8vIFJldHVybnMgdGlwIG9yIGRpcmVjdGlvblxuICB0aXAuZGlyZWN0aW9uID0gZnVuY3Rpb24odikge1xuICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIGRpcmVjdGlvblxuICAgIGRpcmVjdGlvbiA9IHYgPT0gbnVsbCA/IHYgOiBkMy5mdW5jdG9yKHYpXG5cbiAgICByZXR1cm4gdGlwXG4gIH1cblxuICAvLyBQdWJsaWM6IFNldHMgb3IgZ2V0cyB0aGUgb2Zmc2V0IG9mIHRoZSB0aXBcbiAgLy9cbiAgLy8gdiAtIEFycmF5IG9mIFt4LCB5XSBvZmZzZXRcbiAgLy9cbiAgLy8gUmV0dXJucyBvZmZzZXQgb3JcbiAgdGlwLm9mZnNldCA9IGZ1bmN0aW9uKHYpIHtcbiAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBvZmZzZXRcbiAgICBvZmZzZXQgPSB2ID09IG51bGwgPyB2IDogZDMuZnVuY3Rvcih2KVxuXG4gICAgcmV0dXJuIHRpcFxuICB9XG5cbiAgLy8gUHVibGljOiBzZXRzIG9yIGdldHMgdGhlIGh0bWwgdmFsdWUgb2YgdGhlIHRvb2x0aXBcbiAgLy9cbiAgLy8gdiAtIFN0cmluZyB2YWx1ZSBvZiB0aGUgdGlwXG4gIC8vXG4gIC8vIFJldHVybnMgaHRtbCB2YWx1ZSBvciB0aXBcbiAgdGlwLmh0bWwgPSBmdW5jdGlvbih2KSB7XG4gICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gaHRtbFxuICAgIGh0bWwgPSB2ID09IG51bGwgPyB2IDogZDMuZnVuY3Rvcih2KVxuXG4gICAgcmV0dXJuIHRpcFxuICB9XG5cbiAgLy8gUHVibGljOiBkZXN0cm95cyB0aGUgdG9vbHRpcCBhbmQgcmVtb3ZlcyBpdCBmcm9tIHRoZSBET01cbiAgLy9cbiAgLy8gUmV0dXJucyBhIHRpcFxuICB0aXAuZGVzdHJveSA9IGZ1bmN0aW9uKCkge1xuICAgIGlmKG5vZGUpIHtcbiAgICAgIGdldE5vZGVFbCgpLnJlbW92ZSgpO1xuICAgICAgbm9kZSA9IG51bGw7XG4gICAgfVxuICAgIHJldHVybiB0aXA7XG4gIH1cblxuICBmdW5jdGlvbiBkM190aXBfZGlyZWN0aW9uKCkgeyByZXR1cm4gJ24nIH1cbiAgZnVuY3Rpb24gZDNfdGlwX29mZnNldCgpIHsgcmV0dXJuIFswLCAwXSB9XG4gIGZ1bmN0aW9uIGQzX3RpcF9odG1sKCkgeyByZXR1cm4gJyAnIH1cblxuICB2YXIgZGlyZWN0aW9uX2NhbGxiYWNrcyA9IHtcbiAgICBuOiAgZGlyZWN0aW9uX24sXG4gICAgczogIGRpcmVjdGlvbl9zLFxuICAgIGU6ICBkaXJlY3Rpb25fZSxcbiAgICB3OiAgZGlyZWN0aW9uX3csXG4gICAgbnc6IGRpcmVjdGlvbl9udyxcbiAgICBuZTogZGlyZWN0aW9uX25lLFxuICAgIHN3OiBkaXJlY3Rpb25fc3csXG4gICAgc2U6IGRpcmVjdGlvbl9zZVxuICB9O1xuXG4gIHZhciBkaXJlY3Rpb25zID0gT2JqZWN0LmtleXMoZGlyZWN0aW9uX2NhbGxiYWNrcyk7XG5cbiAgZnVuY3Rpb24gZGlyZWN0aW9uX24oKSB7XG4gICAgdmFyIGJib3ggPSBnZXRTY3JlZW5CQm94KClcbiAgICByZXR1cm4ge1xuICAgICAgdG9wOiAgYmJveC5uLnkgLSBub2RlLm9mZnNldEhlaWdodCxcbiAgICAgIGxlZnQ6IGJib3gubi54IC0gbm9kZS5vZmZzZXRXaWR0aCAvIDJcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBkaXJlY3Rpb25fcygpIHtcbiAgICB2YXIgYmJveCA9IGdldFNjcmVlbkJCb3goKVxuICAgIHJldHVybiB7XG4gICAgICB0b3A6ICBiYm94LnMueSxcbiAgICAgIGxlZnQ6IGJib3gucy54IC0gbm9kZS5vZmZzZXRXaWR0aCAvIDJcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBkaXJlY3Rpb25fZSgpIHtcbiAgICB2YXIgYmJveCA9IGdldFNjcmVlbkJCb3goKVxuICAgIHJldHVybiB7XG4gICAgICB0b3A6ICBiYm94LmUueSAtIG5vZGUub2Zmc2V0SGVpZ2h0IC8gMixcbiAgICAgIGxlZnQ6IGJib3guZS54XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gZGlyZWN0aW9uX3coKSB7XG4gICAgdmFyIGJib3ggPSBnZXRTY3JlZW5CQm94KClcbiAgICByZXR1cm4ge1xuICAgICAgdG9wOiAgYmJveC53LnkgLSBub2RlLm9mZnNldEhlaWdodCAvIDIsXG4gICAgICBsZWZ0OiBiYm94LncueCAtIG5vZGUub2Zmc2V0V2lkdGhcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBkaXJlY3Rpb25fbncoKSB7XG4gICAgdmFyIGJib3ggPSBnZXRTY3JlZW5CQm94KClcbiAgICByZXR1cm4ge1xuICAgICAgdG9wOiAgYmJveC5udy55IC0gbm9kZS5vZmZzZXRIZWlnaHQsXG4gICAgICBsZWZ0OiBiYm94Lm53LnggLSBub2RlLm9mZnNldFdpZHRoXG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gZGlyZWN0aW9uX25lKCkge1xuICAgIHZhciBiYm94ID0gZ2V0U2NyZWVuQkJveCgpXG4gICAgcmV0dXJuIHtcbiAgICAgIHRvcDogIGJib3gubmUueSAtIG5vZGUub2Zmc2V0SGVpZ2h0LFxuICAgICAgbGVmdDogYmJveC5uZS54XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gZGlyZWN0aW9uX3N3KCkge1xuICAgIHZhciBiYm94ID0gZ2V0U2NyZWVuQkJveCgpXG4gICAgcmV0dXJuIHtcbiAgICAgIHRvcDogIGJib3guc3cueSxcbiAgICAgIGxlZnQ6IGJib3guc3cueCAtIG5vZGUub2Zmc2V0V2lkdGhcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBkaXJlY3Rpb25fc2UoKSB7XG4gICAgdmFyIGJib3ggPSBnZXRTY3JlZW5CQm94KClcbiAgICByZXR1cm4ge1xuICAgICAgdG9wOiAgYmJveC5zZS55LFxuICAgICAgbGVmdDogYmJveC5lLnhcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBpbml0Tm9kZSgpIHtcbiAgICB2YXIgbm9kZSA9IGQzLnNlbGVjdChkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKSlcbiAgICBub2RlXG4gICAgICAuc3R5bGUoJ3Bvc2l0aW9uJywgJ2Fic29sdXRlJylcbiAgICAgIC5zdHlsZSgndG9wJywgMClcbiAgICAgIC5zdHlsZSgnb3BhY2l0eScsIDApXG4gICAgICAuc3R5bGUoJ3BvaW50ZXItZXZlbnRzJywgJ25vbmUnKVxuICAgICAgLnN0eWxlKCdib3gtc2l6aW5nJywgJ2JvcmRlci1ib3gnKVxuXG4gICAgcmV0dXJuIG5vZGUubm9kZSgpXG4gIH1cblxuICBmdW5jdGlvbiBnZXRTVkdOb2RlKGVsKSB7XG4gICAgZWwgPSBlbC5ub2RlKClcbiAgICBpZihlbC50YWdOYW1lLnRvTG93ZXJDYXNlKCkgPT09ICdzdmcnKVxuICAgICAgcmV0dXJuIGVsXG5cbiAgICByZXR1cm4gZWwub3duZXJTVkdFbGVtZW50XG4gIH1cblxuICBmdW5jdGlvbiBnZXROb2RlRWwoKSB7XG4gICAgaWYobm9kZSA9PT0gbnVsbCkge1xuICAgICAgbm9kZSA9IGluaXROb2RlKCk7XG4gICAgICAvLyByZS1hZGQgbm9kZSB0byBET01cbiAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQobm9kZSk7XG4gICAgfTtcbiAgICByZXR1cm4gZDMuc2VsZWN0KG5vZGUpO1xuICB9XG5cbiAgLy8gUHJpdmF0ZSAtIGdldHMgdGhlIHNjcmVlbiBjb29yZGluYXRlcyBvZiBhIHNoYXBlXG4gIC8vXG4gIC8vIEdpdmVuIGEgc2hhcGUgb24gdGhlIHNjcmVlbiwgd2lsbCByZXR1cm4gYW4gU1ZHUG9pbnQgZm9yIHRoZSBkaXJlY3Rpb25zXG4gIC8vIG4obm9ydGgpLCBzKHNvdXRoKSwgZShlYXN0KSwgdyh3ZXN0KSwgbmUobm9ydGhlYXN0KSwgc2Uoc291dGhlYXN0KSwgbncobm9ydGh3ZXN0KSxcbiAgLy8gc3coc291dGh3ZXN0KS5cbiAgLy9cbiAgLy8gICAgKy0rLStcbiAgLy8gICAgfCAgIHxcbiAgLy8gICAgKyAgICtcbiAgLy8gICAgfCAgIHxcbiAgLy8gICAgKy0rLStcbiAgLy9cbiAgLy8gUmV0dXJucyBhbiBPYmplY3Qge24sIHMsIGUsIHcsIG53LCBzdywgbmUsIHNlfVxuICBmdW5jdGlvbiBnZXRTY3JlZW5CQm94KCkge1xuICAgIHZhciB0YXJnZXRlbCAgID0gdGFyZ2V0IHx8IGQzLmV2ZW50LnRhcmdldDtcblxuICAgIHdoaWxlICgndW5kZWZpbmVkJyA9PT0gdHlwZW9mIHRhcmdldGVsLmdldFNjcmVlbkNUTSAmJiAndW5kZWZpbmVkJyA9PT0gdGFyZ2V0ZWwucGFyZW50Tm9kZSkge1xuICAgICAgICB0YXJnZXRlbCA9IHRhcmdldGVsLnBhcmVudE5vZGU7XG4gICAgfVxuXG4gICAgdmFyIGJib3ggICAgICAgPSB7fSxcbiAgICAgICAgbWF0cml4ICAgICA9IHRhcmdldGVsLmdldFNjcmVlbkNUTSgpLFxuICAgICAgICB0YmJveCAgICAgID0gdGFyZ2V0ZWwuZ2V0QkJveCgpLFxuICAgICAgICB3aWR0aCAgICAgID0gdGJib3gud2lkdGgsXG4gICAgICAgIGhlaWdodCAgICAgPSB0YmJveC5oZWlnaHQsXG4gICAgICAgIHggICAgICAgICAgPSB0YmJveC54LFxuICAgICAgICB5ICAgICAgICAgID0gdGJib3gueVxuXG4gICAgcG9pbnQueCA9IHhcbiAgICBwb2ludC55ID0geVxuICAgIGJib3gubncgPSBwb2ludC5tYXRyaXhUcmFuc2Zvcm0obWF0cml4KVxuICAgIHBvaW50LnggKz0gd2lkdGhcbiAgICBiYm94Lm5lID0gcG9pbnQubWF0cml4VHJhbnNmb3JtKG1hdHJpeClcbiAgICBwb2ludC55ICs9IGhlaWdodFxuICAgIGJib3guc2UgPSBwb2ludC5tYXRyaXhUcmFuc2Zvcm0obWF0cml4KVxuICAgIHBvaW50LnggLT0gd2lkdGhcbiAgICBiYm94LnN3ID0gcG9pbnQubWF0cml4VHJhbnNmb3JtKG1hdHJpeClcbiAgICBwb2ludC55IC09IGhlaWdodCAvIDJcbiAgICBiYm94LncgID0gcG9pbnQubWF0cml4VHJhbnNmb3JtKG1hdHJpeClcbiAgICBwb2ludC54ICs9IHdpZHRoXG4gICAgYmJveC5lID0gcG9pbnQubWF0cml4VHJhbnNmb3JtKG1hdHJpeClcbiAgICBwb2ludC54IC09IHdpZHRoIC8gMlxuICAgIHBvaW50LnkgLT0gaGVpZ2h0IC8gMlxuICAgIGJib3gubiA9IHBvaW50Lm1hdHJpeFRyYW5zZm9ybShtYXRyaXgpXG4gICAgcG9pbnQueSArPSBoZWlnaHRcbiAgICBiYm94LnMgPSBwb2ludC5tYXRyaXhUcmFuc2Zvcm0obWF0cml4KVxuXG4gICAgcmV0dXJuIGJib3hcbiAgfVxuXG4gIHJldHVybiB0aXBcbn07XG4iLCJ2YXIgRGF0YWJhc2UgPSAoZnVuY3Rpb24oKXtcclxuXHJcblxyXG4gIC8qKlxyXG4gICAqICBHcmFicyBhbGwgdGhlIHNlY3Rpb25zIGZyb20gdGhlIGRhdGFiYXNlXHJcbiAgICpcclxuICAgKiAgQGNhbGxiYWNrIHNob3VsZCB0YWtlIChPYmplY3RbXSwgQm9vbGVhbikgYXJyYXkgY29udGFpbnMgY2F0ZWdvcmllcyBib29sZWFuIGlzIHRydWUgaWYgbm8gcmVzdWx0cyBmYWxzZSBpZiB0aGVyZSBpcyBhIHJlc3VsdFxyXG4gICAqICovXHJcbiAgZnVuY3Rpb24gZ2V0U2VjdGlvbnNGcm9tRGF0YWJhc2UoY2FsbGJhY2spe1xyXG4gICAgJC5nZXQoXCIvc2VjdGlvbnMvc2VjdGlvbnNcIiwgZnVuY3Rpb24oZGF0YSl7XHJcbiAgICAgICAgaWYoZGF0YS5zZWN0aW9ucy5sZW5ndGggPiAwKXtcclxuICAgICAgICAgIGNhbGxiYWNrKGRhdGEuc2VjdGlvbnMsIGZhbHNlKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgY2FsbGJhY2soc2VjdGlvbnMsIHRydWUpO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogIEdyYWJzIGFsbCB0aGUgY2F0ZWdvcmllcyBmb3IgYSBzcGVjaWZpYyBzZWN0aW9uXHJcbiAgICpcclxuICAgKiAgQHBhcmFtIHNlY3Rpb24ge1N0cmluZ30gVGhlIHNlY3Rpb24gdG8gbG9vayBmb3IgZGlzdGluY3QgY2F0ZWdvcmllcyBpblxyXG4gICAqICBAY2FsbGJhY2sgc2hvdWxkIHRha2UgKE9iamVjdFtdLCBCb29sZWFuKSBhcnJheSBjb250YWlucyBjYXRlZ29yaWVzIGJvb2xlYW4gaXMgdHJ1ZSBpZiBubyByZXN1bHRzIGZhbHNlIGlmIHRoZXJlIGlzIGEgcmVzdWx0XHJcbiAgICogKi9cclxuICBmdW5jdGlvbiBnZXRDYXRlZ29yaWVzRnJvbURhdGFiYXNlKHNlY3Rpb24sIGNhbGxiYWNrKXtcclxuICAgIC8vIEZpbmQgYWxsIHRoZSBjYXRlZ29yaWVzIGFzc29jaWF0ZWQgd2l0aCB0aGlzIHNlY3Rpb25cclxuICAgICQucG9zdChcIi9zZWN0aW9ucy9zXCIse3NlbGVjdGVkIDogc2VjdGlvbiB9LCBmdW5jdGlvbihkYXRhKXtcclxuICAgICAgaWYoZGF0YS5jYXRlZ29yaWVzLmxlbmd0aCA+IDAgICYmICBkYXRhLmNhdGVnb3JpZXNbMF0gIT09IG51bGwpe1xyXG4gICAgICAgIGNhbGxiYWNrKGRhdGEuY2F0ZWdvcmllcywgZmFsc2UpO1xyXG4gICAgICB9IGVsc2UgeyAvLyBUaGUgb25lIHNwZWNpYWwgY2FzZSB3aGVyZSBjYXRlZ29yeSBpcyBudWxsXHJcbiAgICAgICAgY2FsbGJhY2soW10sIHRydWUpOyAvLyBObyByZXN1bHRcclxuICAgICAgfX0pO1xyXG4gIH1cclxuXHJcblxyXG4gIC8qKlxyXG4gICAqIEdyYWJzIGFsbCBzdWIgY2F0ZWdvcmllcyBmb3IgYSBzcGVjaWZpYyBzZWN0aW9uIGFuZCBjYXRlZ29yeVxyXG4gICAqXHJcbiAgICogQHBhcmFtIHNlY3Rpb24ge1N0cmluZ30gVGhlIHNlY3Rpb24gdG8gbG9vayBmb3IgZGlzdGluY3QgY2F0ZWdvcmllcyBpblxyXG4gICAqIEBwYXJhbSBjYXRlZ29yeSB7U3RyaW5nfSBUaGUgY2F0ZWdvcnkgdG8gbG9vayBmb3IgZGlzdGluY3Qgc3ViIGNhdGVnb3JpZXMgaW5cclxuICAgKiBAcGFyYW0gY2FsbGJhY2sge2Z1bmN0aW9ufSBUaGUgZnVuY3Rpb24gdG8gY2FsbCBvbmNlIHRoZSBxdWVyeSBoYXMgYSByZXN1bHRcclxuICAgKiAqL1xyXG4gIGZ1bmN0aW9uIGdldFN1YkNhdGVnb3JpZXNGcm9tRGF0YWJhc2Uoc2VjdGlvbiwgY2F0ZWdvcnksIGNhbGxiYWNrKXtcclxuICAgICQucG9zdChcIi9zZWN0aW9ucy9zY1wiLHtzZWN0aW9uIDogc2VjdGlvbiwgY2F0ZWdvcnkgOiBjYXRlZ29yeX0sIGZ1bmN0aW9uKGRhdGEpe1xyXG4gICAgICBpZihkYXRhLnN1YkNhdGVnb3JpZXMubGVuZ3RoID4gMCAgJiYgIGRhdGEuc3ViQ2F0ZWdvcmllc1swXSAhPT0gbnVsbCl7XHJcbiAgICAgICAgY2FsbGJhY2soZGF0YS5zdWJDYXRlZ29yaWVzLCBmYWxzZSk7IC8vIFRoZXJlIGlzIGEgcmVzdWx0XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgY2FsbGJhY2soW10sIHRydWUpOyAvLyBObyByZXN1bHRzXHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH1cclxuXHJcblxyXG4gIC8qKlxyXG4gICAqIEdyYWJzIGFsbCBkZXNjcmlwdGlvbiBmb3IgYSBzcGVjaWZpYyBzZWN0aW9uLCBjYXRlZ29yeSBhbmQgc3ViIGNhdGVnb3J5IGlmIHN1YiBjYXRlZ29yeVxyXG4gICAqIGlzIG5vdCBhbiBlbXB0eSBzdHJpbmcuXHJcbiAgICpcclxuICAgKiBAcGFyYW0gc2VjdGlvbiB7U3RyaW5nfSBUaGUgc2VjdGlvbiB0byBsb29rIGZvciBkaXN0aW5jdCBjYXRlZ29yaWVzIGluXHJcbiAgICogQHBhcmFtIGNhdGVnb3J5IHtTdHJpbmd9IFRoZSBjYXRlZ29yeSB0byBsb29rIGZvciBkaXN0aW5jdCBzdWIgY2F0ZWdvcmllcyBpblxyXG4gICAqIEBwYXJhbSBzdWJDYXRlZ29yeSB7U3RyaW5nfSBUaGUgc3ViIGNhdGVnb3J5IHRvIGxvb2sgZm9yIGRpc3RpbmN0IHN1YiBjYXRlZ29yaWVzIGluXHJcbiAgICogQHBhcmFtIGNhbGxiYWNrIHtmdW5jdGlvbn0gVGhlIGZ1bmN0aW9uIHRvIGNhbGwgb25jZSB0aGUgcXVlcnkgaGFzIGEgcmVzdWx0XHJcbiAgICogKi9cclxuICBmdW5jdGlvbiBnZXREZXNjcmlwdGlvbnNGcm9tRGF0YWJhc2Uoc2VjdGlvbixjYXRlZ29yeSxzdWJDYXRlZ29yeSxjYWxsYmFjayl7XHJcbiAgICAvLyBGaW5kIGFsbCBkZXNjcmlwdGlvbnMgZm9yIHRoZSBjdXJyZW50bHkgc2VsZWN0ZWQgc3ViIGNhdGVnb3J5XHJcbiAgICAkLnBvc3QoXCIvc2VjdGlvbnMvZGVzY1wiLHtjYXRlZ29yeSA6IGNhdGVnb3J5LHNlY3Rpb24gOiBzZWN0aW9uLCBzdWJDYXRlZ29yeSA6IHN1YkNhdGVnb3J5fSwgZnVuY3Rpb24oZGF0YSl7XHJcbiAgICAgIGlmKGRhdGEuZGVzY3JpcHRpb25zLmxlbmd0aCA+IDAgJiYgIGRhdGEuZGVzY3JpcHRpb25zWzBdICE9PSBudWxsKXtcclxuICAgICAgICBjYWxsYmFjayhkYXRhLmRlc2NyaXB0aW9ucywgZmFsc2UpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGNhbGxiYWNrKGRhdGEuZGVzY3JpcHRpb25zLCB0cnVlKTtcclxuICAgICAgfX0pO1xyXG4gIH1cclxuXHJcblxyXG4gIC8qKlxyXG4gICAqIFJldHVybnMgYWxsIG9mIHRoZSByb3dzIGFzc29jaWF0ZWQgd2l0aCB0aGUgc2VsZWN0ZWQgc2VjdGlvbnMsIGNhdGVnb3JpZXMsIHN1YkNhdGVnb3JpZXNcclxuICAgKiBhbmQgZGVzY3JpcHRpb25zIGZvciBtdWx0aXBsZSByb3dzLlxyXG4gICAqXHJcbiAgICogQHBhcmFtIHNlbGVjdGlvbnMge09iamVjdH0gQ29udGFpbnMgYWxsIHRoZSBzZWxlY3Rpb25zIHRoZSB1c2VyIG1hZGVcclxuICAgKiBAcGFyYW0gY2FsbGJhY2sge2Z1bmN0aW9ufSBUaGUgZnVuY3Rpb24gdG8gY2FsbCBvbmNlIHRoZSBxdWVyeSBoYXMgYSByZXN1bHRcclxuICAgKiAqL1xyXG4gIGZ1bmN0aW9uIGdldFJvd3NGb3JTZWFyY2goc2VsZWN0aW9ucywgY2FsbGJhY2spIHtcclxuICAgICQucG9zdChcIi9jb21wYXJlL3NlYXJjaFwiLHtjb21wYW55IDogXCJcIiwgc2VsZWN0aW9ucyA6IEpTT04uc3RyaW5naWZ5KHNlbGVjdGlvbnMpfSwgZnVuY3Rpb24oZGF0YSl7XHJcbiAgICAgIGNhbGxiYWNrKGRhdGEucm93cyk7XHJcbiAgICB9KTtcclxuXHJcbiAgfVxyXG5cclxuICByZXR1cm4ge1xyXG4gICAgICBnZXRDYXRlZ29yaWVzRnJvbURhdGFiYXNlIDogZ2V0Q2F0ZWdvcmllc0Zyb21EYXRhYmFzZSxcclxuICAgICAgZ2V0U3ViQ2F0ZWdvcmllc0Zyb21EYXRhYmFzZSA6IGdldFN1YkNhdGVnb3JpZXNGcm9tRGF0YWJhc2UsXHJcbiAgICAgIGdldERlc2NyaXB0aW9uc0Zyb21EYXRhYmFzZSA6IGdldERlc2NyaXB0aW9uc0Zyb21EYXRhYmFzZSxcclxuICAgICAgZ2V0U2VjdGlvbnNGcm9tRGF0YWJhc2UgOiBnZXRTZWN0aW9uc0Zyb21EYXRhYmFzZSxcclxuICAgICAgZ2V0Um93c0ZvclNlYXJjaCA6IGdldFJvd3NGb3JTZWFyY2hcclxuICB9XHJcbn0pKCk7XHJcbiIsInZhciBldmVudHMgPSB7XHJcbiAgZXZlbnRzOiB7fSxcclxuICBvbjogZnVuY3Rpb24gKGV2ZW50TmFtZSwgZm4pIHtcclxuICAgIHRoaXMuZXZlbnRzW2V2ZW50TmFtZV0gPSB0aGlzLmV2ZW50c1tldmVudE5hbWVdIHx8IFtdO1xyXG4gICAgdGhpcy5ldmVudHNbZXZlbnROYW1lXS5wdXNoKGZuKTtcclxuICB9LFxyXG4gIG9mZjogZnVuY3Rpb24oZXZlbnROYW1lLCBmbikge1xyXG4gICAgaWYgKHRoaXMuZXZlbnRzW2V2ZW50TmFtZV0pIHtcclxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmV2ZW50c1tldmVudE5hbWVdLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuZXZlbnRzW2V2ZW50TmFtZV1baV0gPT09IGZuKSB7XHJcbiAgICAgICAgICB0aGlzLmV2ZW50c1tldmVudE5hbWVdLnNwbGljZShpLCAxKTtcclxuICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgICAgfTtcclxuICAgIH1cclxuICB9LFxyXG4gIGVtaXQ6IGZ1bmN0aW9uIChldmVudE5hbWUsIGRhdGEpIHtcclxuICAgIGlmICh0aGlzLmV2ZW50c1tldmVudE5hbWVdKSB7XHJcbiAgICAgIHRoaXMuZXZlbnRzW2V2ZW50TmFtZV0uZm9yRWFjaChmdW5jdGlvbihmbikge1xyXG4gICAgICAgIGZuKGRhdGEpO1xyXG4gICAgICB9KTtcclxuICAgIH1cclxuICB9XHJcbn07XHJcbiIsInZhciBWZWN0b3JNb2R1bGUgPSAoZnVuY3Rpb24oKXtcclxuICB2YXIgdk1hcmdpbiA9IHt0b3A6IDMwLCByaWdodDogMjAsIGJvdHRvbTogMTgwLCBsZWZ0OiA3MH0sXHJcbiAgICB2V2lkdGggPSAxMDAwIC0gdk1hcmdpbi5sZWZ0IC0gdk1hcmdpbi5yaWdodCxcclxuICAgIHZIZWlnaHQgPSA4MDAgLSB2TWFyZ2luLnRvcCAtIHZNYXJnaW4uYm90dG9tO1xyXG5cclxuXHJcbiAgdmFyIHZlY3RvckdyYXBocyA9IFtdO1xyXG5cclxuICBmdW5jdGlvbiBWZWN0b3JHcmFwaERhdGEoaWQpe1xyXG4gICAgdGhpcy5pZCA9IGlkO1xyXG4gICAgdGhpcy5jcmVhdGVkID0gZmFsc2U7XHJcbiAgICB0aGlzLnhBeGlzID0gZDMuYXhpc0JvdHRvbSgpO1xyXG4gICAgdGhpcy55QXhpcyA9IGQzLmF4aXNMZWZ0KCk7XHJcbiAgICB0aGlzLnggPSBkMy5zY2FsZUxpbmVhcigpLnJhbmdlUm91bmQoW3ZXaWR0aCwgMF0pO1xyXG4gICAgdGhpcy55ID0gIGQzLnNjYWxlTGluZWFyKCkucmFuZ2VSb3VuZChbdkhlaWdodCwgMF0pO1xyXG4gICAgdGhpcy5zdmcgPSBudWxsO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gY3JlYXRlVmVjdG9yR3JhcGgoZGF0YSx4TGFiZWwsIHlMYWJlbCwgZGl2SUQpe1xyXG4gICAgdmFyIHZlY3RvckdyYXBoID0gbnVsbDtcclxuXHJcbiAgICB2ZWN0b3JHcmFwaHMuZm9yRWFjaChmdW5jdGlvbiAoZWxlbSkge1xyXG4gICAgICBpZiAoZWxlbS5pZCA9PT0gZGl2SUQpe3ZlY3RvckdyYXBoID0gZWxlbTt9XHJcbiAgICB9KTtcclxuXHJcbiAgICBpZih2ZWN0b3JHcmFwaCA9PT0gbnVsbCl7XHJcbiAgICAgIHZlY3RvckdyYXBoID0gbmV3IFZlY3RvckdyYXBoRGF0YShkaXZJRCk7XHJcbiAgICAgIHZlY3RvckdyYXBocy5wdXNoKHZlY3RvckdyYXBoKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBGaW5kIGFsbCBFREInXHJcbiAgICB2YXIgZWRicyA9IFtdO1xyXG4gICAgZGF0YS5mb3JFYWNoKGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgIGVkYnMucHVzaChlLmVkYik7XHJcbiAgICB9KTtcclxuXHJcbiAgICB2YXIgY29sb3IgPSBkMy5zY2FsZU9yZGluYWwoKS5kb21haW4oZWRicylcclxuICAgICAgLnJhbmdlKFtcIiNlNjlhNjFcIiwgXCIjOTgxN2ZmXCIsIFwiIzE4YzYxYVwiLCBcIiMzM2I0ZmZcIiwgXCIjYzkxNjdlXCIsIFwiIzI5Nzg1M1wiLCBcIiNkNzAxMWJcIiwgXCIjNzQ1NmM3XCIsIFwiIzdlNjI3NlwiLCBcIiNhZmIxMTNcIiwgXCIjZmQ4NzljXCIsIFwiI2ZiNzhmYVwiLCBcIiMyNGMzNzNcIiwgXCIjNDViYmM1XCIsIFwiIzc2NmIyMVwiLCBcIiNhYmFkOTNcIiwgXCIjYzE5Y2UzXCIsIFwiI2ZkOGYxMVwiLCBcIiMyZjU2ZmZcIiwgXCIjMzA3YTExXCIsIFwiI2IzNDgzY1wiLCBcIiMwZDczOTZcIiwgXCIjOTRiNjY1XCIsIFwiIzlkNGQ5MVwiLCBcIiNiODA3YzhcIiwgXCIjMDg2Y2JmXCIsIFwiI2EyYWJjNVwiLCBcIiNhMzU3MDJcIiwgXCIjZDMwODRiXCJdKTtcclxuXHJcbiAgICB2YXIgYWxsVmFsdWVzID1bXTtcclxuICAgIGRhdGEuZm9yRWFjaChmdW5jdGlvbiAoZSkge1xyXG4gICAgICBlLnllYXJzLmZvckVhY2goZnVuY3Rpb24gKGUxKXtcclxuICAgICAgICBlMVtcImVkYlwiXSA9IGUuZWRiO1xyXG4gICAgICAgIGFsbFZhbHVlcy5wdXNoKGUxKTtcclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICB2YXIgeFZhbHVlcyA9IFtdO1xyXG4gICAgYWxsVmFsdWVzLmZvckVhY2goZnVuY3Rpb24gKGUpeyB4VmFsdWVzLnB1c2goZS52YWx1ZUIpO30pO1xyXG5cclxuICAgIHZhciB5VmFsdWVzID0gW107XHJcbiAgICBhbGxWYWx1ZXMuZm9yRWFjaChmdW5jdGlvbiAoZSl7IHlWYWx1ZXMucHVzaChlLnZhbHVlQSk7fSk7XHJcblxyXG4gICAgLy8gQ3JlYXRlIHRoZSBzdmcgYW5kIGFwcGVuZCB0byB0aGUgZGl2XHJcbiAgICBpZighdmVjdG9yR3JhcGguY3JlYXRlZCl7XHJcbiAgICAgIHZlY3RvckdyYXBoLnN2ZyA9IGQzLnNlbGVjdChkaXZJRCkuYXBwZW5kKFwic3ZnXCIpXHJcbiAgICAgICAgLmF0dHIoXCJ3aWR0aFwiLCB2V2lkdGggKyB2TWFyZ2luLmxlZnQgKyB2TWFyZ2luLnJpZ2h0KVxyXG4gICAgICAgIC5hdHRyKFwiaGVpZ2h0XCIsIHZIZWlnaHQgKyB2TWFyZ2luLnRvcCArIHZNYXJnaW4uYm90dG9tKVxyXG4gICAgICAgIC5hcHBlbmQoXCJnXCIpXHJcbiAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgXCJ0cmFuc2xhdGUoXCIgKyB2TWFyZ2luLmxlZnQgKyBcIixcIiArIHZNYXJnaW4udG9wICsgXCIpXCIpOyAvLyBtb3ZlcyBieSBhIHggYW5kIHkgdmFsdWUgaW4gdGhpcyBjYXNlIHRoZSBtYXJnaW5zXHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8vIEZpbmQgbWF4IHZhbHVlc1xyXG4gICAgdmFyIG1heFggPSBkMy5tYXgoeFZhbHVlcywgZnVuY3Rpb24oZCkgeyByZXR1cm4gZDt9ICk7XHJcbiAgICB2YXIgbWF4WSA9IGQzLm1heCh5VmFsdWVzLCBmdW5jdGlvbihkKSB7IHJldHVybiBkO30gKTtcclxuXHJcbiAgICAvLyBTZXQgdGhlIGRvbWFpbiBmb3IgeCBhbmQgeVxyXG4gICAgdmVjdG9yR3JhcGgueC5kb21haW4oW21heFgsMF0pLm5pY2UoKTtcclxuICAgIHZlY3RvckdyYXBoLnkuZG9tYWluKFswLG1heFldKS5uaWNlKCk7XHJcblxyXG5cclxuICAgIGlmKHZlY3RvckdyYXBoLmNyZWF0ZWQpe1xyXG4gICAgICB2ZWN0b3JHcmFwaC5zdmcuc2VsZWN0KCcueUF4aXMnKS5jYWxsKHZlY3RvckdyYXBoLnlBeGlzKTtcclxuICAgICAgdmVjdG9yR3JhcGguc3ZnLnNlbGVjdCgnLnhBeGlzJykuY2FsbCh2ZWN0b3JHcmFwaC54QXhpcyk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB2ZWN0b3JHcmFwaC54QXhpcy5zY2FsZSh2ZWN0b3JHcmFwaC54KTtcclxuICAgICAgdmVjdG9yR3JhcGgueUF4aXMuc2NhbGUodmVjdG9yR3JhcGgueSk7XHJcbiAgICB9XHJcblxyXG4gICAgdmVjdG9yR3JhcGguc3ZnLmFwcGVuZChcImdcIilcclxuICAgICAgLmF0dHIoXCJjbGFzc1wiLFwieEF4aXNcIilcclxuICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgXCJ0cmFuc2xhdGUoMCxcIiArIHZIZWlnaHQgKyBcIilcIilcclxuICAgICAgLmNhbGwodmVjdG9yR3JhcGgueEF4aXMuc2NhbGUodmVjdG9yR3JhcGgueCkpO1xyXG4gICAgdmFyIGRwRm9ybWF0ID0gZDMuZm9ybWF0KFwiLjJmXCIpO1xyXG5cclxuICAgIC8vIGFkZCB0aGUgeSBBeGlzXHJcbiAgICB2ZWN0b3JHcmFwaC5zdmcuYXBwZW5kKFwiZ1wiKVxyXG4gICAgICAuYXR0cihcImNsYXNzXCIsXCJ5QXhpc1wiKVxyXG4gICAgICAuYXR0cihcImZpbGxcIiwgXCJibGFja1wiKVxyXG4gICAgICAuY2FsbCh2ZWN0b3JHcmFwaC55QXhpcyk7XHJcblxyXG4gICAgdmFyIHRpcCA9IGQzLnRpcCgpXHJcbiAgICAgIC5hdHRyKCdjbGFzcycsICdkMy10aXAnKVxyXG4gICAgICAub2Zmc2V0KFstMTAsIDBdKVxyXG4gICAgICAuaHRtbChmdW5jdGlvbihkKSB7XHJcbiAgICAgICAgcmV0dXJuIFwiPHN0cm9uZz5FREI6PC9zdHJvbmc+IDxzcGFuIHN0eWxlPSdjb2xvcjpsaWdodGdyZWVuJz5cIiArIGQuZWRiICsgXCI8L3NwYW4+PGJyPjxicj48c3Ryb25nPlllYXI6PC9zdHJvbmc+IDxzcGFuIHN0eWxlPSdjb2xvcjpsaWdodGdyZWVuJz5cIiArIGQueWVhciArIFwiPC9zcGFuPjxicj48YnI+PHN0cm9uZz5WYWx1ZTo8L3N0cm9uZz4gPHNwYW4gc3R5bGU9J2NvbG9yOmxpZ2h0Z3JlZW4nPltcIiArIGRwRm9ybWF0KGQudmFsdWVBKVx0ICsgXCIsIFwiICsgZHBGb3JtYXQoZC52YWx1ZUIpICtcIl08L3NwYW4+XCI7XHJcbiAgICAgIH0pO1xyXG4gICAgdmVjdG9yR3JhcGguc3ZnLmNhbGwodGlwKTtcclxuXHJcbiAgICBpZih2ZWN0b3JHcmFwaC5jcmVhdGVkKXtcclxuICAgICAgdmVjdG9yR3JhcGguc3ZnLnNlbGVjdEFsbChcIi5kb3RtXCIpXHJcbiAgICAgICAgLmRhdGEoYWxsVmFsdWVzKVxyXG4gICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJkb3RcIilcclxuICAgICAgICAuYXR0cihcInJcIiwgMy41KVxyXG4gICAgICAgIC5hdHRyKFwiY3hcIiwgZnVuY3Rpb24oZCkge3JldHVybiB2ZWN0b3JHcmFwaC54KGQudmFsdWVCKTsgfSlcclxuICAgICAgICAuYXR0cihcImN5XCIsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIHZlY3RvckdyYXBoLnkoZC52YWx1ZUEpOyB9KVxyXG4gICAgICAgIC5hdHRyKFwiZmlsbFwiLCBmdW5jdGlvbihkKSB7IHJldHVybiBjb2xvcihkLmVkYik7IH0pXHJcbiAgICAgICAgLm9uKCdtb3VzZW92ZXInLCB0aXAuc2hvdylcclxuICAgICAgICAub24oJ21vdXNlb3V0JywgdGlwLmhpZGUpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdmVjdG9yR3JhcGguc3ZnLnNlbGVjdEFsbChcIi5kb3RtXCIpXHJcbiAgICAgICAgLmRhdGEoYWxsVmFsdWVzKVxyXG4gICAgICAgIC5lbnRlcigpLmFwcGVuZChcImNpcmNsZVwiKVxyXG4gICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJkb3RtXCIpXHJcbiAgICAgICAgLmF0dHIoXCJyXCIsIDMuNSlcclxuICAgICAgICAuYXR0cihcImN4XCIsIGZ1bmN0aW9uKGQpIHtyZXR1cm4gdmVjdG9yR3JhcGgueChkLnZhbHVlQik7IH0pXHJcbiAgICAgICAgLmF0dHIoXCJjeVwiLCBmdW5jdGlvbihkKSB7IHJldHVybiB2ZWN0b3JHcmFwaC55KGQudmFsdWVBKTsgfSlcclxuICAgICAgICAuYXR0cihcImZpbGxcIiwgZnVuY3Rpb24oZCkgeyByZXR1cm4gY29sb3IoZC5lZGIpOyB9KVxyXG4gICAgICAgIC5vbignbW91c2VvdmVyJywgdGlwLnNob3cpXHJcbiAgICAgICAgLm9uKCdtb3VzZW91dCcsIHRpcC5oaWRlKTtcclxuICAgIH1cclxuXHJcbiAgICB2YXIgbGluZXMgPSBbXTsgLy8geCx5LHgxLHkxXHJcblxyXG4gICAgLy8gTmV4dCBjcmVhdGUgdGhlIGxpbmVzIGJldHdlZW4gdGhlbVxyXG4gICAgZm9yKHZhciBpID0wOyBpIDwgZGF0YS5sZW5ndGg7IGkrKyl7XHJcbiAgICAgIGZvcih2YXIgaiA9IDA7IGogPCBkYXRhW2ldLnllYXJzLmxlbmd0aC0xOyBqKyspeyAvLyAtMSBiZWNhdXNlIHdlIGFkZFxyXG4gICAgICAgIGxpbmVzLnB1c2goIHtlbmQgOiAgdHJ1ZSxlZGIgOiBkYXRhW2ldLmVkYiwgeCA6IGRhdGFbaV0ueWVhcnNbal0udmFsdWVCLCB5IDogZGF0YVtpXS55ZWFyc1tqXS52YWx1ZUEgLCB4MSA6IGRhdGFbaV0ueWVhcnNbaisxXS52YWx1ZUIgLCB5MSA6IGRhdGFbaV0ueWVhcnNbaisxXS52YWx1ZUF9KTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vIEJ1aWxkIGFycm93XHJcbiAgICBpZighdmVjdG9yR3JhcGguY3JlYXRlZCl7XHJcbiAgICAgIHZlY3RvckdyYXBoLnN2Zy5hcHBlbmQoXCJzdmc6ZGVmc1wiKS5zZWxlY3RBbGwoXCJtYXJrZXJcIilcclxuICAgICAgICAuZGF0YShsaW5lcylcclxuICAgICAgICAuZW50ZXIoKS5hcHBlbmQoXCJzdmc6bWFya2VyXCIpXHJcbiAgICAgICAgLmF0dHIoXCJpZFwiLCBmdW5jdGlvbihkKXtcclxuICAgICAgICAgIGlmKGQuZW5kKXtcclxuICAgICAgICAgICAgcmV0dXJuIFwiZW5kXCIrZC5lZGIucmVwbGFjZSgvIC9nICwgXCJcIik7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSlcclxuICAgICAgICAuYXR0cihcInZpZXdCb3hcIiwgXCIwIC01IDEwIDEwXCIpXHJcbiAgICAgICAgLmF0dHIoXCJyZWZYXCIsIDkpXHJcbiAgICAgICAgLmF0dHIoXCJyZWZZXCIsIC0wLjUpXHJcbiAgICAgICAgLmF0dHIoXCJtYXJrZXJXaWR0aFwiLCA5KVxyXG4gICAgICAgIC5hdHRyKFwibWFya2VySGVpZ2h0XCIsIDkpXHJcbiAgICAgICAgLmF0dHIoXCJtYXJrZXJVbml0c1wiLFwidXNlclNwYWNlT25Vc2VcIilcclxuICAgICAgICAuYXR0cihcIm9yaWVudFwiLCBcImF1dG9cIilcclxuICAgICAgICAuYXBwZW5kKFwic3ZnOnBhdGhcIilcclxuICAgICAgICAuYXR0cihcImRcIiwgXCJNMCwtNUwxMCwwTDAsNVwiKVxyXG4gICAgICAgIC5zdHlsZShcImZpbGxcIiwgZnVuY3Rpb24oZCl7IHJldHVybiBjb2xvcihkLmVkYik7fSk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYodmVjdG9yR3JhcGguY3JlYXRlZCl7XHJcbiAgICAgIHZlY3RvckdyYXBoLnN2Zy5zZWxlY3RBbGwoXCIubGluZVwiKVxyXG4gICAgICAgIC5kYXRhKGxpbmVzKVxyXG4gICAgICAgIC5hdHRyKFwieDFcIiwgIGZ1bmN0aW9uKGQpIHtyZXR1cm4geChkLngpO30pXHJcbiAgICAgICAgLmF0dHIoXCJ5MVwiLCBmdW5jdGlvbihkKSB7cmV0dXJuIHkoZC55KTt9KVxyXG4gICAgICAgIC5hdHRyKFwieDJcIiwgZnVuY3Rpb24oZCkge3JldHVybiB4KGQueDEpO30pXHJcbiAgICAgICAgLmF0dHIoXCJ5MlwiLCBmdW5jdGlvbihkKSB7cmV0dXJuIHkoZC55MSk7fSlcclxuICAgICAgICAuYXR0cihcInN0cm9rZS13aWR0aFwiLCAyKVxyXG4gICAgICAgIC5hdHRyKFwiY2xhc3NcIixmdW5jdGlvbihkKXtyZXR1cm4gXCJcIitkLmVkYi5yZXBsYWNlKC8gL2cgLCBcIlwiKTt9ICkgLy8gQWRkIGViZCBhcyB0aGUgY2xhc3NcclxuICAgICAgICAuYXR0cihcInN0cm9rZVwiLCBmdW5jdGlvbihkKSB7IHJldHVybiBjb2xvcihkLmVkYik7fSlcclxuICAgICAgICAuYXR0cihcIm1hcmtlci1lbmRcIiwgZnVuY3Rpb24oZCl7XHJcbiAgICAgICAgICBpZihkLmVuZCl7XHJcbiAgICAgICAgICAgIHJldHVybiBcInVybCgjZW5kXCIrZC5lZGIucmVwbGFjZSgvIC9nICwgXCJcIikgK1wiKVwiO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdmVjdG9yR3JhcGguc3ZnLnNlbGVjdEFsbChcIi5saW5lXCIpXHJcbiAgICAgICAgLmRhdGEobGluZXMpXHJcbiAgICAgICAgLmVudGVyKCkuYXBwZW5kKFwibGluZVwiKVxyXG4gICAgICAgIC5hdHRyKFwieDFcIiwgIGZ1bmN0aW9uKGQpIHtyZXR1cm4gdmVjdG9yR3JhcGgueChkLngpO30pXHJcbiAgICAgICAgLmF0dHIoXCJ5MVwiLCBmdW5jdGlvbihkKSB7cmV0dXJuIHZlY3RvckdyYXBoLnkoZC55KTt9KVxyXG4gICAgICAgIC5hdHRyKFwieDJcIiwgZnVuY3Rpb24oZCkge3JldHVybiB2ZWN0b3JHcmFwaC54KGQueDEpO30pXHJcbiAgICAgICAgLmF0dHIoXCJ5MlwiLCBmdW5jdGlvbihkKSB7cmV0dXJuIHZlY3RvckdyYXBoLnkoZC55MSk7fSlcclxuICAgICAgICAuYXR0cihcInN0cm9rZS13aWR0aFwiLCAyKVxyXG4gICAgICAgIC5hdHRyKFwiY2xhc3NcIixmdW5jdGlvbihkKXtyZXR1cm4gXCJcIitkLmVkYi5yZXBsYWNlKC8gL2cgLCBcIlwiKTt9ICkgLy8gQWRkIGViZCBhcyB0aGUgY2xhc3NcclxuICAgICAgICAuYXR0cihcInN0cm9rZVwiLCBmdW5jdGlvbihkKSB7IHJldHVybiBjb2xvcihkLmVkYik7fSlcclxuICAgICAgICAuYXR0cihcIm1hcmtlci1lbmRcIiwgZnVuY3Rpb24oZCl7XHJcbiAgICAgICAgICBpZihkLmVuZCl7XHJcbiAgICAgICAgICAgIHJldHVybiBcInVybCgjZW5kXCIrZC5lZGIucmVwbGFjZSgvIC9nICwgXCJcIikrXCIpXCI7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIHZhciB4TWV0cmljTGFiZWwgPSBcIlwiO1xyXG4gICAgdmFyIHlNZXRyaWNMYWJlbCA9IFwiXCI7XHJcbiAgICBpZihkaXZJRC5pbmNsdWRlcyhcImFiY2RcIikpe1xyXG4gICAgICB4TWV0cmljTGFiZWwgPSBcIkMgLyBEXCI7XHJcbiAgICAgIHlNZXRyaWNMYWJlbCA9IFwiQSAvIEJcIjtcclxuICAgIH0gZWxzZSBpZihkaXZJRC5pbmNsdWRlcyhcImFiXCIpKXtcclxuICAgICAgeE1ldHJpY0xhYmVsID0gXCJCXCI7XHJcbiAgICAgIHlNZXRyaWNMYWJlbCA9IFwiQVwiXHJcbiAgICB9IGVsc2UgaWYoZGl2SUQuaW5jbHVkZXMoXCJjZFwiKSkge1xyXG4gICAgICB4TWV0cmljTGFiZWwgPSBcIkRcIjtcclxuICAgICAgeU1ldHJpY0xhYmVsID0gXCJDXCI7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gQWRkIFkgbGFiZWxcclxuICAgIHZlY3RvckdyYXBoLnN2Zy5hcHBlbmQoXCJ0ZXh0XCIpXHJcbiAgICAgIC5hdHRyKFwidGV4dC1hbmNob3JcIiwgXCJtaWRkbGVcIikgIC8vIHRoaXMgbWFrZXMgaXQgZWFzeSB0byBjZW50cmUgdGhlIHRleHQgYXMgdGhlIHRyYW5zZm9ybSBpcyBhcHBsaWVkIHRvIHRoZSBhbmNob3JcclxuICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgXCJ0cmFuc2xhdGUoXCIrIC0odk1hcmdpbi5sZWZ0LzIpICtcIixcIisgKCArdkhlaWdodC8yKStcIilyb3RhdGUoLTkwKVwiKSAgLy8gdGV4dCBpcyBkcmF3biBvZmYgdGhlIHNjcmVlbiB0b3AgbGVmdCwgbW92ZSBkb3duIGFuZCBvdXQgYW5kIHJvdGF0ZVxyXG4gICAgICAuYXR0cihcImNsYXNzXCIsIFwidW5pdC10ZXh0LXNjYWxlZFwiKVxyXG4gICAgICAudGV4dCh5TWV0cmljTGFiZWwgKyBcIiAgICAgKFwiICsgeUxhYmVsICsgXCIpXCIpO1xyXG5cclxuICAgIC8vIEFkZCBYIGxhYmVsXHJcbiAgICB2ZWN0b3JHcmFwaC5zdmcuYXBwZW5kKFwidGV4dFwiKVxyXG4gICAgICAuYXR0cihcInRleHQtYW5jaG9yXCIsIFwibWlkZGxlXCIpICAvLyB0aGlzIG1ha2VzIGl0IGVhc3kgdG8gY2VudHJlIHRoZSB0ZXh0IGFzIHRoZSB0cmFuc2Zvcm0gaXMgYXBwbGllZCB0byB0aGUgYW5jaG9yXHJcbiAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIFwidHJhbnNsYXRlKFwiKyAodldpZHRoLzIpICtcIixcIisgKyh2SGVpZ2h0ICsgdk1hcmdpbi5ib3R0b20vNCkgKyBcIilcIikgIC8vIHRleHQgaXMgZHJhd24gb2ZmIHRoZSBzY3JlZW4gdG9wIGxlZnQsIG1vdmUgZG93biBhbmQgb3V0IGFuZCByb3RhdGVcclxuICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcInVuaXQtdGV4dC1zY2FsZWRcIilcclxuICAgICAgLnRleHQoeE1ldHJpY0xhYmVsKyBcIiAgICAgKFwiICsgeExhYmVsICsgXCIpXCIpO1xyXG5cclxuXHJcbiAgICBpZighdmVjdG9yR3JhcGguY3JlYXRlZCl7XHJcbiAgICAgIHZhciBsZWdlbmQgPSB2ZWN0b3JHcmFwaC5zdmcuYXBwZW5kKFwiZ1wiKVxyXG4gICAgICAgIC5hdHRyKCdjbGFzcycsICd2ZWN0b3Ita2V5LXRleHQnKVxyXG4gICAgICAgIC5hdHRyKFwidGV4dC1hbmNob3JcIiwgXCJlbmRcIilcclxuICAgICAgICAuc2VsZWN0QWxsKFwiZ1wiKVxyXG4gICAgICAgIC5kYXRhKGVkYnMpXHJcbiAgICAgICAgLmVudGVyKCkuYXBwZW5kKFwiZ1wiKVxyXG4gICAgICAgIC5hcHBlbmQoXCJzdmc6YVwiKVxyXG4gICAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIGZ1bmN0aW9uKGQsIGkpIHtcclxuICAgICAgICAgIHZhciB5ID0gTWF0aC5mbG9vcihpIC8gNSkgKiAyMDtcclxuICAgICAgICAgIHZhciB4ID0gKGkgLSAoTWF0aC5mbG9vcigoaSAvIDUpKSAqIDUpKSAqIDE2MDtcclxuICAgICAgICAgIHggPSB4ICsgdk1hcmdpbi5sZWZ0O1xyXG4gICAgICAgICAgcmV0dXJuIFwidHJhbnNsYXRlKFwiKyB4ICtcIixcIiArICh5ICt2SGVpZ2h0ICt2TWFyZ2luLmJvdHRvbS8zICkgKyBcIilcIjtcclxuICAgICAgICB9KVxyXG4gICAgICAgIC5vbignbW91c2VvdmVyJywgZnVuY3Rpb24oZCl7XHJcbiAgICAgICAgICB2ZWN0b3JHcmFwaC5zdmcuc2VsZWN0QWxsKCdsaW5lLicrZC5yZXBsYWNlKC8gL2cgLCBcIlwiKSlcclxuICAgICAgICAgICAgLmNsYXNzZWQoXCJsaW5lLXNlbGVjdGVkXCIsIHRydWUpO1xyXG4gICAgICAgIH0pLlxyXG4gICAgICAgIG9uKCdtb3VzZW91dCcsIGZ1bmN0aW9uKGQpe1xyXG4gICAgICAgICAgdmVjdG9yR3JhcGguc3ZnLnNlbGVjdEFsbCgnbGluZS4nK2QucmVwbGFjZSgvIC9nICwgXCJcIikpXHJcbiAgICAgICAgICAgIC5jbGFzc2VkKFwibGluZS1zZWxlY3RlZFwiLCBmYWxzZSk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICBsZWdlbmQuYXBwZW5kKFwiY2lyY2xlXCIpXHJcbiAgICAgICAgLmF0dHIoXCJjeFwiLCB2TWFyZ2luLmxlZnQgKyA1NSlcclxuICAgICAgICAuYXR0cihcImN5XCIsIDkuNSlcclxuICAgICAgICAuYXR0cihcInJcIiwgNy41KVxyXG4gICAgICAgIC8vIC5hdHRyKFwiaGVpZ2h0XCIsIDE5KVxyXG4gICAgICAgIC5hdHRyKFwiZmlsbFwiLCBjb2xvcik7XHJcblxyXG4gICAgICBsZWdlbmQuYXBwZW5kKFwidGV4dFwiKVxyXG4gICAgICAgIC5hdHRyKFwieFwiLCB2TWFyZ2luLmxlZnQgKyA0MClcclxuICAgICAgICAuYXR0cihcInlcIiwgOS41KVxyXG4gICAgICAgIC5hdHRyKFwiZHlcIiwgXCIwLjMyZW1cIilcclxuICAgICAgICAuYXR0cihcImNsYXNzXCIsIFwiZy10ZXh0XCIpXHJcbiAgICAgICAgLnN0eWxlKFwiZm9udC1zaXplXCIsIFwiMTRweFwiKVxyXG4gICAgICAgIC50ZXh0KGZ1bmN0aW9uKGQpIHsgcmV0dXJuIGQ7IH0pO1xyXG4gICAgfVxyXG4gICAgdmVjdG9yR3JhcGguY3JlYXRlZCA9IHRydWU7XHJcbiAgfVxyXG5cclxuICByZXR1cm4ge1xyXG4gICAgY3JlYXRlVmVjdG9yR3JhcGggOiBjcmVhdGVWZWN0b3JHcmFwaFxyXG4gIH1cclxufSkoKTtcclxuXHJcbiJdfQ==
