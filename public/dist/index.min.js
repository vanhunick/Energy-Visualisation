function createAnimatingBar(){$.post("/compare/search",{company:"",selections:JSON.stringify([selection])},function(e){if(e.rows.length>0){var t=new DataProcessor;barData=t.createDataForGroupedGraph(e.rows),unit=e.rows[0].units;var a=-(1/0);e.rows.forEach(function(e){a=+e.value>a?+e.value:a}),$("#animating-bar").append('<h4 class="title">'+selection.subCategory+", "+selection.description+"</h4>"),$("#animating-bar").append('<h5 class="subTitle">'+selection.section+", "+selection.subCategory+"</h5>");var e=[];for(var o in barData.data[curDataIndex])"edb"!==o&&e.push({category:o,value:barData.data[curDataIndex][o]});SingleBarModule.createBarGraph("#animating-bar",a,0,e,barData.data[curDataIndex].edb,unit),curDataIndex++,d3.interval(function(){var e=[];for(var t in barData.data[curDataIndex])"edb"!==t&&e.push({category:t,value:barData.data[curDataIndex][t]});SingleBarModule.createBarGraph("#animating-bar",a,0,e,barData.data[curDataIndex].edb,unit),curDataIndex=curDataIndex+1>=barData.data.length?0:curDataIndex+1},2e3)}else console.log("No results")})}function insertDataTable(e){console.log("Inserting table"),$("#results-table").append("<caption>"+e[0].description+"</caption>");var t=!1;null!==e[0].obs_yr?(console.log("Observed"),t=!0):null!==e[0].fcast_yr&&console.log("Forecast");var a=null,o=null;t?(a=e.reduce(function(e,t){return e.disc_yr<t.disc_yr?e:t}).obs_yr,o=e.reduce(function(e,t){return e.disc_yr>t.disc_yr?e:t}).obs_yr):(a=e.reduce(function(e,t){return e.fcast_yr<t.fcast_yr?e:t}).fcast_yr,o=e.reduce(function(e,t){return e.fcast_yr>t.fcast_yr?e:t}).fcast_yr),console.log("Min "+a+" Max "+o);for(var n="",r=a;r<=o;r++)n+="<th>"+r+"</th>";$("#results-table").append('<tr id="head-row"> <th>EDB</th>'+n+"</tr>");for(var s=[],c=0,i=[],r=0;r<e.length;r++)if(!s.includes(e[r].edb)){s.push(e[r].edb);for(var l="<tr id=row"+r+"><th>"+e[r].edb+"</th>",u=a;u<=o;u++)for(var d=0;d<e.length;d++)e[d].edb===e[r].edb&&(t?e[d].disc_yr:e[d].fcast_yr)===u&&(l+="<th id='t"+c+"'>"+e[d].value+"</th>",i.push({id:"#t"+c,value:e[d].value}),c++);$("#results-table").append(l+"</tr>"),$("#row"+r).click(function(e){showBarWithRowElem(this.id)})}for(var o=-(1/0),r=0;r<i.length;r++)+i[r].value>o&&(o=+i[r].value),$(i[r].id).css({background:"-webkit-gradient(linear, left top, right top, color-stop("+i[r].value+"%,#F00), color-stop("+i[r].value+"%,#FFF))"});maxTableValue=o}function showBarWithRowElem(e){var t=[];$("#results-table").find("tr").removeClass("row-selected"),$("#"+e).addClass("row-selected"),$("#head-row").find("th").each(function(e,a){0!=e&&t.push({category:$(a).text(),value:0})});var a="";$("#"+e).find("th").each(function(e,o){0!=e?t[e-1].value=$(o).text():a=t[e].value=$(o).text()}),SingleBarModule.createBarGraph("#graph-div",maxTableValue,t)}function insertCompanies(){$.get("/sections/company",function(e){e.companies.length>0&&$("#company-select").html("<option selected>"+e.companies[0]+"</option>");for(var t=1;t<e.companies.length;t++)$("#company-select").append("<option>"+e.companies[t]+"</option>");$(".selectpicker").selectpicker("refresh")})}var section="",category="",subcategory="",company="",description="",descriptionExists=!1,subExists=!1;$(document).ready(function(){$(".nav-link").removeClass("active"),$("#data-link").addClass("active"),insertCompanies(),$("#section-select").on("change",function(){section=$(this).find("option:selected").text(),$.post("/sections/s",{selected:section},function(e){e.categories.length>0&&$("#category-select").html("");for(var t=0;t<e.categories.length;t++)$("#category-select").append("<option>"+e.categories[t]+"</option>");$(".selectpicker").selectpicker("refresh")})}),$("#category-select").on("change",function(){category=$(this).find("option:selected").text(),$.post("/sections/sc",{category:category,section:section},function(e){if(!(e.subCategories.length>0&&null!==e.subCategories[0]))return void(subExists=!1);subExists=!0,$("#subsection-select").html("");for(var t=0;t<e.subCategories.length;t++)$("#subsection-select").append("<option>"+e.subCategories[t]+"</option>");$(".selectpicker").selectpicker("refresh")})}),$("#subsection-select").on("change",function(){subcategory=$(this).find("option:selected").text(),$.post("/sections/desc",{category:category,section:section,subCategory:subcategory},function(e){if(!(e.descriptions.length>0&&null!==e.descriptions[0]))return void(descriptionExists=!1);descriptionExists=!0,$("#description-select").html("");for(var t=0;t<e.descriptions.length;t++)$("#description-select").append("<option>"+e.descriptions[t]+"</option>");$(".selectpicker").selectpicker("refresh")})}),$("#description-select").on("change",function(){description=$(this).find("option:selected").text()}),$("#company-select").on("change",function(){company=$(this).find("option:selected").text()}),$("#search-btn").click(function(){return""===section?void $("#error").html("Section not selected"):""===category?void $("#error").html("Category not selected"):""===subcategory&&subExists?void $("#error").html("Sub category not selected"):void $.post("/sections/search",{section:section,category:category,subCategory:subcategory,company:company,description:description},function(e){e.rows.length>0?insertDataTable(e.rows):console.log("No results")})}),createAnimatingBar()});var selection={section:"1(i): Expenditure metrics",category:"Operational expenditure",subCategory:"Network",description:"Expenditure per average no. of ICPs ($/ICP)",id:0},curDataIndex=0,barData,unit,maxTableValue=0;
//# sourceMappingURL=data:application/json;charset=utf8;base64,
